#!/usr/bin/env python3
"""
V√©rifie que tous les modules sont track√©s par Git et propres.
"""

import json
import subprocess
import sys
from pathlib import Path

# Check compatible CI
ROOT = Path(".")
if not (ROOT / ".git").exists():
    print("‚ÑπÔ∏è  Pas de d√©p√¥t Git d√©tect√© (CI/shallow?) ‚Äî check ignor√©.")
    sys.exit(0)

INV = Path("artifacts/inventory_ultimate.json")

if not INV.exists():
    print("‚ö†Ô∏è  Inventaire introuvable")
    sys.exit(0)

mods = json.loads(INV.read_text())["bundle1_recommendations"]["modules"]
bad = False

print("üîç V√©rification Git des modules...\n")

for m in mods:
    p = m["path"]
    try:
        # V√©rifie que le fichier est track√©
        subprocess.run(
            ["git", "ls-files", "--error-unmatch", p],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )

        # V√©rifie qu'il n'y a pas de modifications non commit√©es
        changed = subprocess.run(["git", "status", "--porcelain", "--", p], capture_output=True, text=True, check=True)

        if changed.stdout.strip():
            print(f"‚ùå Fichier modifi√© non commit√©: {p}")
            bad = True
        else:
            print(f"‚úÖ {m['brain_region']}: {p}")

    except subprocess.CalledProcessError:
        print(f"‚ùå Fichier non track√© par Git: {p}")
        bad = True

if bad:
    print("\n‚õî Tous les modules doivent √™tre track√©s et propres")
    sys.exit(1)

print("\n‚úÖ Tous les fichiers sont track√©s et propres")
