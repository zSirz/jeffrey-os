#!/usr/bin/env python

"""
Module de synchronisation vocale pour Jeffrey.
G√®re la m√©moire vocale partag√©e entre les appareils via iCloud.
"""

import csv
import json
import logging
import os
import uuid
from datetime import datetime
from pathlib import Path
from typing import Any

from jeffrey.utils.env_loader import detecter_plateforme

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('jeffrey_voice_sync.log', encoding='utf-8'), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


class VoiceSync:
    """Gestion de la synchronisation vocale de Jeffrey"""

    def __init__(self):
        """Initialise le syst√®me de synchronisation vocale"""
        self.platform_name, self.base_path = detecter_plateforme()
        self.sync_file = os.path.join(self.base_path, "jeffrey_voice_sync.json")
        self.local_sync_file = os.path.expanduser("~/Documents/Jeffrey_Local/jeffrey_voice_sync.json")

        # Cr√©er les r√©pertoires s'ils n'existent pas
        Path(os.path.dirname(self.sync_file)).mkdir(parents=True, exist_ok=True)
        Path(os.path.dirname(self.local_sync_file)).mkdir(parents=True, exist_ok=True)

        # Initialiser les donn√©es
        self.voice_history: list[dict[str, Any]] = []
        self._charger_historique()

    def _charger_historique(self) -> None:
        """Charge l'historique vocal depuis le fichier de synchronisation"""
        try:
            # Essayer d'abord le fichier iCloud
            if os.path.exists(self.sync_file):
                with open(self.sync_file, encoding='utf-8') as f:
                    data = json.load(f)
                    self.voice_history = data.get('history', [])
                logger.info(f"Historique vocal charg√© depuis {self.sync_file}")
                return

            # Fallback sur le fichier local
            if os.path.exists(self.local_sync_file):
                with open(self.local_sync_file, encoding='utf-8') as f:
                    data = json.load(f)
                    self.voice_history = data.get('history', [])
                logger.info(f"Historique vocal charg√© depuis {self.local_sync_file}")
                return

        except Exception as e:
            logger.error(f"Erreur lors du chargement de l'historique : {e}")
            self.voice_history = []

    def _sauvegarder_historique(self) -> None:
        """Sauvegarde l'historique vocal dans les fichiers"""
        try:
            data = {'history': self.voice_history}

            # Sauvegarde principale (iCloud)
            with open(self.sync_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            # Sauvegarde locale (fallback)
            with open(self.local_sync_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            logger.debug("Historique vocal sauvegard√© avec succ√®s")

        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde de l'historique : {e}")

    def log_phrase(
        self, texte: str, emotion: str, timestamp: datetime | None = None, vocal_id: str | None = None, **metadata
    ) -> str:
        """
        Enregistre une nouvelle phrase vocale dans l'historique.

        Args:
            texte (str): Le texte prononc√©
            emotion (str): L'√©motion exprim√©e
            timestamp (datetime, optional): Horodatage de la phrase
            vocal_id (str, optional): Identifiant unique de la vocalisation
            **metadata: M√©tadonn√©es suppl√©mentaires (tonalit√©, voix, etc.)

        Returns:
            str: L'identifiant unique de la vocalisation
        """
        if timestamp is None:
            timestamp = datetime.now()

        if vocal_id is None:
            vocal_id = str(uuid.uuid4())

        entry = {
            'id': vocal_id,
            'timestamp': timestamp.isoformat(),
            'text': texte,
            'emotion': emotion,
            'platform': self.platform_name,
            **metadata,
        }

        self.voice_history.append(entry)
        self._sauvegarder_historique()

        logger.info(f"Nouvelle entr√©e vocale enregistr√©e : {vocal_id}")
        return vocal_id

    def get_last_spoken(self) -> dict[str, Any] | None:
        """
        R√©cup√®re la derni√®re phrase vocale enregistr√©e.

        Returns:
            Optional[Dict[str, Any]]: Derni√®re entr√©e vocale ou None si vide
        """
        if not self.voice_history:
            return None
        return self.voice_history[-1]

    def get_history(self, limit: int | None = None, emotion_filter: str | None = None) -> list[dict[str, Any]]:
        """
        R√©cup√®re l'historique des phrases vocales.

        Args:
            limit (int, optional): Nombre maximum d'entr√©es √† retourner
            emotion_filter (str, optional): Filtrer par √©motion

        Returns:
            List[Dict[str, Any]]: Liste des entr√©es vocales tri√©es par date
        """
        # Trier par date d√©croissante
        history = sorted(self.voice_history, key=lambda x: x['timestamp'], reverse=True)

        # Filtrer par √©motion si demand√©
        if emotion_filter:
            history = [entry for entry in history if entry['emotion'].lower() == emotion_filter.lower()]

        # Limiter le nombre d'entr√©es si demand√©
        if limit is not None:
            history = history[:limit]

        return history

    def export_to_csv(self, output_path: str) -> bool:
        """
        Exporte l'historique vocal au format CSV.

        Args:
            output_path (str): Chemin du fichier CSV de sortie

        Returns:
            bool: True si l'export a r√©ussi, False sinon
        """
        try:
            # Cr√©er le r√©pertoire de sortie si n√©cessaire
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            # Pr√©parer les en-t√™tes
            if not self.voice_history:
                logger.warning("Aucune donn√©e √† exporter")
                return False

            # D√©terminer tous les champs possibles
            fields = set()
            for entry in self.voice_history:
                fields.update(entry.keys())
            fields = sorted(list(fields))

            # √âcrire le CSV
            with open(output_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=fields)
                writer.writeheader()
                writer.writerows(self.voice_history)

            logger.info(f"Historique vocal export√© vers {output_path}")
            return True

        except Exception as e:
            logger.error(f"Erreur lors de l'export CSV : {e}")
            return False

    def fallback_local(self) -> None:
        """Force l'utilisation du fichier local en cas de probl√®me avec iCloud"""
        try:
            if os.path.exists(self.local_sync_file):
                with open(self.local_sync_file, encoding='utf-8') as f:
                    data = json.load(f)
                    self.voice_history = data.get('history', [])
                logger.info("Mode fallback local activ√©")
            else:
                logger.warning("Aucun fichier local disponible pour le fallback")
        except Exception as e:
            logger.error(f"Erreur lors du fallback local : {e}")

    def get_entries_by_emotion(self, emotion: str, limit: int = 5) -> list[str]:
        """
        R√©cup√®re les derni√®res phrases vocales associ√©es √† une √©motion.

        Args:
            emotion (str): √âmotion √† rechercher
            limit (int): Nombre maximum d'entr√©es √† retourner

        Returns:
            List[str]: Liste des phrases vocales tri√©es par date (plus r√©centes d'abord)
        """
        # R√©cup√©rer l'historique filtr√© par √©motion
        entries = self.get_history(emotion_filter=emotion, limit=limit)

        # Extraire uniquement les textes
        return [entry['text'] for entry in entries]


if __name__ == "__main__":
    # Test du module
    sync = VoiceSync()

    # G√©n√©rer quelques entr√©es de test
    test_entries = [
        ("Bonjour, je suis Jeffrey !", "joie", {"tonalite": "aigue", "voix": "default"}),
        ("Je suis un peu triste aujourd'hui...", "tristesse", {"tonalite": "grave", "voix": "sad"}),
        ("Je suis tr√®s curieuse de te conna√Ætre !", "curiosite", {"tonalite": "neutre", "voix": "curious"}),
    ]

    print("\n=== Test du module VoiceSync ===")

    # Enregistrer les entr√©es de test
    for texte, emotion, metadata in test_entries:
        vocal_id = sync.log_phrase(texte, emotion, **metadata)
        print("\n‚úÖ Entr√©e enregistr√©e :")
        print(f"   ID: {vocal_id}")
        print(f"   Texte: {texte}")
        print(f"   √âmotion: {emotion}")
        print(f"   M√©tadonn√©es: {metadata}")

    # Afficher la derni√®re entr√©e
    last = sync.get_last_spoken()
    if last:
        print("\nüìù Derni√®re entr√©e :")
        print(f"   Texte: {last['text']}")
        print(f"   √âmotion: {last['emotion']}")
        print(f"   Date: {last['timestamp']}")

    # Exporter en CSV
    csv_path = os.path.expanduser("~/Documents/Jeffrey_Local/voice_history.csv")
    if sync.export_to_csv(csv_path):
        print(f"\nüìä Export CSV r√©ussi : {csv_path}")

    print("\n=== Test termin√© ===")
