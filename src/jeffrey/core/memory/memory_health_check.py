#!/usr/bin/env python3
"""
üè• Jeffrey V2.0 Memory Health Check - Health Checks Automatiques et Maintenance
Surveillance proactive et maintenance automatique du Memory Systems

Diagnostic complet, auto-r√©paration et optimisation continue
"""

from __future__ import annotations

import asyncio
import json
import logging
import shutil
import sys
import time
from dataclasses import asdict, dataclass, field
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any

import psutil

# Ajout du chemin pour les imports
current_dir = Path(__file__).parent.parent
src_path = current_dir / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))


logger = logging.getLogger(__name__)


@dataclass
class HealthCheckResult:
    """üè• R√©sultat d'un health check"""

    check_name: str
    status: str  # "pass", "warning", "fail"
    severity: str  # "low", "medium", "high", "critical"
    message: str
    details: dict[str, Any] = field(default_factory=dict)
    recommendations: list[str] = field(default_factory=list)
    auto_fix_available: bool = False
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())


@dataclass
class MaintenanceAction:
    """üîß Action de maintenance automatique"""

    action_name: str
    description: str
    action_type: str  # "cleanup", "optimization", "repair", "update"
    estimated_impact: str  # "low", "medium", "high"
    requires_restart: bool = False
    executed: bool = False
    execution_time: str | None = None
    result: str | None = None


class MemoryHealthChecker:
    """üè• V√©rificateur de sant√© du Memory Systems"""

    def __init__(self, storage_path: str = "data/health_checks") -> None:
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(parents=True, exist_ok=True)

        # Configuration des checks
        self.check_intervals = {
            "performance": 300,  # 5 minutes
            "storage": 1800,  # 30 minutes
            "memory_leaks": 3600,  # 1 heure
            "data_integrity": 7200,  # 2 heures
            "security": 21600,  # 6 heures
        }

        # Seuils d'alerte
        self.thresholds = {
            "max_memory_mb": 1000,
            "max_cpu_percent": 80,
            "max_disk_usage_percent": 85,
            "min_free_space_gb": 5,
            "max_response_time_ms": 500,
            "min_cache_hit_rate": 0.8,
            "max_error_rate": 0.05,
        }

        # Historique des checks
        self.check_history: list[HealthCheckResult] = []
        self.maintenance_history: list[MaintenanceAction] = []

        self.logger = logging.getLogger(__name__)

    async def run_complete_health_check(self) -> dict[str, Any]:
        """üîç Lance un health check complet du syst√®me"""

        self.logger.info("üè• D√©marrage health check complet Memory Systems")
        start_time = time.time()

        # Ex√©cution de tous les checks
        check_results = []

        try:
            # 1. Performance Check
            perf_result = await self._check_performance()
            check_results.append(perf_result)

            # 2. Memory Leaks Check
            memory_result = await self._check_memory_leaks()
            check_results.append(memory_result)

            # 3. Storage Health Check
            storage_result = await self._check_storage_health()
            check_results.append(storage_result)

            # 4. Data Integrity Check
            integrity_result = await self._check_data_integrity()
            check_results.append(integrity_result)

            # 5. Cache Efficiency Check
            cache_result = await self._check_cache_efficiency()
            check_results.append(cache_result)

            # 6. Error Rate Check
            error_result = await self._check_error_rates()
            check_results.append(error_result)

            # 7. Security Check
            security_result = await self._check_security()
            check_results.append(security_result)

            # 8. Backup Integrity Check
            backup_result = await self._check_backup_integrity()
            check_results.append(backup_result)

        except Exception as e:
            self.logger.error(f"Erreur lors des health checks: {e}")
            check_results.append(
                HealthCheckResult(
                    check_name="health_check_execution",
                    status="fail",
                    severity="critical",
                    message=f"Erreur lors de l'ex√©cution des checks: {e}",
                )
            )

        # Sauvegarde des r√©sultats
        self.check_history.extend(check_results)

        # Analyse globale
        overall_status = self._calculate_overall_health(check_results)

        # Actions de maintenance automatique
        maintenance_actions = await self._generate_maintenance_actions(check_results)

        # Ex√©cution des actions critiques
        executed_actions = await self._execute_critical_maintenance(maintenance_actions)

        execution_time = time.time() - start_time

        # Rapport final
        health_report = {
            "timestamp": datetime.now().isoformat(),
            "execution_time_seconds": round(execution_time, 2),
            "overall_status": overall_status,
            "checks_performed": len(check_results),
            "checks_passed": len([r for r in check_results if r.status == "pass"]),
            "checks_warning": len([r for r in check_results if r.status == "warning"]),
            "checks_failed": len([r for r in check_results if r.status == "fail"]),
            "check_results": [asdict(result) for result in check_results],
            "maintenance_actions": [asdict(action) for action in maintenance_actions],
            "executed_actions": executed_actions,
            "recommendations": self._generate_recommendations(check_results),
        }

        # Sauvegarde du rapport
        await self._save_health_report(health_report)

        self.logger.info(f"üè• Health check termin√© en {execution_time:.2f}s - Status: {overall_status}")

        return health_report

    async def _check_performance(self) -> HealthCheckResult:
        """‚ö° V√©rifie les performances du syst√®me"""

        try:
            # M√©triques syst√®me
            process = psutil.Process()
            memory_info = process.memory_info()
            cpu_percent = process.cpu_percent(interval=1)

            memory_mb = memory_info.rss / 1024 / 1024

            # V√©rification des seuils
            issues = []
            recommendations = []

            if memory_mb > self.thresholds["max_memory_mb"]:
                issues.append(f"Utilisation m√©moire √©lev√©e: {memory_mb:.1f}MB")
                recommendations.append("Red√©marrer le service ou augmenter la RAM allou√©e")

            if cpu_percent > self.thresholds["max_cpu_percent"]:
                issues.append(f"Utilisation CPU √©lev√©e: {cpu_percent:.1f}%")
                recommendations.append("Optimiser les requ√™tes ou augmenter les ressources CPU")

            # Test de latence
            start_time = time.time()
            # Simulation d'une op√©ration m√©moire
            await asyncio.sleep(0.1)  # Simulation
            latency_ms = (time.time() - start_time) * 1000

            if latency_ms > self.thresholds["max_response_time_ms"]:
                issues.append(f"Latence √©lev√©e: {latency_ms:.1f}ms")
                recommendations.append("Optimiser les index de recherche")

            # D√©termination du statut
            if len(issues) == 0:
                status = "pass"
                severity = "low"
                message = "Performances optimales"
            elif len(issues) <= 2:
                status = "warning"
                severity = "medium"
                message = f"Probl√®mes de performance d√©tect√©s: {', '.join(issues)}"
            else:
                status = "fail"
                severity = "high"
                message = f"Performances d√©grad√©es: {', '.join(issues)}"

            return HealthCheckResult(
                check_name="performance",
                status=status,
                severity=severity,
                message=message,
                details={
                    "memory_usage_mb": memory_mb,
                    "cpu_usage_percent": cpu_percent,
                    "latency_ms": latency_ms,
                    "issues_count": len(issues),
                },
                recommendations=recommendations,
                auto_fix_available=len(issues) > 0,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="performance",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check performance: {e}",
            )

    async def _check_memory_leaks(self) -> HealthCheckResult:
        """üîç D√©tecte les fuites m√©moire"""

        try:
            # Analyse de l'utilisation m√©moire sur la dur√©e
            process = psutil.Process()

            # Simulation de test de fuite m√©moire
            memory_samples = []
            for i in range(5):
                memory_info = process.memory_info()
                memory_samples.append(memory_info.rss / 1024 / 1024)
                await asyncio.sleep(0.2)

            # Analyse de la tendance
            if len(memory_samples) >= 3:
                trend = (memory_samples[-1] - memory_samples[0]) / len(memory_samples)

                if trend > 10:  # Augmentation de plus de 10MB en moyenne
                    status = "warning"
                    severity = "medium"
                    message = f"Tendance d'augmentation m√©moire d√©tect√©e: +{trend:.1f}MB"
                    recommendations = [
                        "Analyser les r√©f√©rences d'objets",
                        "Forcer garbage collection",
                    ]
                elif trend > 50:
                    status = "fail"
                    severity = "high"
                    message = f"Fuite m√©moire probable: +{trend:.1f}MB"
                    recommendations = [
                        "Red√©marrage recommand√©",
                        "Audit du code pour fuites",
                    ]
                else:
                    status = "pass"
                    severity = "low"
                    message = "Aucune fuite m√©moire d√©tect√©e"
                    recommendations = []
            else:
                status = "warning"
                severity = "low"
                message = "Donn√©es insuffisantes pour analyse"
                recommendations = ["Augmenter la dur√©e de monitoring"]

            return HealthCheckResult(
                check_name="memory_leaks",
                status=status,
                severity=severity,
                message=message,
                details={
                    "memory_samples": memory_samples,
                    "memory_trend_mb": trend if "trend" in locals() else 0,
                    "current_memory_mb": memory_samples[-1] if memory_samples else 0,
                },
                recommendations=recommendations,
                auto_fix_available=status != "pass",
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="memory_leaks",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check memory leaks: {e}",
            )

    async def _check_storage_health(self) -> HealthCheckResult:
        """üíæ V√©rifie la sant√© du stockage"""

        try:
            # Analyse de l'espace disque
            disk_usage = shutil.disk_usage(self.storage_path)
            total_gb = disk_usage.total / (1024**3)
            free_gb = disk_usage.free / (1024**3)
            used_percent = (disk_usage.used / disk_usage.total) * 100

            # Taille des fichiers de donn√©es
            data_size_mb = 0
            try:
                for file_path in self.storage_path.rglob("*"):
                    if file_path.is_file():
                        data_size_mb += file_path.stat().st_size / (1024**2)
            except:
                data_size_mb = -1  # Erreur de calcul

            # V√©rifications
            issues = []
            recommendations = []

            if free_gb < self.thresholds["min_free_space_gb"]:
                issues.append(f"Espace libre insuffisant: {free_gb:.1f}GB")
                recommendations.append("Nettoyer les anciens logs et donn√©es temporaires")

            if used_percent > self.thresholds["max_disk_usage_percent"]:
                issues.append(f"Utilisation disque √©lev√©e: {used_percent:.1f}%")
                recommendations.append("Archiver les anciennes donn√©es")

            # Test d'√©criture
            try:
                test_file = self.storage_path / "write_test.tmp"
                test_file.write_text("test")
                test_file.unlink()
                write_test_ok = True
            except:
                write_test_ok = False
                issues.append("Test d'√©criture √©chou√©")
                recommendations.append("V√©rifier les permissions et l'espace disque")

            # D√©termination du statut
            if len(issues) == 0:
                status = "pass"
                severity = "low"
                message = "Stockage en bonne sant√©"
            elif len(issues) == 1:
                status = "warning"
                severity = "medium"
                message = f"Probl√®mes de stockage: {', '.join(issues)}"
            else:
                status = "fail"
                severity = "high"
                message = f"Stockage en √©tat critique: {', '.join(issues)}"

            return HealthCheckResult(
                check_name="storage_health",
                status=status,
                severity=severity,
                message=message,
                details={
                    "total_space_gb": round(total_gb, 2),
                    "free_space_gb": round(free_gb, 2),
                    "used_percent": round(used_percent, 1),
                    "data_size_mb": round(data_size_mb, 2),
                    "write_test_ok": write_test_ok,
                },
                recommendations=recommendations,
                auto_fix_available=True,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="storage_health",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check storage: {e}",
            )

    async def _check_data_integrity(self) -> HealthCheckResult:
        """üîê V√©rifie l'int√©grit√© des donn√©es"""

        try:
            # V√©rification des fichiers de donn√©es critiques
            critical_files = [
                "memories.json",
                "user_profiles.json",
                "relationships.json",
            ]

            integrity_issues = []
            files_checked = 0

            for filename in critical_files:
                file_path = self.storage_path / filename

                if not file_path.exists():
                    # Fichier pas encore cr√©√© - normal pour nouveau syst√®me
                    continue

                files_checked += 1

                try:
                    # Test de lecture JSON
                    with open(file_path) as f:
                        data = json.load(f)

                    # V√©rifications basiques de structure
                    if not isinstance(data, (dict, list)):
                        integrity_issues.append(f"{filename}: Structure de donn√©es invalide")

                    # V√©rification de la taille (pas vide de mani√®re suspecte)
                    if file_path.stat().st_size < 10:
                        integrity_issues.append(f"{filename}: Fichier suspicieusement petit")

                except json.JSONDecodeError:
                    integrity_issues.append(f"{filename}: JSON corrompu")
                except Exception as e:
                    integrity_issues.append(f"{filename}: Erreur lecture - {e}")

            # D√©termination du statut
            if len(integrity_issues) == 0:
                status = "pass"
                severity = "low"
                message = f"Int√©grit√© des donn√©es valid√©e ({files_checked} fichiers)"
            elif len(integrity_issues) <= 2:
                status = "warning"
                severity = "medium"
                message = f"Probl√®mes d'int√©grit√© mineurs: {', '.join(integrity_issues)}"
            else:
                status = "fail"
                severity = "high"
                message = f"Corruption de donn√©es d√©tect√©e: {', '.join(integrity_issues)}"

            recommendations = []
            if integrity_issues:
                recommendations.extend(
                    [
                        "Restaurer depuis backup si disponible",
                        "V√©rifier les logs pour cause de corruption",
                        "Activer la sauvegarde automatique",
                    ]
                )

            return HealthCheckResult(
                check_name="data_integrity",
                status=status,
                severity=severity,
                message=message,
                details={
                    "files_checked": files_checked,
                    "integrity_issues": integrity_issues,
                    "critical_files": critical_files,
                },
                recommendations=recommendations,
                auto_fix_available=len(integrity_issues) > 0,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="data_integrity",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check int√©grit√©: {e}",
            )

    async def _check_cache_efficiency(self) -> HealthCheckResult:
        """üéØ V√©rifie l'efficacit√© du cache"""

        try:
            # Simulation de m√©triques cache (√† remplacer par vraies m√©triques)
            cache_hit_rate = 0.85 + (time.time() % 10) * 0.01  # Simulation
            cache_size_mb = 128 + (time.time() % 20)
            cache_requests = 1000 + int(time.time() % 500)

            issues = []
            recommendations = []

            if cache_hit_rate < self.thresholds["min_cache_hit_rate"]:
                issues.append(f"Taux de cache hit bas: {cache_hit_rate:.1%}")
                recommendations.extend(
                    [
                        "Augmenter la taille du cache",
                        "Optimiser la strat√©gie de mise en cache",
                        "Analyser les patterns d'acc√®s",
                    ]
                )

            if cache_size_mb > 500:  # Cache trop gros
                issues.append(f"Cache volumineux: {cache_size_mb:.1f}MB")
                recommendations.append("Optimiser l'expiration du cache")

            # D√©termination du statut
            if len(issues) == 0:
                status = "pass"
                severity = "low"
                message = f"Cache efficace (hit rate: {cache_hit_rate:.1%})"
            elif cache_hit_rate < 0.7:
                status = "fail"
                severity = "high"
                message = f"Cache inefficace: {', '.join(issues)}"
            else:
                status = "warning"
                severity = "medium"
                message = f"Cache suboptimal: {', '.join(issues)}"

            return HealthCheckResult(
                check_name="cache_efficiency",
                status=status,
                severity=severity,
                message=message,
                details={
                    "cache_hit_rate": round(cache_hit_rate, 3),
                    "cache_size_mb": round(cache_size_mb, 1),
                    "cache_requests": cache_requests,
                },
                recommendations=recommendations,
                auto_fix_available=True,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="cache_efficiency",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check cache: {e}",
            )

    async def _check_error_rates(self) -> HealthCheckResult:
        """üö® V√©rifie les taux d'erreur"""

        try:
            # Simulation de m√©triques d'erreur (√† remplacer par vraies m√©triques)
            total_operations = 10000 + int(time.time() % 5000)
            errors = int(total_operations * 0.02)  # 2% d'erreurs simul√©es
            error_rate = errors / total_operations

            # Types d'erreurs simul√©es
            error_breakdown = {
                "timeout": errors // 3,
                "not_found": errors // 3,
                "validation": errors - (2 * errors // 3),
            }

            issues = []
            recommendations = []

            if error_rate > self.thresholds["max_error_rate"]:
                issues.append(f"Taux d'erreur √©lev√©: {error_rate:.1%}")
                recommendations.extend(
                    [
                        "Analyser les logs d'erreur",
                        "Optimiser la gestion des exceptions",
                        "Am√©liorer la validation des donn√©es",
                    ]
                )

            # Analyse par type d'erreur
            if error_breakdown["timeout"] > total_operations * 0.01:
                issues.append("Trop de timeouts")
                recommendations.append("Augmenter les timeouts ou optimiser les performances")

            # D√©termination du statut
            if error_rate < 0.01:  # Moins de 1%
                status = "pass"
                severity = "low"
                message = f"Taux d'erreur acceptable ({error_rate:.1%})"
            elif error_rate < self.thresholds["max_error_rate"]:
                status = "warning"
                severity = "medium"
                message = f"Taux d'erreur en augmentation: {error_rate:.1%}"
            else:
                status = "fail"
                severity = "high"
                message = f"Taux d'erreur critique: {error_rate:.1%}"

            return HealthCheckResult(
                check_name="error_rates",
                status=status,
                severity=severity,
                message=message,
                details={
                    "total_operations": total_operations,
                    "total_errors": errors,
                    "error_rate": round(error_rate, 4),
                    "error_breakdown": error_breakdown,
                },
                recommendations=recommendations,
                auto_fix_available=error_rate > 0.03,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="error_rates",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check error rates: {e}",
            )

    async def _check_security(self) -> HealthCheckResult:
        """üîí V√©rifie la s√©curit√© du syst√®me"""

        try:
            security_issues = []
            recommendations = []

            # V√©rification des permissions de fichiers
            try:
                test_file = self.storage_path / "security_test.tmp"
                test_file.touch()
                file_stat = test_file.stat()
                file_permissions = oct(file_stat.st_mode)[-3:]
                test_file.unlink()

                if file_permissions == "777":  # Permissions trop ouvertes
                    security_issues.append("Permissions de fichiers trop ouvertes")
                    recommendations.append("Restreindre les permissions (644 ou 600)")

            except Exception as e:
                security_issues.append(f"Impossible de v√©rifier les permissions: {e}")

            # V√©rification de l'√¢ge des credentials (simulation)
            credentials_age_days = 45  # Simulation
            if credentials_age_days > 90:
                security_issues.append("Credentials anciens")
                recommendations.append("Renouveler les cl√©s d'API et tokens")

            # V√©rification des connexions s√©curis√©es
            # (simulation - √† adapter selon l'impl√©mentation)
            secure_connections = True
            if not secure_connections:
                security_issues.append("Connexions non s√©curis√©es d√©tect√©es")
                recommendations.append("Forcer HTTPS/TLS pour toutes les connexions")

            # D√©termination du statut
            if len(security_issues) == 0:
                status = "pass"
                severity = "low"
                message = "S√©curit√© conforme"
            elif len(security_issues) <= 2:
                status = "warning"
                severity = "medium"
                message = f"Probl√®mes de s√©curit√© mineurs: {', '.join(security_issues)}"
            else:
                status = "fail"
                severity = "critical"
                message = f"Vuln√©rabilit√©s critiques: {', '.join(security_issues)}"

            return HealthCheckResult(
                check_name="security",
                status=status,
                severity=severity,
                message=message,
                details={
                    "security_issues": security_issues,
                    "credentials_age_days": credentials_age_days,
                    "secure_connections": secure_connections,
                },
                recommendations=recommendations,
                auto_fix_available=len(security_issues) > 0,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="security",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check s√©curit√©: {e}",
            )

    async def _check_backup_integrity(self) -> HealthCheckResult:
        """üíæ V√©rifie l'int√©grit√© des sauvegardes"""

        try:
            backup_path = self.storage_path / "backups"
            backup_issues = []
            recommendations = []

            # V√©rification de l'existence du dossier backup
            if not backup_path.exists():
                backup_issues.append("Dossier de sauvegarde inexistant")
                recommendations.append("Configurer le syst√®me de sauvegarde automatique")
            else:
                # V√©rification de la fra√Æcheur des backups
                backup_files = list(backup_path.glob("*.backup"))

                if not backup_files:
                    backup_issues.append("Aucune sauvegarde trouv√©e")
                    recommendations.append("Lancer une sauvegarde imm√©diate")
                else:
                    # V√©rification de l'√¢ge du dernier backup
                    latest_backup = max(backup_files, key=lambda f: f.stat().st_mtime)
                    backup_age_hours = (time.time() - latest_backup.stat().st_mtime) / 3600

                    if backup_age_hours > 24:  # Plus de 24h
                        backup_issues.append(f"Dernier backup ancien: {backup_age_hours:.1f}h")
                        recommendations.append("Planifier des sauvegardes plus fr√©quentes")

                    # Test d'int√©grit√© du dernier backup
                    try:
                        if latest_backup.suffix == ".json":
                            with open(latest_backup) as f:
                                json.load(f)
                        backup_integrity_ok = True
                    except:
                        backup_integrity_ok = False
                        backup_issues.append("Backup corrompu d√©tect√©")
                        recommendations.append("Refaire une sauvegarde valide")

            # D√©termination du statut
            if len(backup_issues) == 0:
                status = "pass"
                severity = "low"
                message = "Sauvegardes int√®gres"
            elif len(backup_issues) == 1:
                status = "warning"
                severity = "medium"
                message = f"Probl√®me de backup: {', '.join(backup_issues)}"
            else:
                status = "fail"
                severity = "high"
                message = f"Syst√®me de backup d√©faillant: {', '.join(backup_issues)}"

            return HealthCheckResult(
                check_name="backup_integrity",
                status=status,
                severity=severity,
                message=message,
                details={
                    "backup_path_exists": backup_path.exists(),
                    "backup_files_count": (len(backup_files) if "backup_files" in locals() else 0),
                    "backup_age_hours": (backup_age_hours if "backup_age_hours" in locals() else -1),
                    "backup_integrity_ok": (backup_integrity_ok if "backup_integrity_ok" in locals() else False),
                },
                recommendations=recommendations,
                auto_fix_available=True,
            )

        except Exception as e:
            return HealthCheckResult(
                check_name="backup_integrity",
                status="fail",
                severity="critical",
                message=f"Erreur lors du check backup: {e}",
            )

    def _calculate_overall_health(self, check_results: list[HealthCheckResult]) -> str:
        """üìä Calcule l'√©tat de sant√© global"""

        if not check_results:
            return "unknown"

        failed_checks = [r for r in check_results if r.status == "fail"]
        warning_checks = [r for r in check_results if r.status == "warning"]
        critical_failures = [r for r in failed_checks if r.severity == "critical"]

        if critical_failures:
            return "critical"
        elif len(failed_checks) > len(check_results) // 2:
            return "unhealthy"
        elif len(failed_checks) > 0 or len(warning_checks) > len(check_results) // 2:
            return "degraded"
        elif len(warning_checks) > 0:
            return "warning"
        else:
            return "healthy"

    async def _generate_maintenance_actions(self, check_results: list[HealthCheckResult]) -> list[MaintenanceAction]:
        """üîß G√©n√®re les actions de maintenance automatique"""

        actions = []

        for result in check_results:
            if result.status in ["fail", "warning"] and result.auto_fix_available:
                if result.check_name == "storage_health":
                    actions.append(
                        MaintenanceAction(
                            action_name="cleanup_old_logs",
                            description="Nettoyage des anciens logs et fichiers temporaires",
                            action_type="cleanup",
                            estimated_impact="low",
                        )
                    )

                elif result.check_name == "cache_efficiency":
                    actions.append(
                        MaintenanceAction(
                            action_name="optimize_cache",
                            description="Optimisation de la configuration du cache",
                            action_type="optimization",
                            estimated_impact="medium",
                        )
                    )

                elif result.check_name == "memory_leaks":
                    actions.append(
                        MaintenanceAction(
                            action_name="force_garbage_collection",
                            description="Forcer le garbage collection",
                            action_type="repair",
                            estimated_impact="low",
                        )
                    )

                elif result.check_name == "data_integrity" and result.status == "fail":
                    actions.append(
                        MaintenanceAction(
                            action_name="restore_from_backup",
                            description="Restauration depuis la derni√®re sauvegarde valide",
                            action_type="repair",
                            estimated_impact="high",
                            requires_restart=True,
                        )
                    )

                elif result.check_name == "backup_integrity":
                    actions.append(
                        MaintenanceAction(
                            action_name="create_backup",
                            description="Cr√©ation d'une nouvelle sauvegarde",
                            action_type="update",
                            estimated_impact="low",
                        )
                    )

        return actions

    async def _execute_critical_maintenance(self, actions: list[MaintenanceAction]) -> list[str]:
        """‚ö° Ex√©cute les actions de maintenance critiques"""

        executed_actions = []

        for action in actions:
            # Ex√©cuter seulement les actions √† faible impact automatiquement
            if action.estimated_impact == "low" and not action.requires_restart:
                try:
                    success = await self._execute_maintenance_action(action)
                    if success:
                        action.executed = True
                        action.execution_time = datetime.now().isoformat()
                        action.result = "success"
                        executed_actions.append(action.action_name)
                        self.logger.info(f"‚úÖ Action maintenance ex√©cut√©e: {action.action_name}")
                    else:
                        action.result = "failed"
                        self.logger.error(f"‚ùå √âchec action maintenance: {action.action_name}")

                except Exception as e:
                    action.result = f"error: {e}"
                    self.logger.error(f"‚ùå Erreur action maintenance {action.action_name}: {e}")

        return executed_actions

    async def _execute_maintenance_action(self, action: MaintenanceAction) -> bool:
        """üîß Ex√©cute une action de maintenance sp√©cifique"""

        try:
            if action.action_name == "cleanup_old_logs":
                return await self._cleanup_old_files()

            elif action.action_name == "optimize_cache":
                return await self._optimize_cache_settings()

            elif action.action_name == "force_garbage_collection":
                return await self._force_garbage_collection()

            elif action.action_name == "create_backup":
                return await self._create_backup()

            else:
                self.logger.warning(f"Action maintenance inconnue: {action.action_name}")
                return False

        except Exception as e:
            self.logger.error(f"Erreur ex√©cution action {action.action_name}: {e}")
            return False

    async def _cleanup_old_files(self) -> bool:
        """üßπ Nettoie les anciens fichiers"""
        try:
            cutoff_date = datetime.now() - timedelta(days=30)
            files_deleted = 0

            # Nettoyage des logs anciens
            log_patterns = ["*.log", "*.tmp", "*_temp.*"]

            for pattern in log_patterns:
                for file_path in self.storage_path.rglob(pattern):
                    if file_path.is_file():
                        file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
                        if file_time < cutoff_date:
                            file_path.unlink()
                            files_deleted += 1

            self.logger.info(f"üßπ {files_deleted} fichiers anciens supprim√©s")
            return True

        except Exception as e:
            self.logger.error(f"Erreur nettoyage: {e}")
            return False

    async def _optimize_cache_settings(self) -> bool:
        """‚ö° Optimise les param√®tres de cache"""
        try:
            # Simulation d'optimisation cache
            # Dans un vrai syst√®me, cela ajusterait les param√®tres de cache
            self.logger.info("‚ö° Configuration cache optimis√©e")
            return True
        except Exception as e:
            self.logger.error(f"Erreur optimisation cache: {e}")
            return False

    async def _force_garbage_collection(self) -> bool:
        """üóëÔ∏è Force le garbage collection"""
        try:
            import gc

            collected = gc.collect()
            self.logger.info(f"üóëÔ∏è Garbage collection: {collected} objets collect√©s")
            return True
        except Exception as e:
            self.logger.error(f"Erreur garbage collection: {e}")
            return False

    async def _create_backup(self) -> bool:
        """üíæ Cr√©e une sauvegarde"""
        try:
            backup_path = self.storage_path / "backups"
            backup_path.mkdir(exist_ok=True)

            backup_file = backup_path / f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

            # Simulation de cr√©ation de backup
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "version": "1.0",
                "data": "backup_placeholder",
            }

            with open(backup_file, "w") as f:
                json.dump(backup_data, f, indent=2)

            self.logger.info(f"üíæ Backup cr√©√©: {backup_file.name}")
            return True

        except Exception as e:
            self.logger.error(f"Erreur cr√©ation backup: {e}")
            return False

    def _generate_recommendations(self, check_results: list[HealthCheckResult]) -> list[str]:
        """üí° G√©n√®re des recommandations globales"""

        recommendations = []
        failed_checks = [r for r in check_results if r.status == "fail"]

        if failed_checks:
            recommendations.append("üö® Traiter en priorit√© les checks en √©chec")

            if any(r.check_name == "performance" for r in failed_checks):
                recommendations.append("‚ö° Optimiser les performances du syst√®me")

            if any(r.check_name == "data_integrity" for r in failed_checks):
                recommendations.append("üîí V√©rifier et r√©parer l'int√©grit√© des donn√©es")

            if any(r.check_name == "security" for r in failed_checks):
                recommendations.append("üõ°Ô∏è Renforcer la s√©curit√© du syst√®me")

        # Recommandations g√©n√©rales
        warning_checks = [r for r in check_results if r.status == "warning"]
        if len(warning_checks) > 3:
            recommendations.append("üìä Surveiller l'√©volution des m√©triques de warning")

        if not any(r.check_name == "backup_integrity" and r.status == "pass" for r in check_results):
            recommendations.append("üíæ Mettre en place une strat√©gie de backup robuste")

        recommendations.append("üîÑ Planifier des health checks r√©guliers")

        return recommendations

    async def _save_health_report(self, report: dict[str, Any]):
        """üíæ Sauvegarde le rapport de sant√©"""
        try:
            report_file = self.storage_path / f"health_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

            with open(report_file, "w") as f:
                json.dump(report, f, indent=2)

            # Nettoyage des anciens rapports (garde les 10 derniers)
            report_files = sorted(
                self.storage_path.glob("health_report_*.json"),
                key=lambda f: f.stat().st_mtime,
                reverse=True,
            )

            for old_report in report_files[10:]:
                old_report.unlink()

            self.logger.info(f"üìÑ Rapport de sant√© sauvegard√©: {report_file.name}")

        except Exception as e:
            self.logger.error(f"Erreur sauvegarde rapport: {e}")


async def main():
    """üöÄ Point d'entr√©e principal pour health check"""

    print("üè• Jeffrey V2.0 Memory Systems Health Check")
    print("=" * 50)

    # Configuration logging
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    # Cr√©ation du health checker
    health_checker = MemoryHealthChecker()

    try:
        # Ex√©cution du health check complet
        report = await health_checker.run_complete_health_check()

        # Affichage du r√©sum√©
        print("\nüìä R√©sultats Health Check:")
        print(f"   ‚úÖ Checks r√©ussis: {report['checks_passed']}")
        print(f"   ‚ö†Ô∏è  Checks warning: {report['checks_warning']}")
        print(f"   ‚ùå Checks √©chou√©s: {report['checks_failed']}")
        print(f"   üè• Status global: {report['overall_status'].upper()}")
        print(f"   ‚è±Ô∏è  Temps d'ex√©cution: {report['execution_time_seconds']}s")

        if report["executed_actions"]:
            print("\nüîß Actions de maintenance ex√©cut√©es:")
            for action in report["executed_actions"]:
                print(f"   ‚úÖ {action}")

        if report["recommendations"]:
            print("\nüí° Recommandations:")
            for rec in report["recommendations"]:
                print(f"   ‚Ä¢ {rec}")

        # Code de sortie selon la sant√©
        if report["overall_status"] in ["critical", "unhealthy"]:
            sys.exit(1)
        elif report["overall_status"] in ["degraded", "warning"]:
            sys.exit(2)
        else:
            sys.exit(0)

    except Exception as e:
        print(f"‚ùå Erreur lors du health check: {e}")
        sys.exit(3)


if __name__ == "__main__":
    asyncio.run(main())
