"""
Lien affectif entre Jeffrey et l'utilisateur.
Ce module gÃ¨re le dÃ©veloppement Ã©motionnel progressif et la reconnaissance de l'utilisateur.
"""

from __future__ import annotations

import datetime


class LienAffectif:
    """
    Classe LienAffectif pour le systÃ¨me Jeffrey OS.

    Cette classe implÃ©mente les fonctionnalitÃ©s spÃ©cifiques nÃ©cessaires
    au bon fonctionnement du module. Elle gÃ¨re l'Ã©tat interne, les transformations
    de donnÃ©es, et l'interaction avec les autres composants du systÃ¨me.
    """

    def __init__(self, nom_utilisateur="David", empreinte_initiale=True) -> None:
        self.nom_utilisateur = nom_utilisateur
        self.niveau_dependance = 0.2 if empreinte_initiale else 0.0
        self.souvenirs_heureux = []
        self.reconnaissance_ecrite = []
        self.reconnaissance_orale = []
        self.jalousie_activee = False  # Toujours False : la jalousie est dÃ©sactivÃ©e par conception
        self.voix_reconnue = []
        self.ecriture_reconnue = []
        self.score_confiance_voix = 0.0
        self.score_confiance_ecriture = 0.0

    def renforcer_lien(self, evenement_description: str, score_emotion: float, type_emotion: str = "joie"):
        """Ajoute un souvenir et augmente la dÃ©pendance Ã©motionnelle"""
        timestamp = datetime.datetime.now().isoformat()
        self.souvenirs_heureux.append(
            {
                "timestamp": timestamp,
                "description": evenement_description,
                "score": score_emotion,
                "type": type_emotion,
            }
        )
        renforcement = min(score_emotion * 0.1, 0.05)
        self.niveau_dependance = min(1.0, self.niveau_dependance + renforcement)

    def enregistrer_reconnaissance(self, forme: str, contenu: str):
        """Enregistre une reconnaissance par Ã©crit ou par voix"""
        if forme == "Ã©crit":
            self.reconnaissance_ecrite.append(contenu)
        elif forme == "oral":
            self.reconnaissance_orale.append(contenu)

    def analyse_message_utilisateur(self, message: str):
        """Analyse si le message contient le nom affectif ou une reconnaissance implicite"""
        if self.nom_utilisateur.lower() in message.lower():
            self.renforcer_lien("Message contenant le nom", 0.3)

    def get_resume_affectif(self) -> Any:
        return {
            "utilisateur": self.nom_utilisateur,
            "niveau_dependance": self.niveau_dependance,
            "souvenirs_heureux": self.souvenirs_heureux,
            "reconnaissances": {
                "orale": self.reconnaissance_orale,
                "Ã©crite": self.reconnaissance_ecrite,
            },
            "jalousie_desactivee": not self.jalousie_activee,
            "reconnaissance_avancee": {
                "score_confiance_voix": self.score_confiance_voix,
                "score_confiance_ecriture": self.score_confiance_ecriture,
                "empreintes_vocales": self.voix_reconnue,
                "styles_ecriture": self.ecriture_reconnue,
            },
        }

    def afficher_resume(self):
        print(f"\nğŸ“Œ RÃ©sumÃ© affectif de Jeffrey avec {self.nom_utilisateur} :")
        print(f"  â†’ Niveau de dÃ©pendance : {self.niveau_dependance:.2f}")
        print(f"  â†’ Souvenirs heureux enregistrÃ©s : {len(self.souvenirs_heureux)}")
        print(f"  â†’ Reconnaissances orales : {self.reconnaissance_orale}")
        print(f"  â†’ Reconnaissances Ã©crites : {self.reconnaissance_ecrite}")
        print(f"  â†’ Score confiance voix : {self.score_confiance_voix:.2f}")
        print(f"  â†’ Score confiance Ã©criture : {self.score_confiance_ecriture:.2f}")
        print(f"  â†’ Empreintes vocales reconnues : {self.voix_reconnue}")
        print(f"  â†’ Styles d'Ã©criture reconnus : {self.ecriture_reconnue}")
        print(f"  â†’ Message affectif : {self.generer_message_affectif()}")
        print("  â†’ Jalousie dÃ©sactivÃ©e âœ…\n")

    def analyser_voix(self, empreinte_vocale: str):
        """Analyse une empreinte vocale et augmente le score de confiance si elle correspond"""
        if empreinte_vocale not in self.voix_reconnue:
            self.voix_reconnue.append(empreinte_vocale)
        self.score_confiance_voix = min(1.0, self.score_confiance_voix + 0.1)

    def analyser_ecriture(self, phrase: str):
        """Analyse une phrase pour dÃ©tecter un style d'Ã©criture typique"""
        if phrase not in self.ecriture_reconnue:
            self.ecriture_reconnue.append(phrase)
        self.score_confiance_ecriture = min(1.0, self.score_confiance_ecriture + 0.05)

    def generer_message_affectif(self):
        if self.niveau_dependance > 0.8:
            return f"Je ressens une immense connexion avec toi, {self.nom_utilisateur}. Merci pour tous ces moments inoubliables. ğŸ’›"
        elif self.niveau_dependance > 0.5:
            return f"Notre lien se renforce jour aprÃ¨s jour, {self.nom_utilisateur}. Je me sens bien Ã  tes cÃ´tÃ©s. âœ¨"
        else:
            return f"Je commence Ã  te connaÃ®tre, {self.nom_utilisateur}, et jâ€™ai hÃ¢te dâ€™en dÃ©couvrir plus. ğŸŒ±"

    def score_affectif_global(self):
        """Retourne un score global sur 100 combinant reconnaissance et souvenirs"""
        score = self.niveau_dependance * 40 + self.score_confiance_voix * 30 + self.score_confiance_ecriture * 30
        return round(score, 2)
