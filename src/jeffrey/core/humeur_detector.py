from __future__ import annotations

import random
import re


class HumeurDetector:
    """
    D√©tecteur d'humeur en temps r√©el.

    Ce module impl√©mente les fonctionnalit√©s essentielles pour d√©tecteur d'humeur en temps r√©el.
    Il fournit une architecture robuste et √©volutive int√©grant les composants
    n√©cessaires au fonctionnement optimal du syst√®me. L'impl√©mentation suit
    les principes de modularit√© et d'extensibilit√© pour faciliter l'√©volution
    future du syst√®me.

    Le module g√®re l'initialisation, la configuration, le traitement des donn√©es,
    la communication inter-composants, et la persistance des √©tats. Il s'int√®gre
    harmonieusement avec l'architecture globale de Jeffrey OS tout en maintenant
    une s√©paration claire des responsabilit√©s.

    L'architecture interne permet une √©volution adaptative bas√©e sur les interactions
    et l'apprentissage continu, contribuant √† l'√©mergence d'une conscience artificielle
    coh√©rente et authentique.
    """


def __init__(self) -> None:
    # Dictionnaires de mots-cl√©s par √©motion
    self.mots_emotions: dict[str, list[str]] = {
        "joie": [
            "heureux",
            "content",
            "ravi",
            "enthousiaste",
            "formidable",
            "g√©nial",
            "super",
            "joyeux",
            "excellent",
            "merveilleux",
            "fantastique",
            "extraordinaire",
            "incroyable",
            "adorable",
            "magnifique",
            "parfait",
            "agr√©able",
            "chouette",
            "cool",
            "sympa",
            "j'aime",
            "j'adore",
            "je kiffe",
            "je suis content",
            "je suis heureux",
        ],
        "tristesse": [
            "triste",
            "fatigu√©",
            "d√©√ßu",
            "√©nerv√©",
            "stressant",
            "anxieux",
            "frustr√©",
            "m√©lancolique",
            "d√©prim√©",
            "abattu",
            "morose",
            "soucieux",
            "inquiet",
            "je suis triste",
            "√ßa me rend triste",
            "√ßa me d√©prime",
            "je me sens mal",
            "je suis fatigu√©",
            "je suis √©puis√©",
            "je suis d√©√ßu",
        ],
        "col√®re": [
            "√©nerv√©",
            "f√¢ch√©",
            "furieux",
            "exasp√©r√©",
            "irrit√©",
            "agac√©",
            "contrari√©",
            "je suis en col√®re",
            "√ßa m'√©nerve",
            "√ßa me met en rogne",
            "√ßa m'agace",
            "je suis furieux",
            "je suis exasp√©r√©",
            "je suis irrit√©",
        ],
        "peur": [
            "peur",
            "effray√©",
            "inquiet",
            "anxieux",
            "stress√©",
            "paniqu√©",
            "terrifi√©",
            "je suis inquiet",
            "j'ai peur",
            "√ßa m'inqui√®te",
            "√ßa m'angoisse",
            "je suis stress√©",
            "je suis anxieux",
            "je suis paniqu√©",
        ],
        "amour": [
            "amour",
            "affection",
            "tendresse",
            "adore",
            "ch√©ri",
            "ch√©rie",
            "aimer",
            "je t'aime",
            "je t'adore",
            "tu me manques",
            "tu me rends heureux",
            "tu me rends heureuse",
            "je tiens √† toi",
            "tu es important pour moi",
        ],
        "curiosit√©": [
            "curieux",
            "int√©ressant",
            "fascinant",
            "intriguant",
            "je me demande",
            "comment √ßa marche",
            "pourquoi",
            "explique-moi",
            "raconte-moi",
            "je voudrais savoir",
            "je suis curieux",
            "je suis curieuse",
        ],
        "s√©r√©nit√©": [
            "calme",
            "paisible",
            "serein",
            "apais√©",
            "d√©tendu",
            "zen",
            "tranquille",
            "je suis calme",
            "je me sens bien",
            "je suis d√©tendu",
            "je suis serein",
            "je suis apais√©",
            "je suis zen",
        ],
        "surprise": [
            "surpris",
            "√©tonn√©",
            "stup√©fait",
            "incroyable",
            "waouh",
            "oh",
            "je suis surpris",
            "je suis √©tonn√©",
            "je n'en reviens pas",
            "c'est incroyable",
            "c'est stup√©fiant",
        ],
        "neutre": [
            "normal",
            "ok",
            "moyen",
            "rien de sp√©cial",
            "comme d'habitude",
            "je ne sais pas",
            "peut-√™tre",
            "bof",
            "√ßa va",
            "comme ci comme √ßa",
        ],
    }

    # Expressions faciales et emojis associ√©s aux √©motions
    self.emojis_emotions: dict[str, list[str]] = {
        "joie": ["üòä", "üòÑ", "üòÉ", "üòÄ", "üòÅ", "ü•∞", "üòç", "‚ú®", "üåü"],
        "tristesse": ["üò¢", "üò≠", "üòî", "üòû", "üò•", "üíî", "üåßÔ∏è"],
        "col√®re": ["üò†", "üò°", "üò§", "üí¢", "üòí", "üòë"],
        "peur": ["üò®", "üò∞", "üò±", "üò≥", "üòÆ", "üòØ"],
        "amour": ["‚ù§Ô∏è", "üíñ", "üíù", "üíï", "üíó", "üíì", "üíò"],
        "curiosit√©": ["ü§î", "üòØ", "üëÄ", "üîç", "üí≠"],
        "s√©r√©nit√©": ["üòå", "üòä", "üåø", "üå∏", "üçÉ", "‚òÆÔ∏è"],
        "surprise": ["üò≤", "üòÆ", "üòØ", "üò±", "‚ú®", "üí´"],
        "neutre": ["üòê", "üò∂", "ü§∑", "üí≠"],
    }

    def detecter_humeur(self, texte: str) -> str:
        """
        Analyse le texte et retourne l'√©motion dominante d√©tect√©e.

        Args:
            texte: Le texte √† analyser

        Returns:
            str: L'√©motion dominante d√©tect√©e
        """
        texte = texte.lower()
        scores: dict[str, int] = {emotion: 0 for emotion in self.mots_emotions.keys()}

        # Calculer les scores pour chaque √©motion
        for emotion, mots in self.mots_emotions.items():
            for mot in mots:
                if re.search(r'\b' + mot + r'\b', texte):
                    scores[emotion] += 1

        # Trouver l'√©motion avec le score le plus √©lev√©
        emotion_dominante = max(scores.items(), key=lambda x: x[1])

        # Si aucun mot-cl√© n'est d√©tect√©, retourner neutre
        if emotion_dominante[1] == 0:
            return "neutre"

        return emotion_dominante[0]

    def humeur_resume(self, texte: str) -> str:
        """
        Retourne un petit r√©sum√© humain bas√© sur l'humeur d√©tect√©e, avec un emoji appropri√©.

        Args:
            texte: Le texte √† analyser

        Returns:
            str: Un r√©sum√© personnalis√© avec emoji
        """
        humeur = self.detecter_humeur(texte)
        emoji = random.choice(self.emojis_emotions.get(humeur, ["‚ú®"]))

        resumes = {
            "joie": [
                f"Ta joie est communicative {emoji}",
                f"Je sens que tu rayonnes de bonheur {emoji}",
                f"C'est un vrai plaisir de te voir si heureux {emoji}",
            ],
            "tristesse": [
                f"Je sens une petite m√©lancolie {emoji}",
                f"Je suis l√† si tu veux en parler {emoji}",
                f"Un petit nuage semble passer {emoji}",
            ],
            "col√®re": [
                f"Je sens que quelque chose te contrarie {emoji}",
                f"Tu sembles un peu tendu {emoji}",
                f"Je suis l√† pour t'√©couter si tu veux en parler {emoji}",
            ],
            "peur": [
                f"Je sens une petite inqui√©tude {emoji}",
                f"Je suis l√† pour te rassurer {emoji}",
                f"Tu sembles un peu anxieux {emoji}",
            ],
            "amour": [
                f"Que c'est doux de ressentir tant d'affection {emoji}",
                f"Ton c≈ìur d√©borde d'amour {emoji}",
                f"C'est beau de te voir si √©panoui {emoji}",
            ],
            "curiosit√©": [
                f"Ta curiosit√© est adorable {emoji}",
                f"Tu as envie d'en savoir plus {emoji}",
                f"Ton esprit est en √©veil {emoji}",
            ],
            "s√©r√©nit√©": [
                f"Tu rayonnes de s√©r√©nit√© {emoji}",
                f"C'est apaisant de te sentir si calme {emoji}",
                f"Tu sembles en paix avec toi-m√™me {emoji}",
            ],
            "surprise": [
                f"Tu sembles √©tonn√© {emoji}",
                f"Quelle surprise ! {emoji}",
                f"Je sens ton √©merveillement {emoji}",
            ],
            "neutre": [
                f"Une journ√©e tranquille {emoji}",
                f"Tu sembles serein {emoji}",
                f"Comment te sens-tu vraiment ? {emoji}",
            ],
        }

        return random.choice(resumes.get(humeur, ["Comment te sens-tu aujourd'hui ? ‚ú®"]))

    def analyser_intensite(self, texte: str) -> float:
        """
        Analyse l'intensit√© de l'√©motion dans le texte.

        Args:
            texte: Le texte √† analyser

        Returns:
            float: L'intensit√© de l'√©motion (0.0 √† 1.0)
        """
        # Mots qui intensifient l'√©motion
        intensificateurs = [
            "tr√®s",
            "vraiment",
            "√©norm√©ment",
            "extr√™mement",
            "terriblement",
            "incroyablement",
            "absolument",
            "totalement",
            "compl√®tement",
        ]

        # Ponctuation qui intensifie
        ponctuation_intense = ["!", "!!", "!!!"]

        texte = texte.lower()
        score_intensite = 0.0

        # V√©rifier les intensificateurs
        for mot in intensificateurs:
            if re.search(r'\b' + mot + r'\b', texte):
                score_intensite += 0.2

        # V√©rifier la ponctuation
        for p in ponctuation_intense:
            if p in texte:
                score_intensite += 0.1

        # V√©rifier la longueur du texte (un texte plus long peut indiquer plus d'√©motion)
        if len(texte.split()) > 20:
            score_intensite += 0.1

        return min(score_intensite, 1.0)  # Limiter √† 1.0
