# TODO: Pr√©compiler les regex utilis√©es dans les boucles
# TODO: Pr√©compiler les regex utilis√©es dans les boucles
# TODO: Pr√©compiler les regex utilis√©es dans les boucles
"""
Orchestrateur principal du syst√®me cognitif.

Ce module impl√©mente les fonctionnalit√©s essentielles pour orchestrateur principal du syst√®me cognitif.
Il fournit une architecture robuste et √©volutive int√©grant les composants
n√©cessaires au fonctionnement optimal du syst√®me. L'impl√©mentation suit
les principes de modularit√© et d'extensibilit√© pour faciliter l'√©volution
future du syst√®me.

Le module g√®re l'initialisation, la configuration, le traitement des donn√©es,
la communication inter-composants, et la persistance des √©tats. Il s'int√®gre
harmonieusement avec l'architecture globale de Jeffrey OS tout en maintenant
une s√©paration claire des responsabilit√©s.

L'architecture interne permet une √©volution adaptative bas√©e sur les interactions
et l'apprentissage continu, contribuant √† l'√©mergence d'une conscience artificielle
coh√©rente et authentique.
"""

from __future__ import annotations

import asyncio
import re
from enum import Enum

from jeffrey.core.emotions.core.emotion_ml_enhancer import EmotionMLEnhancer
from jeffrey.core.orchestration.multi_model_orchestrator import MultiModelOrchestrator


class AICapability(Enum):
    """Capacit√©s sp√©cifiques des diff√©rentes IA"""

    CREATIVE = "creative"  # G√©n√©ration cr√©ative, imagination (Grok)
    ANALYTICAL = "analytical"  # Analyse, explication, technique (ChatGPT)
    EMPATHETIC = "empathetic"  # Empathie, soutien √©motionnel (Claude)
    TECHNICAL = "technical"  # Code, debug, solutions techniques
    EMOTIONAL = "emotional"  # R√©ponses √©motionnelles (Jeffrey Core)
    NARRATIVE = "narrative"  # Storytelling, r√©cits
    PHILOSOPHICAL = "philosophical"  # Questions existentielles
    HUMOROUS = "humorous"  # Humour, l√©g√®ret√©


class EnhancedOrchestrator(MultiModelOrchestrator):
    """
    Orchestrateur am√©lior√© avec s√©lection dynamique bas√©e sur les capacit√©s.
    """

    # Mapping des providers vers leurs capacit√©s
    PROVIDER_CAPABILITIES = {
        "grok": [
            AICapability.CREATIVE,
            AICapability.EMOTIONAL,
            AICapability.NARRATIVE,
            AICapability.HUMOROUS,
        ],
        "gpt": [AICapability.ANALYTICAL, AICapability.TECHNICAL, AICapability.PHILOSOPHICAL],
        "claude": [AICapability.EMPATHETIC, AICapability.ANALYTICAL, AICapability.EMOTIONAL],
        "chatgpt": [AICapability.ANALYTICAL, AICapability.TECHNICAL],  # Alias
        "gpt-4": [AICapability.ANALYTICAL, AICapability.TECHNICAL],  # Alias
    }

    # Patterns pour d√©tecter le besoin de capacit√©s
    CAPABILITY_PATTERNS = {
        AICapability.CREATIVE: [
            r"\bimagine\b",
            r"\binvente\b",
            r"\bcr√©e\b",
            r"\bstory\b",
            r"\bid√©e\b",
        ],
        AICapability.ANALYTICAL: [
            r"\bexplique\b",
            r"\banalyse\b",
            r"\bcomment\b",
            r"\bpourquoi\b",
            r"\braison\b",
        ],
        AICapability.EMPATHETIC: [
            r"\btriste\b",
            r"\bpeur\b",
            r"\binquiet\b",
            r"\bsoutien\b",
            r"\baide\b",
            r"\bmal\b",
        ],
        AICapability.TECHNICAL: [
            r"\bcode\b",
            r"\bbug\b",
            r"\berreur\b",
            r"\bprogramme\b",
            r"\balgorithme\b",
        ],
        AICapability.EMOTIONAL: [
            r"\bressens\b",
            r"\b√©motion\b",
            r"\bsentiment\b",
            r"\bamour\b",
            r"\bcoeur\b",
        ],
        AICapability.NARRATIVE: [
            r"\braconte\b",
            r"\bhistoire\b",
            r"\bconte\b",
            r"\br√©cit\b",
            r"\baventure\b",
        ],
        AICapability.PHILOSOPHICAL: [
            r"\bsens.*vie\b",
            r"\bexistence\b",
            r"\bphilosoph\b",
            r"\bconscience\b",
            r"\br√©alit√©\b",
        ],
        AICapability.HUMOROUS: [
            r"\bblague\b",
            r"\bdr√¥le\b",
            r"\brire\b",
            r"\bhumour\b",
            r"\bamusant\b",
        ],
    }

    def __init__(self, ia_clients: dict[str, object] = None) -> None:
        """Initialise l'orchestrateur am√©lior√©."""
        super().__init__(ia_clients)
        self.emotion_enhancer = EmotionMLEnhancer()
        self.capability_scores = {}  # Cache des scores de capacit√©s

    def detect_required_capabilities(self, prompt: str) -> set[AICapability]:
        """
        D√©tecte les capacit√©s n√©cessaires pour r√©pondre au prompt.

        Args:
            prompt: Le message utilisateur

        Returns:
            Set des capacit√©s d√©tect√©es
        """
        required = set()
        prompt_lower = prompt.lower()

        # D√©tection par patterns
        # TODO: Optimiser cette boucle imbriqu√©e
        # TODO: Optimiser cette boucle imbriqu√©e
        # TODO: Optimiser cette boucle imbriqu√©e
        for capability, patterns in self.CAPABILITY_PATTERNS.items():
            for pattern in patterns:
                if re.search(pattern, prompt_lower):
                    required.add(capability)
                    break

        # D√©tection √©motionnelle
        emotion_result = self.emotion_enhancer.detect_emotion_enhanced(prompt)
        if emotion_result["confidence"] > 0.5:
            if emotion_result["emotion"] in ["tristesse", "peur", "inquietude"]:
                required.add(AICapability.EMPATHETIC)
            elif emotion_result["emotion"] in ["joie", "amour"]:
                required.add(AICapability.EMOTIONAL)

        # Si aucune capacit√© d√©tect√©e, utiliser ANALYTICAL par d√©faut
        if not required:
            required.add(AICapability.ANALYTICAL)

        return required

    def score_providers_by_capability(self, required_capabilities: set[AICapability]) -> dict[str, float]:
        """
        Score chaque provider selon sa correspondance avec les capacit√©s requises.

        Args:
            required_capabilities: Capacit√©s n√©cessaires

        Returns:
            Dict {provider: score}
        """
        scores = {}

        for provider, capabilities in self.PROVIDER_CAPABILITIES.items():
            score = 0.0
            provider_caps = set(capabilities)

            # Score bas√© sur le nombre de capacit√©s correspondantes
            matching = provider_caps.intersection(required_capabilities)
            score = len(matching) / len(required_capabilities) if required_capabilities else 0

            # Bonus si toutes les capacit√©s requises sont couvertes
            if matching == required_capabilities:
                score += 0.5

            # Normaliser entre 0 et 1
            scores[provider] = min(1.0, score)

        return scores

    async def send_to_best_models(self, prompt: str, max_models: int = 2) -> list[dict[str, str]]:
        """
        Envoie le prompt aux meilleurs mod√®les selon les capacit√©s requises.

        Args:
            prompt: Le message utilisateur
            max_models: Nombre maximum de mod√®les √† utiliser

        Returns:
            Liste des r√©ponses
        """
        # D√©tecter les capacit√©s requises
        required_caps = self.detect_required_capabilities(prompt)

        # Scorer les providers
        provider_scores = self.score_providers_by_capability(required_caps)

        # S√©lectionner les meilleurs providers
        sorted_providers = sorted(provider_scores.items(), key=lambda x: x[1], reverse=True)
        selected_providers = [p[0] for p in sorted_providers[:max_models] if p[1] > 0]

        # Si aucun provider s√©lectionn√©, utiliser les d√©fauts
        if not selected_providers:
            selected_providers = list(self.ia_clients.keys())[:max_models]

        # Log la s√©lection
        print(f"üéØ Capacit√©s requises: {[c.value for c in required_caps]}")
        print(f"ü§ñ Providers s√©lectionn√©s: {selected_providers}")

        # Envoyer aux mod√®les s√©lectionn√©s
        tasks = []
        for provider in selected_providers:
            if provider in self.ia_clients or self._find_provider_alias(provider):
                tasks.append(self.send_to_model(self._find_provider_alias(provider) or provider, prompt))

        results = await asyncio.gather(*tasks)
        return results

    def _find_provider_alias(self, provider: str) -> str | None:
        """Trouve le nom r√©el du provider dans ia_clients."""
        # Mapping des alias
        aliases = {
            "gpt": ["gpt-4", "chatgpt", "openai"],
            "claude": ["claude-3", "anthropic"],
            "grok": ["grok", "x-ai"],
        }

        for alias_group, names in aliases.items():
            if provider in names:
                # Chercher dans ia_clients
                for client_name in self.ia_clients:
                    if any(name in client_name.lower() for name in names):
                        return client_name

        return None

    def ask_smart(self, prompt: str) -> str:
        """
        Version intelligente qui s√©lectionne dynamiquement les meilleurs mod√®les.

        Args:
            prompt: Le message utilisateur

        Returns:
            R√©ponse fusionn√©e des meilleurs mod√®les
        """
        # Obtenir les r√©ponses des meilleurs mod√®les
        raw_responses = asyncio.run(self.send_to_best_models(prompt))

        # Fusionner les r√©ponses
        from jeffrey.core.orchestration.fusion_engine import fuse_responses

        fused_response = fuse_responses(raw_responses)

        # Sauvegarder dans la m√©moire
        self.memory.add_interaction(prompt, raw_responses, fused_response)

        return fused_response

    def get_capability_analysis(self, prompt: str) -> dict[str, any]:
        """
        Analyse d√©taill√©e des capacit√©s pour un prompt.

        Args:
            prompt: Le message √† analyser

        Returns:
            Dict avec l'analyse compl√®te
        """
        required_caps = self.detect_required_capabilities(prompt)
        provider_scores = self.score_providers_by_capability(required_caps)
        emotion_result = self.emotion_enhancer.detect_emotion_enhanced(prompt)

        return {
            "required_capabilities": [c.value for c in required_caps],
            "provider_scores": provider_scores,
            "emotional_context": {
                "emotion": emotion_result["emotion"],
                "confidence": emotion_result["confidence"],
                "intensity": emotion_result.get("intensity", {}),
            },
            "recommended_providers": sorted(provider_scores.items(), key=lambda x: x[1], reverse=True)[:2],
        }
