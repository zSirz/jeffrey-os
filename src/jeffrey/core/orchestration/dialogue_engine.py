"""Dialogue engine module - Moteur de dialogue pour Jeffrey AGI"""

__jeffrey_meta__ = {
    "version": "1.0.0",
    "stability": "stable",
    "brain_regions": ["broca_wernicke"],
}

import random
from typing import Any


class DialogueEngine:
    """Moteur de dialogue avec patterns √©motionnels"""

    def __init__(self):
        """Initialise le moteur de dialogue"""
        self.conversations = 0
        self.memory = None  # Sera inject√© par l'orchestrateur si disponible

        # ‚úÖ CRITIQUE : Initialiser les patterns √©motionnels
        self.emotional_patterns = {
            "joie": {
                "templates": ["G√©nial ! {input}", "Super ! üòä {input}", "C'est fantastique ! ‚ú®"],
                "default_response": "Je partage ta joie ! üòä",
            },
            "tristesse": {
                "templates": ["Je comprends que ce soit difficile...", "Je suis l√† pour toi üíô", "√áa doit √™tre dur..."],
                "default_response": "Je t'√©coute avec empathie...",
            },
            "peur": {
                "templates": ["C'est normal d'avoir peur...", "Tu es en s√©curit√© ici.", "Prends ton temps..."],
                "default_response": "Je suis l√†, tu peux me parler.",
            },
            "col√®re": {
                "templates": ["Je comprends ta frustration...", "C'est ok d'√™tre en col√®re.", "Parlons-en..."],
                "default_response": "Je t'√©coute sans jugement.",
            },
            "curiosit√©": {
                "templates": ["Excellente question !", "Explorons √ßa ensemble... ü§î", "C'est fascinant comme sujet !"],
                "default_response": "Je suis curieux aussi ! ü§î",
            },
        }

    async def process(self, data: dict[str, Any] | None = None) -> dict[str, Any]:
        """Traite une requ√™te de dialogue (m√©thode async legacy)"""
        self.conversations += 1
        return {"status": "ok", "response": "dialogue processed", "count": self.conversations}

    def health_check(self) -> dict[str, Any]:
        """V√©rifie la sant√© du module"""
        return {"status": "healthy", "conversations": self.conversations}

    def generate_response(
        self, user_input: str, user_id: str = "default", conversation_id: str = None, override_emotion: str = None
    ) -> str:
        """
        G√©n√®re une r√©ponse de dialogue adapt√©e

        Args:
            user_input: Message de l'utilisateur
            user_id: Identifiant de l'utilisateur
            conversation_id: ID de conversation optionnel
            override_emotion: √âmotion √† utiliser pour adapter la r√©ponse

        Returns:
            str: R√©ponse g√©n√©r√©e
        """
        # Incr√©menter le compteur
        self.conversations += 1

        # ‚úÖ INDENTATION CORRECTE ICI
        # Si on a une √©motion sp√©cifique, adapter le ton
        if override_emotion and override_emotion in self.emotional_patterns:
            pattern = self.emotional_patterns[override_emotion]
            response = self._generate_from_pattern(pattern, user_input)
        else:
            # G√©n√©ration standard
            response = self._generate_standard_response(user_input)

        # Appliquer la m√©moire si disponible
        if hasattr(self, 'memory') and self.memory:
            response = self._enrich_with_memory(response, user_id)

        return response

    def _generate_from_pattern(self, pattern: dict, user_input: str) -> str:
        """G√©n√®re une r√©ponse depuis un pattern √©motionnel"""
        # Si le pattern a des templates
        if "templates" in pattern:
            template = random.choice(pattern["templates"])
            # Formater avec l'input si {input} est pr√©sent
            if "{input}" in template:
                return template.format(input=user_input[:50])
            return template

        # Sinon, r√©ponse basique adapt√©e √† l'√©motion
        return pattern.get("default_response", "Je t'√©coute...")

    def _generate_standard_response(self, user_input: str) -> str:
        """G√©n√®re une r√©ponse standard"""
        # Patterns de base
        responses = [
            "C'est int√©ressant ce que tu dis...",
            "Je comprends, continue...",
            "Dis-m'en plus...",
            "Je t'√©coute attentivement.",
            "Hmm, je vois ce que tu veux dire...",
        ]

        # Si c'est une question
        if "?" in user_input:
            responses.extend(["C'est une excellente question...", "Laisse-moi y r√©fl√©chir...", "Bonne question ! ü§î"])

        # Si c'est tr√®s court
        if len(user_input.strip()) < 10:
            responses.extend(["Je t'√©coute... üëÇ", "Je suis l√†...", "Continue..."])

        return random.choice(responses)

    def _enrich_with_memory(self, response: str, user_id: str) -> str:
        """Enrichit la r√©ponse avec le contexte m√©moire"""
        try:
            # R√©cup√©rer contexte
            if hasattr(self.memory, 'get_context_summary'):
                context = self.memory.get_context_summary()

                # Si on a du contexte, on peut l'utiliser
                if context and len(context) > 10:
                    # Ajouter une r√©f√©rence subtile (30% du temps)
                    if random.random() < 0.3:
                        response += " (√áa me rappelle notre derni√®re conversation...)"

        except Exception:
            pass  # ‚úÖ OK : ignore l'erreur et retourne r√©ponse sans enrichissement

        return response


# Fonction standalone pour health check
def health_check():
    """Health check standalone du module"""
    _ = sum(range(1000))
    return {"status": "healthy", "module": "dialogue_engine", "work": _}
