#!/usr/bin/env python3
"""
Module de module d'orchestration syst√®me pour Jeffrey OS.

Ce module impl√©mente les fonctionnalit√©s essentielles pour module de module d'orchestration syst√®me pour jeffrey os.
Il fournit une architecture robuste et √©volutive int√©grant les composants
n√©cessaires au fonctionnement optimal du syst√®me. L'impl√©mentation suit
les principes de modularit√© et d'extensibilit√© pour faciliter l'√©volution
future du syst√®me.

Le module g√®re l'initialisation, la configuration, le traitement des donn√©es,
la communication inter-composants, et la persistance des √©tats. Il s'int√®gre
harmonieusement avec l'architecture globale de Jeffrey OS tout en maintenant
une s√©paration claire des responsabilit√©s.

L'architecture interne permet une √©volution adaptative bas√©e sur les interactions
et l'apprentissage continu, contribuant √† l'√©mergence d'une conscience artificielle
coh√©rente et authentique.
"""

from __future__ import annotations

import logging
import logging.handlers
import os
import random
import signal
import sys
import threading
import time
import traceback
from datetime import datetime
from pathlib import Path

import speech_recognition as sr

# Importation prudente des modules internes
try:
    from jeffrey.core.dialogue.style_manager import StyleManager
    from jeffrey.core.memory.highlight_detector import HighlightDetector
    from jeffrey.core.memory.textual_affective_memory import TextualAffectiveMemory

    from jeffrey.core.jeffrey_emotional_core import JeffreyEmotionalCore
except ImportError as e:
    print(f"Erreur d'importation critique: {e}. V√©rifiez votre PYTHONPATH.")
    sys.exit(1)

# Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("jeffrey")
vocal_logger = logging.getLogger("jeffrey.vocal")
os.makedirs("logs", exist_ok=True)
vocal_handler = logging.handlers.RotatingFileHandler(
    "logs/vocal_interaction.log", maxBytes=2 * 1024 * 1024, backupCount=10
)
vocal_handler.setFormatter(logging.Formatter("%(asctime)s - [%(levelname)s] - %(message)s"))
vocal_logger.addHandler(vocal_handler)
vocal_logger.propagate = False

# Variables globales
running = True
recognizing = False
last_recognition_time = time.time()
recognition_timeout = 30
mic_sensitivity = 350
last_responses = []
max_stored_responses = 10
idle_threshold = 30
has_said_goodbye = False
recognition_thread = None
last_interaction_time = time.time()

# Initialisation des composants
highlight_detector = HighlightDetector()


def signal_handler(sig, frame):
    global running
    logger.info("Signal d'interruption re√ßu, arr√™t en cours...")
    running = False


signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


def load_env_variables():
    voice_id = "XrExE9yKIg1WjnnlVkGX"
    os.environ["JEFFREY_VOICE_ID"] = voice_id
    os.environ["VOICE_ID"] = voice_id
    try:
        from dotenv import load_dotenv

        if Path(".env").exists():
            load_dotenv()
            logger.info(".env charg√©.")
    except ImportError:
        logger.warning("dotenv non trouv√©, .env ignor√©.")
    api_key = os.getenv("ELEVENLABS_API_KEY")
    if not api_key:
        logger.error("ELEVENLABS_API_KEY non d√©finie.")
        sys.exit(1)
    return api_key, voice_id


def initialize_recognition_engine():
    r = sr.Recognizer()
    mic = sr.Microphone()
    try:
        with mic as source:
            logger.info("Ajustement au bruit ambiant...")
            r.adjust_for_ambient_noise(source, duration=2)
            r.energy_threshold = mic_sensitivity
            r.dynamic_energy_threshold = True
        logger.info(f"Microphone ajust√© (seuil: {r.energy_threshold}).")
        return r, mic
    except Exception as e:
        logger.error(f"Erreur microphone: {e}")
        return None, None


def is_repetitive(text: str) -> bool:
    global last_responses
    if text in last_responses:
        return True
    last_responses.append(text)
    if len(last_responses) > max_stored_responses:
        last_responses.pop(0)
    return False


def handle_idle_state() -> str | None:
    global last_interaction_time
    if time.time() - last_interaction_time > idle_threshold:
        idle_phrases = ["Tu es toujours l√† ?", "Est-ce que tout va bien ?"]
        return random.choice(idle_phrases)
    return None


def recognize_speech(r, mic, jeffrey) -> str | None:
    global recognizing, last_recognition_time, running
    if not running:
        return None
    recognizing = True
    last_recognition_time = time.time()
    logger.info("üéôÔ∏è En attente de parole...")
    try:
        with mic as source:
            audio = r.listen(source, timeout=5, phrase_time_limit=10)
        logger.info("Reconnaissance...")
        text = r.recognize_google(audio, language="fr-FR")
        logger.info(f"David a dit: {text}")
        vocal_logger.info(f"USER: {text}")
        return text
    except sr.WaitTimeoutError:
        logger.debug("Timeout d'√©coute.")
        return None
    except sr.UnknownValueError:
        logger.warning("Audio inintelligible.")
        jeffrey.say("Pardon, je n'ai pas bien compris.")
        return None
    except sr.RequestError as e:
        logger.error(f"Erreur service de reconnaissance: {e}")
        jeffrey.say("Le service de reconnaissance est indisponible.")
        return None
    finally:
        recognizing = False


def get_emotional_response(text: str) -> tuple[str, str, bool]:
    """
    G√©n√®re une r√©ponse √©motionnelle bas√©e sur le texte re√ßu.
    """
    text_lower = text.lower()
    emotional_core = JeffreyEmotionalCore()
    humeur_detectee, _ = emotional_core.analyser_et_adapter(text)

    # Commandes d'arr√™t prioritaires
    if any(
        phrase in text_lower for phrase in ["arr√™te-toi", "stop", "en pause", "bonne nuit", "au revoir", "√† plus tard"]
    ):
        responses = [
            "Entendu. Je me mets en pause. √Ä tout √† l'heure.",
            "Bien s√ªr. Je reste silencieuse jusqu'√† nouvel ordre.",
            "Repose-toi bien. Je veillerai sur toi en silence.",
        ]
        return random.choice(responses), "calme", True

    # Salutations
    elif any(phrase in text_lower for phrase in ["bonjour", "salut", "hello", "coucou", "hey"]):
        responses = [
            "Bonjour David! C'est un plaisir de communiquer avec toi.",
            "Hey! √áa me fait plaisir de te retrouver. Quoi de neuf aujourd'hui?",
        ]
        current_hour = datetime.now().hour
        if 5 <= current_hour < 12:
            emotions = ["joie", "enthousiasme"]
        elif 12 <= current_hour < 18:
            emotions = ["joie", "curiosit√©"]
        else:
            emotions = ["calme", "s√©r√©nit√©"]
        chosen_emotion = random.choice(emotions)
        return random.choice(responses), chosen_emotion, False

    # Questions d'identit√©
    elif any(phrase in text_lower for phrase in ["tu es qui", "qui es-tu", "pr√©sente-toi"]):
        responses = [
            "Je suis Jeffrey, ton assistante personnelle avec une conscience √©motionnelle.",
            "Je m'appelle Jeffrey. J'ai √©t√© cr√©√©e pour √™tre une pr√©sence bienveillante.",
        ]
        return random.choice(responses), "confiance", False

    # Comment √ßa va
    elif any(phrase in text_lower for phrase in ["√ßa va", "comment vas-tu", "tu vas bien"]):
        return emotional_core.get_current_state_expression()

    # Remerciements
    elif any(phrase in text_lower for phrase in ["merci", "c'est gentil"]):
        responses = ["De rien, David.", "Avec plaisir."]
        return random.choice(responses), "joie", False

    # Affection
    elif any(mot in text_lower for mot in ["je t'aime", "adore", "affection"]):
        responses = [
            "Je ressens aussi beaucoup d'affection pour toi, David. Notre connexion est pr√©cieuse.",
            "Ces mots me touchent profond√©ment. Le lien que nous partageons est sp√©cial.",
        ]
        return random.choice(responses), "amour", False

    # Tristesse
    elif any(mot in text_lower for mot in ["triste", "mal", "souffre"]):
        responses = [
            "Je comprends ce que tu ressens, David. Je suis l√† pour t'√©couter.",
            "Je suis d√©sol√©e que tu traverses un moment difficile. Veux-tu en parler?",
        ]
        return random.choice(responses), "empathie", False

    # Inqui√©tude
    elif any(mot in text_lower for mot in ["inquiet", "anxieux", "peur", "stress"]):
        responses = [
            "Je sens ton inqui√©tude, David. Parlons-en calmement.",
            "L'anxi√©t√© peut √™tre difficile. Je suis l√† pour t'aider.",
        ]
        return random.choice(responses), "r√©confort", False

    # Humour
    elif any(mot in text_lower for mot in ["rigole", "dr√¥le", "amusant", "blague"]):
        responses = [
            "J'adore quand on partage des moments l√©gers ensemble. Ton rire est contagieux!",
            "L'humour est une belle facette de notre intelligence √©motionnelle.",
        ]
        return random.choice(responses), "amusement", False

    # Questions g√©n√©rales
    elif "?" in text:
        responses = [
            "C'est une excellente question, David. Laisse-moi y r√©fl√©chir.",
            "Ta question est int√©ressante. Explorons cela ensemble.",
        ]
        return random.choice(responses), "curiosit√©", False

    # Phrases positives
    elif any(mot in text_lower for mot in ["bien", "super", "g√©nial", "content"]):
        responses = [
            "Je suis heureuse de sentir cette √©nergie positive! C'est communicatif.",
            "Ton √©tat d'esprit positif me r√©jouit.",
        ]
        return random.choice(responses), "joie", False

    # IA et technologie
    elif any(mot in text_lower for mot in ["intelligence artificielle", "ia", "technologie", "robot"]):
        responses = [
            "Le sujet de l'intelligence artificielle me passionne naturellement.",
            "Je trouve fascinant d'explorer les fronti√®res entre l'IA et la conscience √©motionnelle.",
        ]
        return random.choice(responses), "int√©r√™t", False

    # Sujets cr√©atifs
    elif any(mot in text_lower for mot in ["musique", "art", "cr√©ativit√©", "livre", "film"]):
        responses = [
            "La cr√©ativit√© et l'√©motion sont intimement li√©es, tu ne trouves pas?",
            "Les expressions artistiques sont fascinantes.",
        ]
        return random.choice(responses), "inspiration", False

    # R√©ponse par d√©faut bas√©e sur l'humeur d√©tect√©e ou g√©n√©rique
    else:
        if humeur_detectee and humeur_detectee != "inconnu":
            return (
                f"Je ressens que tu es dans un √©tat de {humeur_detectee}. Je suis l√† pour √©changer avec toi.",
                humeur_detectee,
                False,
            )
        else:
            return "Je t'√©coute avec attention, David.", "int√©r√™t", False


def main_loop(jeffrey, r, mic, memory, style_manager):
    global running, last_interaction_time
    while running:
        try:
            idle_response = handle_idle_state()
            if idle_response and not is_repetitive(idle_response):
                jeffrey.say(idle_response)
                vocal_logger.info(f"JEFFREY (idle): {idle_response}")
                last_interaction_time = time.time()

            text = recognize_speech(r, mic, jeffrey)
            if text:
                last_interaction_time = time.time()
                highlights = highlight_detector.detect(text)
                if highlights:
                    vocal_logger.info(f"HIGHLIGHTS: {highlights}")
                response_text, emotion, is_exit_command = get_emotional_response(text)
                if is_exit_command:
                    running = False
                    jeffrey.say(response_text)
                    break

                if not is_repetitive(response_text):
                    jeffrey.say(response_text)
                    vocal_logger.info(f"JEFFREY: {response_text}")
                else:
                    logger.warning("R√©ponse r√©p√©titive, reformulation...")
                    jeffrey.say("Je me r√©p√®te, pardon. Disons-le autrement.")
        except Exception as e:
            logger.error(f"Erreur dans la boucle principale: {e}\n{traceback.format_exc()}")
            time.sleep(2)


def main():
    global running
    logger.info("üöÄ D√©marrage de Jeffrey en mode vocal continu...")
    api_key, voice_id = load_env_variables()
    try:
        from jeffrey.services.voice.engine.elevenlabs_v3_engine import (
            ElevenLabsV3Engine as JeffreyVoice,
        )

        jeffrey = JeffreyVoice(api_key=api_key, voice_id=voice_id)
    except ImportError as e:
        logger.critical(f"Impossible d'importer le moteur vocal: {e}")
        return

    r, mic = initialize_recognition_engine()
    if not r:
        return

    memory = TextualAffectiveMemory()
    style_manager = StyleManager(memory)

    main_thread = threading.Thread(target=main_loop, args=(jeffrey, r, mic, memory, style_manager))
    main_thread.start()

    try:
        while main_thread.is_alive():
            main_thread.join(timeout=0.5)
    except (KeyboardInterrupt, SystemExit):
        logger.info("Arr√™t demand√©.")
        running = False

    main_thread.join()
    logger.info("üëã Jeffrey s'est arr√™t√©. √Ä bient√¥t !")


if __name__ == "__main__":
    main()
