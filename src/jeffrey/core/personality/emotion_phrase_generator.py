"""
Module : emotion_phrase_generator.py
Description : G√®re la transformation des phrases selon l'√©tat √©motionnel
"""

import random
from dataclasses import dataclass


@dataclass
class EmotionMetadata:
    humeur: str
    intensite: float
    couleur: str
    emoji: str
    lien_affectif: float


class EmotionPhraseGenerator:
    def __init__(self):
        self.emotion_prefixes: dict[str, list[tuple[str, str]]] = {
            "heureux": [("‚ú®", "Avec joie"), ("üåü", "Dans la bonne humeur"), ("üòä", "Le c≈ìur l√©ger")],
            "triste": [("üíî", "Le c≈ìur lourd"), ("ü´Ç", "Avec douceur"), ("üåßÔ∏è", "Dans la m√©lancolie")],
            "√©nerv√©": [("‚ö°", "Avec d√©termination"), ("üî•", "Fermement"), ("üí™", "Avec conviction")],
            "amoureux": [("üíñ", "Avec tendresse"), ("üíù", "Dans l'amour"), ("üíï", "Avec passion")],
            "neutre": [("", ""), ("", ""), ("", "")],
        }

        self.emotion_colors = {
            "heureux": "#FFD700",  # Or
            "triste": "#4169E1",  # Bleu royal
            "√©nerv√©": "#FF4500",  # Rouge-orange
            "amoureux": "#FF69B4",  # Rose vif
            "neutre": "#808080",  # Gris
        }

    def adapter_phrase(
        self, texte: str, humeur: str, intensite: float, lien_affectif: float
    ) -> tuple[str, EmotionMetadata]:
        """
        Adapte une phrase selon l'√©tat √©motionnel

        Args:
            texte: La phrase √† adapter
            humeur: L'√©motion dominante
            intensite: L'intensit√© de l'√©motion (0-1)
            lien_affectif: L'intensit√© du lien affectif (0-1)

        Returns:
            Tuple[str, EmotionMetadata]: La phrase adapt√©e et ses m√©tadonn√©es
        """
        # S√©lection du pr√©fixe √©motionnel
        prefixes = self.emotion_prefixes.get(humeur, self.emotion_prefixes["neutre"])
        emoji, prefix = random.choice(prefixes)

        # Adaptation de l'intensit√©
        if intensite > 0.8:
            prefix = f"{prefix} !"
        elif intensite < 0.3:
            prefix = f"{prefix}..."

        # Adaptation selon le lien affectif
        if lien_affectif > 0.7:
            prefix = f"Mon cher ami, {prefix.lower()}"

        # Cr√©ation des m√©tadonn√©es
        metadata = EmotionMetadata(
            humeur=humeur,
            intensite=intensite,
            couleur=self.emotion_colors[humeur],
            emoji=emoji,
            lien_affectif=lien_affectif,
        )

        # Construction de la phrase finale
        phrase_adaptee = f"{prefix} {texte}" if prefix else texte

        return phrase_adaptee, metadata
