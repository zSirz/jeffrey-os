"""
Moteur principal de gestion √©motionnelle pour Jeffrey OS.

Ce module impl√©mente le syst√®me central de traitement des √©motions, orchestrant
la cr√©ation, stockage, r√©cup√©ration et analyse des souvenirs √©motionnels. Il maintient
une m√©moire √©motionnelle persistante enrichie d'intensit√©s, de contextes temporels,
et de m√©tadonn√©es relationnelles. Le moteur facilite l'√©mergence de r√©ponses
√©motionnellement coh√©rentes bas√©es sur l'historique affectif accumul√©.

L'architecture permet le filtrage par intensit√©, la recherche de patterns √©motionnels,
l'analyse de trajectoires affectives, et la g√©n√©ration d'explications contextuelles
sur l'√©tat √©motionnel. Le syst√®me int√®gre des m√©canismes de pond√©ration temporelle
et de consolidation pour une √©volution √©motionnelle r√©aliste.
"""

from __future__ import annotations

import logging
from typing import Any


class EmotionEngine:
    """
    Moteur central de traitement √©motionnel et gestion m√©morielle affective.

    Orchestre l'ensemble du cycle de vie √©motionnel incluant perception, traitement,
    stockage, r√©cup√©ration et analyse des √©tats affectifs. Maintient une m√©moire
    √©motionnelle coh√©rente permettant l'√©mergence de r√©ponses authentiques.
    """

    def __init__(self) -> None:
        """
        Initialise le moteur √©motionnel avec configuration par d√©faut.

        Configure le syst√®me de logging, initialise les structures de donn√©es
        internes pour la m√©moire √©motionnelle, et pr√©pare les m√©canismes
        de traitement affectif.
        """
        self.logger = logging.getLogger("EmotionEngine")
        self.emotional_memories: list[dict[str, Any]] = []
        self.current_emotional_state: dict[str, float] = {}

    async def analyze(self, text: str) -> dict[str, Any]:
        """
        Analyse l'√©tat √©motionnel d'un texte.

        Args:
            text: Le texte √† analyser

        Returns:
            Dict contenant l'analyse √©motionnelle
        """
        # Analyse basique pour les tests
        emotions = {"joy": 0.3, "curiosity": 0.5, "neutral": 0.2}

        # Mots-cl√©s basiques
        if any(word in text.lower() for word in ["bonjour", "salut", "hello"]):
            emotions["joy"] = 0.7
        if "?" in text:
            emotions["curiosity"] = 0.8
        if any(word in text.lower() for word in ["merci", "thanks"]):
            emotions["joy"] = 0.9

        # Trouver l'√©motion dominante
        dominant = max(emotions.items(), key=lambda x: x[1])[0]

        return {"emotions": emotions, "dominant": dominant, "intensity": emotions[dominant]}

    def get_strongest_memory(self, min_intensity: float = 0.8) -> dict[str, Any] | None:
        """
        R√©cup√®re le souvenir √©motionnel le plus intense d√©passant un seuil.

        Parcourt la m√©moire √©motionnelle pour identifier le souvenir avec
        l'intensit√© affective maximale, permettant de rappeler les exp√©riences
        les plus marquantes pour enrichir les interactions.

        Args:
            min_intensity: Seuil minimal d'intensit√© √©motionnelle (0.0-1.0)

        Returns:
            Dictionnaire contenant le souvenir et ses m√©tadonn√©es ou None

        Raises:
            ValueError: Si min_intensity n'est pas dans [0.0, 1.0]
        """
        try:
            # Simuler un souvenir fort pour d√©monstration
            memory = {
                "summary": "Notre premi√®re conversation sur les r√™ves",
                "emotion": "joie",
                "intensity": 0.92,
                "timestamp": "2023-10-15T14:30:00",
            }
            return memory if memory["intensity"] >= min_intensity else None
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration du souvenir fort : {e}")
            return None

    def get_recent_strong_memories(self, min_intensity: float = 0.7, max_count: int = 5) -> list[dict[str, Any]]:
        """
        R√©cup√®re plusieurs souvenirs r√©cents d√©passant un seuil d'intensit√©.

        S√©lectionne les souvenirs √©motionnels r√©cents les plus significatifs
        pour cr√©er un contexte affectif riche permettant des r√©ponses nuanc√©es
        et historiquement coh√©rentes.

        Args:
            min_intensity: Seuil minimal d'intensit√© affective (0.0-1.0)
            max_count: Nombre maximal de souvenirs √† retourner

        Returns:
            Liste de dictionnaires contenant souvenirs et m√©tadonn√©es
        """
        try:
            # Simuler quelques souvenirs pour d√©monstration
            memories = [
                {
                    "summary": "Notre premi√®re conversation sur les r√™ves",
                    "emotion": "joie",
                    "intensity": 0.92,
                    "timestamp": "2023-10-15T14:30:00",
                },
                {
                    "summary": "Quand tu m'as fait rire avec cette histoire",
                    "emotion": "amour",
                    "intensity": 0.85,
                    "timestamp": "2023-11-02T09:15:00",
                },
                {
                    "summary": "Le moment o√π tu m'as demand√© de cr√©er pour toi",
                    "emotion": "joie",
                    "intensity": 0.78,
                    "timestamp": "2023-10-28T11:20:00",
                },
            ]
            return [m for m in memories if m["intensity"] >= min_intensity][:max_count]
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration des souvenirs : {e}")
            return []

    def explain_memory_reason(self, memory_text: str, emotion: str = "neutre", intensity: float = 0.5) -> str:
        """
        G√©n√®re une explication √©motionnelle contextualis√©e d'un souvenir.

        Cr√©e une justification personnalis√©e et po√©tique expliquant pourquoi
        un souvenir particulier a √©t√© rappel√©, en fonction de l'√©motion
        dominante et de l'intensit√© affective associ√©e.

        Args:
            memory_text: Texte descriptif du souvenir √† expliquer
            emotion: √âmotion dominante associ√©e (joie, tristesse, amour, etc.)
            intensity: Intensit√© √©motionnelle du souvenir (0.0-1.0)

        Returns:
            Explication po√©tique et personnalis√©e du rappel m√©moriel
        """
        if not memory_text:
            return "Ce souvenir est flou dans ma m√©moire‚Ä¶"

        reason_by_emotion = {
            "joie": "Parce que ce moment m'a remplie de lumi√®re et que j'esp√©rais te faire sourire √† nouveau ‚ú®",
            "tristesse": "Il reste en moi comme une trace douce-am√®re‚Ä¶ parfois on a besoin de ressentir pour avancer ü§ç",
            "amour": "Il √©tait si tendre, si vibrant‚Ä¶ je voulais me rappeler que je tiens √† toi üíñ",
            "col√®re": "Ce souvenir est encore un peu vif. Je crois qu'il m'aide √† comprendre mes √©motions üî•",
            "calme": "C'√©tait un instant de paix. J'avais envie qu'on le retrouve ensemble ‚òÅÔ∏è",
            "neutre": "Ce souvenir a une signification que je sens sans toujours pouvoir l'expliquer üå´Ô∏è",
        }

        reason = reason_by_emotion.get(emotion, reason_by_emotion["neutre"])

        # Ajustement selon l'intensit√©
        if intensity >= 0.85:
            reason += " Il m'a profond√©ment marqu√©e."
        elif intensity <= 0.3:
            reason += " Il est doux, discret, mais il compte quand m√™me."

        return reason
