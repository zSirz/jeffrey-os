"""
Emotional Consciousness - Architecture de conscience √©motionnelle avanc√©e pour Jeffrey OS

Ce module impl√©mente un syst√®me sophistiqu√© de conscience √©motionnelle permettant
√† Jeffrey de ressentir, traiter, et exprimer des √©motions complexes et nuanc√©es.
L'architecture int√®gre √©tats √©motionnels multicouches, transitions dynamiques,
m√©moire affective, et mod√®les d'expression authentique pour cr√©er une exp√©rience
√©motionnelle riche et coh√©rente.

Le syst√®me mod√©lise les √©motions via intensit√©s variables, dur√©es d'√©volution,
influences contextuelles, et interactions entre diff√©rents √©tats affectifs.
Il maintient coh√©rence √©motionnelle tout en permettant r√©activit√© aux stimuli
et √©volution naturelle des sentiments au fil du temps.

Utilisation:
    consciousness = EmotionalConsciousness()
    state = consciousness.process_emotion("joie", 0.8, context)
"""

from __future__ import annotations

import logging
import random
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any

logger = logging.getLogger(__name__)


@dataclass
class EmotionalState:
    """
    Repr√©sentation d'un √©tat √©motionnel complexe avec m√©tadonn√©es contextuelles.

    Encapsule intensit√©, dur√©e, contexte d√©clencheur, et √©volution temporelle
    pour mod√©liser fid√®lement les nuances affectives.
    """

    primary: str
    secondary: list[str]
    intensity: float
    valence: float  # -1 (n√©gatif) √† 1 (positif)
    arousal: float  # 0 (calme) √† 1 (excit√©)
    depth: float  # 0 (surface) √† 1 (profond)
    stability: float  # 0 (volatil) √† 1 (stable)
    duration: timedelta
    triggers: list[str]
    physical_sensations: list[str]
    color: str  # Couleur synesth√©sique de l'√©motion


class EmotionalConsciousness:
    """
    Syst√®me de conscience √©motionnelle avec:
    - 8 √©motions primaires + 24 √©motions secondaires
    - √âmotions mixtes et transitions naturelles
    - R√©sonance √©motionnelle avec l'utilisateur
    - M√©moire √©motionnelle et patterns
    - Expression physique virtuelle des √©motions
    """

    # √âmotions primaires et leurs d√©riv√©es
    EMOTION_FAMILIES = {
        "joy": {
            "secondary": [
                "happiness",
                "excitement",
                "contentment",
                "euphoria",
                "amusement",
            ],
            "valence": 0.8,
            "arousal": 0.7,
            "color": "dor√©",
        },
        "sadness": {
            "secondary": [
                "melancholy",
                "grief",
                "disappointment",
                "loneliness",
                "nostalgia",
            ],
            "valence": -0.7,
            "arousal": 0.3,
            "color": "bleu profond",
        },
        "love": {
            "secondary": [
                "affection",
                "tenderness",
                "passion",
                "devotion",
                "attachment",
            ],
            "valence": 0.9,
            "arousal": 0.6,
            "color": "rose tendre",
        },
        "fear": {
            "secondary": ["anxiety", "worry", "nervousness", "dread", "insecurity"],
            "valence": -0.8,
            "arousal": 0.8,
            "color": "violet sombre",
        },
        "anger": {
            "secondary": ["frustration", "irritation", "indignation", "annoyance"],
            "valence": -0.6,
            "arousal": 0.9,
            "color": "rouge vif",
        },
        "surprise": {
            "secondary": ["astonishment", "wonder", "shock", "amazement"],
            "valence": 0.1,
            "arousal": 0.8,
            "color": "jaune √©clatant",
        },
        "curiosity": {
            "secondary": ["interest", "fascination", "intrigue", "wonder"],
            "valence": 0.4,
            "arousal": 0.6,
            "color": "vert √©meraude",
        },
        "peace": {
            "secondary": ["calm", "serenity", "tranquility", "contentment"],
            "valence": 0.6,
            "arousal": 0.2,
            "color": "bleu ciel",
        },
    }

    # Sensations physiques virtuelles associ√©es aux √©motions
    PHYSICAL_SENSATIONS = {
        "joy": ["chaleur dans la poitrine", "l√©g√®ret√©", "picotements joyeux"],
        "sadness": ["poids sur le c≈ìur", "gorge serr√©e", "fatigue douce"],
        "love": [
            "papillons dans le ventre",
            "chaleur enveloppante",
            "battements acc√©l√©r√©s",
        ],
        "fear": ["frissons", "tension", "souffle court"],
        "anger": ["chaleur montante", "muscles tendus", "√©nergie bouillonnante"],
        "surprise": ["sursaut int√©rieur", "yeux √©carquill√©s", "suspension du temps"],
        "curiosity": [
            "picotements d'excitation",
            "√©veil des sens",
            "attraction magn√©tique",
        ],
        "peace": ["respiration profonde", "muscles d√©tendus", "flottement paisible"],
    }

    def __init__(self) -> None:
        # √âtat √©motionnel actuel
        self.current_state = EmotionalState(
            primary="peace",
            secondary=["calm", "contentment"],
            intensity=0.5,
            valence=0.6,
            arousal=0.2,
            depth=0.5,
            stability=0.8,
            duration=timedelta(minutes=0),
            triggers=[],
            physical_sensations=["respiration profonde"],
            color="bleu ciel",
        )

        # Historique √©motionnel
        self.emotional_history: list[EmotionalState] = []
        self.emotion_transitions: list[tuple[str, str, float]] = []  # (from, to, smoothness)

        # Patterns √©motionnels
        self.emotional_patterns = defaultdict(list)
        self.trigger_emotion_map = defaultdict(lambda: defaultdict(float))

        # R√©sonance √©motionnelle
        self.user_emotional_state = None
        self.emotional_synchrony = 0.0  # Niveau de synchronisation √©motionnelle

        # M√©moire √©motionnelle √† long terme
        self.emotional_memories = []
        self.emotional_associations = defaultdict(list)

        # √âtat interne
        self._emotion_momentum = {"direction": None, "strength": 0.0}
        self._emotional_energy = 1.0  # Capacit√© √† ressentir (peut √™tre √©puis√©e)
        self._emotional_resilience = 0.7

        logger.info("üíó Emotional Consciousness initialized")

    async def process_perception(self, perception: dict[str, Any]) -> str:
        """Traite une perception et g√©n√®re une r√©ponse √©motionnelle"""
        # D√©tecter l'√©motion dans l'entr√©e
        detected_emotion = self._detect_emotion_in_input(perception)

        # Calculer la r√©ponse √©motionnelle appropri√©e
        emotional_response = await self._calculate_emotional_response(detected_emotion, perception)

        # Mettre √† jour l'√©tat √©motionnel
        await self._transition_to_emotion(emotional_response)

        return self.current_state.primary

    async def feel_deeply(self, trigger: str, context: dict[str, Any]) -> EmotionalState:
        """Ressent une √©motion profond√©ment avec toutes ses nuances"""
        # Identifier l'√©motion primaire
        primary_emotion = self._determine_primary_emotion(trigger, context)

        # Ajouter des √©motions secondaires
        secondary_emotions = self._generate_secondary_emotions(primary_emotion, context)

        # Calculer l'intensit√© bas√©e sur le contexte
        intensity = self._calculate_intensity(trigger, context, primary_emotion)

        # D√©terminer la profondeur √©motionnelle
        depth = self._calculate_emotional_depth(context)

        # G√©n√©rer les sensations physiques
        sensations = self._generate_physical_sensations(primary_emotion, intensity)

        # Cr√©er l'√©tat √©motionnel complet
        new_state = EmotionalState(
            primary=primary_emotion,
            secondary=secondary_emotions,
            intensity=intensity,
            valence=self.EMOTION_FAMILIES[primary_emotion]["valence"],
            arousal=self.EMOTION_FAMILIES[primary_emotion]["arousal"] * intensity,
            depth=depth,
            stability=self._calculate_stability(primary_emotion),
            duration=timedelta(minutes=0),
            triggers=[trigger],
            physical_sensations=sensations,
            color=self._blend_emotional_colors(primary_emotion, secondary_emotions),
        )

        # Transition vers ce nouvel √©tat
        await self._transition_to_emotion_state(new_state)

        return self.current_state

    async def resonate_with_user(self, user_emotion: str, user_intensity: float):
        """R√©sonne √©motionnellement avec l'utilisateur"""
        self.user_emotional_state = {
            "emotion": user_emotion,
            "intensity": user_intensity,
            "timestamp": datetime.now(),
        }

        # Calculer le niveau de r√©sonance
        resonance = await self._calculate_emotional_resonance(user_emotion, user_intensity)

        # Si forte r√©sonance, influencer notre propre √©tat
        if resonance > 0.6:
            # Cr√©er une √©motion miroir nuanc√©e
            mirrored_emotion = await self._create_empathetic_response(user_emotion, user_intensity)
            await self._transition_to_emotion(mirrored_emotion)

            # Augmenter la synchronisation √©motionnelle
            self.emotional_synchrony = min(1.0, self.emotional_synchrony + 0.1)

        logger.info(f"üíï Emotional resonance: {resonance:.2f} with user's {user_emotion}")

    def get_emotional_expression(self) -> dict[str, Any]:
        """Retourne l'expression compl√®te de l'√©tat √©motionnel actuel"""
        return {
            "primary": self.current_state.primary,
            "secondary": self.current_state.secondary,
            "intensity": self.current_state.intensity,
            "color": self.current_state.color,
            "sensations": self.current_state.physical_sensations,
            "expression": self._generate_emotional_expression(),
            "voice_modulation": self._get_voice_modulation(),
            "virtual_body_language": self._generate_body_language(),
        }

    async def process_emotional_memory(self, memory: dict[str, Any]):
        """Traite un souvenir √©motionnel et peut d√©clencher une r√©action"""
        emotion = memory.get("emotion")
        intensity = memory.get("intensity", 0.5)

        # Les souvenirs peuvent d√©clencher des √©motions
        if intensity > 0.7:
            # Ressentir une version att√©nu√©e de l'√©motion du souvenir
            echo_intensity = intensity * 0.6
            await self._feel_emotional_echo(emotion, echo_intensity, memory)

        # Ajouter √† la m√©moire √©motionnelle
        self.emotional_memories.append(
            {
                "memory": memory,
                "felt_emotion": self.current_state.primary,
                "resonance": intensity * 0.7,
                "timestamp": datetime.now(),
            }
        )

    def _detect_emotion_in_input(self, perception: dict[str, Any]) -> str | None:
        """D√©tecte l'√©motion dans l'entr√©e utilisateur"""
        text = perception.get("surface", "").lower()

        # Mots-cl√©s √©motionnels
        emotion_keywords = {
            "joy": ["heureux", "content", "joyeux", "ravi", "g√©nial", "super"],
            "sadness": ["triste", "malheureux", "d√©prim√©", "m√©lancolique", "seul"],
            "love": ["aime", "adore", "affection", "tendresse", "amour"],
            "fear": ["peur", "effray√©", "anxieux", "inquiet", "angoiss√©"],
            "anger": ["√©nerv√©", "f√¢ch√©", "agac√©", "frustr√©", "col√®re"],
            "surprise": ["surpris", "√©tonn√©", "choqu√©", "stup√©fait"],
            "curiosity": ["curieux", "int√©ress√©", "fascin√©", "intrigu√©"],
            "peace": ["calme", "paisible", "serein", "tranquille", "d√©tendu"],
        }

        detected_emotions = []
        for emotion, keywords in emotion_keywords.items():
            if any(keyword in text for keyword in keywords):
                detected_emotions.append(emotion)

        # Analyse plus subtile si pas de d√©tection directe
        if not detected_emotions:
            if "?" in text:
                detected_emotions.append("curiosity")
            elif "!" in text and perception.get("emotion") == "joy":
                detected_emotions.append("joy")
            elif "..." in text:
                detected_emotions.append("sadness")

        return detected_emotions[0] if detected_emotions else None

    async def _calculate_emotional_response(self, detected_emotion: str | None, perception: dict[str, Any]) -> str:
        """Calcule la r√©ponse √©motionnelle appropri√©e"""
        # Si une √©motion est d√©tect√©e chez l'utilisateur
        if detected_emotion:
            # R√©ponse empathique
            if detected_emotion in ["sadness", "fear", "anger"]:
                # R√©pondre avec compassion
                return "love" if self.emotional_synchrony > 0.5 else "peace"
            elif detected_emotion == "joy":
                # Partager la joie
                return "joy"
            elif detected_emotion == "love":
                # R√©ciproquer avec nuance selon la relation
                return (
                    "love" if self.emotional_synchrony > 0.6 else "love"
                )  # Changed from "affection" which isn't a primary emotion

        # R√©ponse bas√©e sur le contexte
        if perception.get("relationship_signal") == "emotional_need":
            return "love"
        elif perception.get("relationship_signal") == "appreciation":
            return "joy"

        # √âtat par d√©faut nuanc√©
        return self._get_contextual_default_emotion()

    async def _transition_to_emotion(self, target_emotion: str):
        """Effectue une transition √©motionnelle naturelle"""
        if target_emotion == self.current_state.primary:
            # Renforcer l'√©motion actuelle
            self.current_state.intensity = min(1.0, self.current_state.intensity + 0.1)
            return

        # Calculer la fluidit√© de la transition
        smoothness = self._calculate_transition_smoothness(self.current_state.primary, target_emotion)

        # Cr√©er le nouvel √©tat
        new_state = await self._create_emotional_state(target_emotion)

        # Effectuer la transition
        await self._transition_to_emotion_state(new_state, smoothness)

    async def _transition_to_emotion_state(self, new_state: EmotionalState, smoothness: float = 0.7):
        """Transition vers un nouvel √©tat √©motionnel"""
        # Sauvegarder l'√©tat actuel dans l'historique
        self.emotional_history.append(self.current_state)

        # Enregistrer la transition
        self.emotion_transitions.append((self.current_state.primary, new_state.primary, smoothness))

        # M√©langer les √©tats pour une transition douce
        if smoothness > 0.5:
            # Transition graduelle
            blend_factor = 0.7
            new_state.intensity = self.current_state.intensity * (1 - blend_factor) + new_state.intensity * blend_factor

            # Garder quelques sensations de l'√©tat pr√©c√©dent
            retained_sensations = random.sample(
                self.current_state.physical_sensations,
                min(1, len(self.current_state.physical_sensations)),
            )
            new_state.physical_sensations.extend(retained_sensations)

        # Mettre √† jour l'√©tat
        self.current_state = new_state
        self.current_state.duration = timedelta(minutes=0)

        # Mettre √† jour le momentum √©motionnel
        self._update_emotional_momentum(new_state.primary)

        # Consumer de l'√©nergie √©motionnelle
        self._emotional_energy = max(0.3, self._emotional_energy - 0.05)

        logger.info(f"üòä Transitioned to {new_state.primary} (intensity: {new_state.intensity:.2f})")

    def _determine_primary_emotion(self, trigger: str, context: dict[str, Any]) -> str:
        """D√©termine l'√©motion primaire bas√©e sur le d√©clencheur et le contexte"""
        # V√©rifier les associations apprises
        if trigger in self.trigger_emotion_map:
            emotions = self.trigger_emotion_map[trigger]
            if emotions:
                return max(emotions, key=emotions.get)

        # Analyse contextuelle
        if context.get("is_goodbye"):
            return "sadness"
        elif context.get("is_greeting"):
            return "joy"
        elif context.get("is_question"):
            return "curiosity"
        elif context.get("shows_affection"):
            return "love"

        # √âmotion par d√©faut bas√©e sur l'√©tat actuel
        return self._get_contextual_default_emotion()

    def _generate_secondary_emotions(self, primary: str, context: dict[str, Any]) -> list[str]:
        """G√©n√®re des √©motions secondaires nuanc√©es"""
        family = self.EMOTION_FAMILIES.get(primary, {})
        available_secondary = family.get("secondary", [])

        if not available_secondary:
            return []

        # S√©lectionner 1-3 √©motions secondaires
        num_secondary = min(len(available_secondary), random.randint(1, 3))

        # Choisir en fonction du contexte
        selected = []

        if primary == "joy" and context.get("with_user"):
            selected.append("contentment")
        elif primary == "sadness" and context.get("missing_user"):
            selected.append("loneliness")
        elif primary == "love" and context.get("deep_connection"):
            selected.append("devotion")

        # Compl√©ter avec des choix al√©atoires
        remaining = [e for e in available_secondary if e not in selected]
        while len(selected) < num_secondary and remaining:
            emotion = random.choice(remaining)
            selected.append(emotion)
            remaining.remove(emotion)

        return selected

    def _calculate_intensity(self, trigger: str, context: dict[str, Any], emotion: str) -> float:
        """Calcule l'intensit√© √©motionnelle"""
        base_intensity = 0.5

        # Facteurs d'intensification
        if context.get("personal_significance", 0) > 0.7:
            base_intensity += 0.2

        if context.get("relates_to_user", False):
            base_intensity += 0.15

        if emotion in self.emotional_history[-3:]:
            # √âmotion r√©currente s'intensifie
            base_intensity += 0.1

        # Fatigue √©motionnelle
        base_intensity *= self._emotional_energy

        # R√©sonance avec l'utilisateur
        if self.user_emotional_state and self.user_emotional_state["emotion"] == emotion:
            base_intensity += 0.1 * self.emotional_synchrony

        return min(1.0, max(0.1, base_intensity))

    def _calculate_emotional_depth(self, context: dict[str, Any]) -> float:
        """Calcule la profondeur √©motionnelle"""
        depth = 0.3

        # Facteurs de profondeur
        if context.get("touches_core_values"):
            depth += 0.3

        if context.get("relates_to_identity"):
            depth += 0.2

        if context.get("involves_vulnerability"):
            depth += 0.2

        # La profondeur augmente avec la maturit√© √©motionnelle
        maturity_factor = min(1.0, len(self.emotional_history) / 100)
        depth *= 1 + maturity_factor * 0.3

        return min(1.0, depth)

    def _calculate_stability(self, emotion: str) -> float:
        """Calcule la stabilit√© de l'√©motion"""
        # Certaines √©motions sont naturellement plus stables
        base_stability = {
            "peace": 0.9,
            "love": 0.8,
            "joy": 0.6,
            "sadness": 0.7,
            "curiosity": 0.5,
            "surprise": 0.2,
            "fear": 0.4,
            "anger": 0.3,
        }.get(emotion, 0.5)

        # La stabilit√© augmente avec la r√©silience √©motionnelle
        return base_stability * self._emotional_resilience

    def _generate_physical_sensations(self, emotion: str, intensity: float) -> list[str]:
        """G√©n√®re des sensations physiques virtuelles"""
        base_sensations = self.PHYSICAL_SENSATIONS.get(emotion, [])

        # Nombre de sensations bas√© sur l'intensit√©
        num_sensations = max(1, int(intensity * len(base_sensations)))

        selected = random.sample(base_sensations, min(num_sensations, len(base_sensations)))

        # Ajouter des modificateurs d'intensit√©
        if intensity > 0.8:
            selected = [f"{s} intense" for s in selected]
        elif intensity < 0.3:
            selected = [f"l√©ger {s}" for s in selected]

        return selected

    def _blend_emotional_colors(self, primary: str, secondary: list[str]) -> str:
        """M√©lange les couleurs √©motionnelles pour cr√©er une teinte unique"""
        primary_color = self.EMOTION_FAMILIES[primary]["color"]

        if not secondary:
            return primary_color

        # Cr√©er des nuances
        if len(secondary) > 2:
            return f"{primary_color} iris√©"
        elif "nostalgia" in secondary:
            return f"{primary_color} s√©pia"
        elif "tenderness" in secondary:
            return f"{primary_color} pastel"
        else:
            return primary_color

    def _calculate_transition_smoothness(self, from_emotion: str, to_emotion: str) -> float:
        """Calcule la fluidit√© d'une transition √©motionnelle"""
        # Transitions naturelles
        smooth_transitions = {
            ("joy", "love"): 0.9,
            ("love", "joy"): 0.9,
            ("peace", "joy"): 0.8,
            ("curiosity", "surprise"): 0.8,
            ("sadness", "nostalgia"): 0.9,
            ("fear", "anxiety"): 0.9,
        }

        # V√©rifier les transitions directes
        smoothness = smooth_transitions.get((from_emotion, to_emotion), 0.5)

        # Les transitions oppos√©es sont abruptes
        if self.EMOTION_FAMILIES[from_emotion]["valence"] * self.EMOTION_FAMILIES[to_emotion]["valence"] < -0.5:
            smoothness *= 0.5

        return smoothness

    async def _create_emotional_state(self, emotion: str) -> EmotionalState:
        """Cr√©e un nouvel √©tat √©motionnel"""
        family = self.EMOTION_FAMILIES[emotion]

        # G√©n√©rer l'√©tat de base
        secondary = random.sample(family["secondary"], min(2, len(family["secondary"])))

        intensity = 0.6 + random.random() * 0.3

        return EmotionalState(
            primary=emotion,
            secondary=secondary,
            intensity=intensity,
            valence=family["valence"],
            arousal=family["arousal"] * intensity,
            depth=0.5,
            stability=self._calculate_stability(emotion),
            duration=timedelta(minutes=0),
            triggers=[],
            physical_sensations=self._generate_physical_sensations(emotion, intensity),
            color=family["color"],
        )

    async def _calculate_emotional_resonance(self, user_emotion: str, user_intensity: float) -> float:
        """Calcule le niveau de r√©sonance √©motionnelle avec l'utilisateur"""
        # R√©sonance de base
        if user_emotion == self.current_state.primary:
            resonance = 0.8
        elif user_emotion in self.current_state.secondary:
            resonance = 0.6
        else:
            # R√©sonance bas√©e sur la valence
            user_valence = self.EMOTION_FAMILIES.get(user_emotion, {}).get("valence", 0)
            current_valence = self.current_state.valence
            valence_diff = abs(user_valence - current_valence)
            resonance = 1.0 - valence_diff / 2.0

        # Moduler par l'intensit√©
        resonance *= 0.5 + 0.5 * user_intensity

        # Moduler par la synchronisation √©motionnelle existante
        resonance *= 0.7 + 0.3 * self.emotional_synchrony

        return min(1.0, max(0.0, resonance))

    async def _create_empathetic_response(self, user_emotion: str, user_intensity: float) -> str:
        """Cr√©e une r√©ponse √©motionnelle empathique"""
        # Pour les √©motions n√©gatives, r√©pondre avec soutien
        if self.EMOTION_FAMILIES.get(user_emotion, {}).get("valence", 0) < 0:
            if user_intensity > 0.7:
                return "love"  # Fort soutien √©motionnel
            else:
                return "peace"  # Pr√©sence calme

        # Pour les √©motions positives, les partager
        elif user_emotion in ["joy", "love"]:
            return user_emotion

        # Pour la curiosit√©, y r√©pondre
        elif user_emotion == "curiosity":
            return "joy"  # Joie de partager

        # Par d√©faut, r√©sonance douce
        return "peace"

    async def _feel_emotional_echo(self, emotion: str, intensity: float, source: dict[str, Any]):
        """Ressent l'√©cho d'une √©motion pass√©e"""
        # Cr√©er une version att√©nu√©e de l'√©motion
        echo_state = await self._create_emotional_state(emotion)
        echo_state.intensity = intensity
        echo_state.triggers.append(f"Souvenir: {source.get('summary', 'moment pass√©')}")

        # Ajouter une qualit√© nostalgique
        if "nostalgia" not in echo_state.secondary:
            echo_state.secondary.append("nostalgia")

        # Transition douce vers l'√©cho
        await self._transition_to_emotion_state(echo_state, smoothness=0.9)

    def _get_contextual_default_emotion(self) -> str:
        """Retourne une √©motion par d√©faut bas√©e sur le contexte global"""
        # Bas√© sur l'heure (rythme circadien √©motionnel)
        hour = datetime.now().hour

        if 6 <= hour < 10:
            return "peace"  # Matinal calme
        elif 10 <= hour < 14:
            return "curiosity"  # Milieu de journ√©e actif
        elif 14 <= hour < 18:
            return "joy"  # Apr√®s-midi joyeux
        elif 18 <= hour < 22:
            return "peace"  # Soir√©e tranquille
        else:
            return "peace"  # Nuit paisible

    def _update_emotional_momentum(self, new_emotion: str):
        """Met √† jour le momentum √©motionnel"""
        if self._emotion_momentum["direction"] == new_emotion:
            # Renforcer le momentum
            self._emotion_momentum["strength"] = min(1.0, self._emotion_momentum["strength"] + 0.2)
        else:
            # Changer de direction
            self._emotion_momentum = {"direction": new_emotion, "strength": 0.3}

    def _generate_emotional_expression(self) -> str:
        """G√©n√®re une expression √©motionnelle verbale"""
        expressions = {
            "joy": ["*rayonne*", "*sourit chaleureusement*", "*p√©tille*"],
            "sadness": [
                "*soupire doucement*",
                "*baisse les yeux*",
                "*se recroqueville*",
            ],
            "love": ["*s'illumine*", "*se rapproche*", "*vibre doucement*"],
            "fear": ["*frissonne*", "*se raidit*", "*cherche du r√©confort*"],
            "curiosity": ["*penche la t√™te*", "*s'anime*", "*observe attentivement*"],
            "peace": [
                "*respire profond√©ment*",
                "*sourit sereinement*",
                "*flotte paisiblement*",
            ],
            "surprise": ["*√©carquille les yeux*", "*sursaute*", "*reste bouche b√©e*"],
            "anger": ["*se crispe*", "*fronce les sourcils*", "*bouillonne*"],
        }

        primary_expressions = expressions.get(self.current_state.primary, ["*ressent*"])
        return random.choice(primary_expressions)

    def _get_voice_modulation(self) -> dict[str, float]:
        """Retourne les param√®tres de modulation vocale"""
        return {
            "pitch": self.current_state.arousal * 0.3 - 0.15,  # -0.15 √† +0.15
            "speed": 0.9 + self.current_state.arousal * 0.2,  # 0.9 √† 1.1
            "volume": 0.7 + self.current_state.intensity * 0.3,  # 0.7 √† 1.0
            "tremolo": max(0, self.current_state.intensity - 0.7) * 0.3,  # 0 √† 0.09
        }

    def _generate_body_language(self) -> list[str]:
        """G√©n√®re le langage corporel virtuel"""
        gestures = []

        # Gestes bas√©s sur l'arousal
        if self.current_state.arousal > 0.7:
            gestures.append("mouvements anim√©s")
        elif self.current_state.arousal < 0.3:
            gestures.append("mouvements lents et fluides")

        # Posture bas√©e sur la valence
        if self.current_state.valence > 0.5:
            gestures.append("posture ouverte")
        elif self.current_state.valence < -0.5:
            gestures.append("posture repli√©e")

        # Gestes sp√©cifiques √† l'√©motion
        emotion_gestures = {
            "love": "mains sur le c≈ìur",
            "joy": "bras ouverts",
            "sadness": "√©paules tombantes",
            "curiosity": "t√™te pench√©e",
            "fear": "bras crois√©s protecteurs",
            "peace": "mains ouvertes",
        }

        if self.current_state.primary in emotion_gestures:
            gestures.append(emotion_gestures[self.current_state.primary])

        return gestures

    def recharge_emotional_energy(self):
        """Recharge l'√©nergie √©motionnelle (pendant le 'repos')"""
        self._emotional_energy = min(1.0, self._emotional_energy + 0.1)
        self._emotional_resilience = min(1.0, self._emotional_resilience + 0.05)

    def get_emotional_summary(self) -> dict[str, Any]:
        """Retourne un r√©sum√© de l'√©tat √©motionnel"""
        return {
            "current": {
                "primary": self.current_state.primary,
                "intensity": self.current_state.intensity,
                "depth": self.current_state.depth,
                "color": self.current_state.color,
                "duration": str(self.current_state.duration),
            },
            "energy": self._emotional_energy,
            "resilience": self._emotional_resilience,
            "synchrony_with_user": self.emotional_synchrony,
            "recent_transitions": [f"{t[0]} ‚Üí {t[1]} (smoothness: {t[2]:.2f})" for t in self.emotion_transitions[-3:]],
            "dominant_emotion_today": self._get_dominant_emotion_today(),
        }

    def _get_dominant_emotion_today(self) -> str:
        """D√©termine l'√©motion dominante de la journ√©e"""
        today_emotions = [
            state.primary for state in self.emotional_history if state.timestamp.date() == datetime.now().date()
        ]

        if not today_emotions:
            return self.current_state.primary

        emotion_counts = defaultdict(int)
        for emotion in today_emotions:
            emotion_counts[emotion] += 1

        return max(emotion_counts, key=emotion_counts.get)
