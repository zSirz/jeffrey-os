"""
Module de infrastructure syst√®me de base pour Jeffrey OS.

Ce module impl√©mente les fonctionnalit√©s essentielles pour module de infrastructure syst√®me de base pour jeffrey os.
Il fournit une architecture robuste et √©volutive int√©grant les composants
n√©cessaires au fonctionnement optimal du syst√®me. L'impl√©mentation suit
les principes de modularit√© et d'extensibilit√© pour faciliter l'√©volution
future du syst√®me.

Le module g√®re l'initialisation, la configuration, le traitement des donn√©es,
la communication inter-composants, et la persistance des √©tats. Il s'int√®gre
harmonieusement avec l'architecture globale de Jeffrey OS tout en maintenant
une s√©paration claire des responsabilit√©s.

L'architecture interne permet une √©volution adaptative bas√©e sur les interactions
et l'apprentissage continu, contribuant √† l'√©mergence d'une conscience artificielle
coh√©rente et authentique.
"""

from __future__ import annotations

import base64
import json
import logging
import os
import secrets
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Any

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from dotenv import load_dotenv

logger = logging.getLogger(__name__)

# üîß PATCH DEV/PROD SWITCH - Ajout√© automatiquement
BYPASS_SECURECONFIG = os.getenv("JEFFREY_BYPASS_SECURECONFIG", "false").lower() == "true"

if BYPASS_SECURECONFIG:
    print("üîì [SECURECONFIG] Bypass activ√© : toutes les cl√©s sont charg√©es en clair depuis .env")
    print("   ‚ö†Ô∏è  MODE D√âVELOPPEMENT - Ne pas utiliser en production !")
else:
    print("üîí [SECURECONFIG] Chiffrement SecureConfig ACTIV√â !")


def get_api_key_with_bypass(key: str) -> str:
    """R√©cup√®re une cl√© API avec support bypass DEV/PROD"""
    if BYPASS_SECURECONFIG:
        # MODE DEV : charge directement depuis l'environnement
        variations = [
            key,
            key.upper(),
            f"{key.upper()}_API_KEY",
            key.replace("_API_KEY", "").upper() + "_API_KEY",
        ]

        for var in variations:
            val = os.getenv(var)
            if val and len(val) > 10:  # Cl√© valide
                return val

        raise SecureConfigError(f"‚ùå Cl√© manquante pour {key} (mode bypass DEV)")

    # MODE PROD : utilise le syst√®me chiffr√© normal
    # (Le code normal suit apr√®s ce patch)
    return None  # Placeholder, le code normal prendra le relais


@dataclass
class APIKeyConfig:
    """Configuration d'une cl√© API"""

    key: str
    service: str
    created_at: str
    last_rotated: str | None = None
    expires_at: str | None = None


class SecureConfigError(Exception):
    """Erreur de configuration s√©curis√©e"""

    pass


class SecureConfig:
    """
    Gestionnaire s√©curis√© des cl√©s API et secrets

    Features:
    - Chiffrement Fernet des cl√©s sensibles
    - Validation obligatoire au d√©marrage
    - Rotation automatique des cl√©s
    - Cache m√©moire s√©curis√©
    """

    def __init__(self, config_path: str | None = None, skip_validation: bool = False) -> None:
        # üîß PATCH DEV/PROD : Bypass complet si demand√©
        if BYPASS_SECURECONFIG:
            self.config_path = None
            self.salt_path = None
            self._cache: dict[str, Any] = {}
            self._cipher: Fernet | None = None
            self._master_key: str | None = None

            # Charger .env pour bypass
            load_dotenv()

            logger.info("üîì SecureConfig bypass√© - Mode d√©veloppement")
            return

        # MODE PROD : Logique normale
        self.config_path = Path(config_path or os.path.join(os.path.dirname(__file__), "..", ".env.encrypted"))
        self.salt_path = Path(str(self.config_path).replace(".encrypted", ".salt"))
        self._cache: dict[str, Any] = {}
        self._cipher: Fernet | None = None
        self._master_key: str | None = None

        # Charger les variables d'environnement non-chiffr√©es pour la transition
        load_dotenv()

        self._initialize_encryption()
        self._load_config()

        # Ne valider les cl√©s que si explicitement demand√© (sauf pour le mode setup)
        if not skip_validation:
            self._validate_required_keys()

    def _initialize_encryption(self):
        """Initialise le syst√®me de chiffrement"""
        try:
            # R√©cup√©rer ou g√©n√©rer la cl√© ma√Ætre
            self._master_key = os.getenv("JEFFREY_MASTER_KEY")
            if not self._master_key:
                # G√©n√©rer une nouvelle cl√© ma√Ætre si elle n'existe pas
                self._master_key = secrets.token_urlsafe(32)
                logger.warning(
                    "üîë Nouvelle cl√© ma√Ætre g√©n√©r√©e. Sauvegardez: JEFFREY_MASTER_KEY=%s",
                    self._master_key,
                )

            # G√©n√©rer ou charger le salt
            if self.salt_path.exists():
                with open(self.salt_path, "rb") as f:
                    salt = f.read()
            else:
                salt = os.urandom(16)
                with open(self.salt_path, "wb") as f:
                    f.write(salt)
                # S√©curiser le fichier salt
                os.chmod(self.salt_path, 0o600)

            # D√©river la cl√© de chiffrement
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=480000,  # Haute s√©curit√©
            )
            key = base64.urlsafe_b64encode(kdf.derive(self._master_key.encode()))
            self._cipher = Fernet(key)

            logger.info("üîê Syst√®me de chiffrement initialis√©")

        except Exception as e:
            raise SecureConfigError(f"Erreur d'initialisation du chiffrement: {e}")

    def _load_config(self):
        """Charge la configuration chiffr√©e"""
        if not self.config_path.exists():
            logger.info("üìÅ Fichier de configuration chiffr√© non trouv√©, migration n√©cessaire")
            self._migrate_from_env()
            return

        try:
            with open(self.config_path, "rb") as f:
                encrypted_data = f.read()

            decrypted_data = self._cipher.decrypt(encrypted_data)
            config_data = json.loads(decrypted_data.decode())

            for key, value in config_data.items():
                self._cache[key] = value

            logger.info("‚úÖ Configuration s√©curis√©e charg√©e avec %d cl√©s", len(self._cache))

        except Exception as e:
            logger.error("‚ùå Erreur de chargement de la configuration: %s", e)
            raise SecureConfigError(f"Impossible de charger la configuration chiffr√©e: {e}")

    def _migrate_from_env(self):
        """Migre les cl√©s depuis .env vers le format chiffr√©"""
        logger.info("üîÑ Migration des cl√©s depuis .env vers format chiffr√©")

        # Cl√©s sensibles √† migrer
        sensitive_keys = {
            "OPENAI_API_KEY": "OpenAI API Key",
            "ELEVENLABS_API_KEY": "ElevenLabs API Key",
            "ANTHROPIC_API_KEY": "Anthropic API Key",
            "GEMINI_API_KEY": "Gemini API Key",
            "MISTRAL_API_KEY": "Mistral API Key",
            "COHERE_API_KEY": "Cohere API Key",
            "JEFFREY_SECRET_KEY": "Jeffrey Secret Key",
            "JEFFREY_DEBUG_KEY": "Jeffrey Debug Key",
        }

        migrated_count = 0
        for env_key, description in sensitive_keys.items():
            value = os.getenv(env_key)
            if value and value != "your_key_here":
                self.set_secret(env_key, value, description)
                migrated_count += 1

        if migrated_count > 0:
            self._save_config()
            logger.info("‚úÖ Migration termin√©e: %d cl√©s s√©curis√©es", migrated_count)
        else:
            logger.warning("‚ö†Ô∏è Aucune cl√© trouv√©e √† migrer")

    def _validate_required_keys(self):
        """Valide que toutes les cl√©s requises sont pr√©sentes"""
        required_keys = ["OPENAI_API_KEY", "ELEVENLABS_API_KEY"]

        missing_keys = []
        for key in required_keys:
            if not self.get_secret(key):
                missing_keys.append(key)

        if missing_keys:
            raise SecureConfigError(
                f"‚ùå Cl√©s API manquantes: {', '.join(missing_keys)}. "
                f"Configurez-les avec set_secret() ou dans les variables d'environnement."
            )

        logger.info("‚úÖ Validation des cl√©s requises: OK")

    def get_secret(self, key: str, default: str | None = None) -> str | None:
        """R√©cup√®re une cl√© secr√®te du cache s√©curis√©"""
        # V√©rifier d'abord le cache chiffr√©
        cached_value = self._cache.get(key)
        if cached_value:
            if isinstance(cached_value, dict) and "key" in cached_value:
                return cached_value["key"]
            return cached_value

        # Fallback sur les variables d'environnement (pour la transition)
        env_value = os.getenv(key)
        if env_value and env_value != "your_key_here":
            return env_value

        return default

    def set_secret(self, key: str, value: str, description: str = "") -> None:
        """Stocke une cl√© secr√®te de mani√®re chiffr√©e"""
        config_entry = APIKeyConfig(key=value, service=description, created_at=datetime.now().isoformat())

        self._cache[key] = config_entry.__dict__
        logger.info("üîë Cl√© '%s' s√©curis√©e: %s", key, description)

    def rotate_key(self, key: str, new_value: str):
        """Fait la rotation d'une cl√© API"""
        if key not in self._cache:
            raise SecureConfigError(f"Cl√© '{key}' non trouv√©e pour rotation")

        old_config = self._cache[key]
        if isinstance(old_config, dict):
            old_config["key"] = new_value
            old_config["last_rotated"] = datetime.now().isoformat()
        else:
            # Format legacy
            self._cache[key] = new_value

        logger.info("üîÑ Rotation de la cl√© '%s' effectu√©e", key)

    def _save_config(self):
        """Sauvegarde la configuration chiffr√©e"""
        try:
            config_json = json.dumps(self._cache, indent=2, ensure_ascii=False)
            encrypted_data = self._cipher.encrypt(config_json.encode())

            # Sauvegarde atomique
            temp_path = Path(str(self.config_path) + ".tmp")
            with open(temp_path, "wb") as f:
                f.write(encrypted_data)

            # S√©curiser le fichier
            os.chmod(temp_path, 0o600)

            # Renommage atomique
            temp_path.rename(self.config_path)

            logger.info("üíæ Configuration s√©curis√©e sauvegard√©e")

        except Exception as e:
            logger.error("‚ùå Erreur de sauvegarde: %s", e)
            raise SecureConfigError(f"Impossible de sauvegarder la configuration: {e}")

    def save(self):
        """Sauvegarde publique"""
        self._save_config()

    def list_keys(self) -> dict[str, str]:
        """Liste les cl√©s configur√©es (sans les valeurs)"""
        result = {}
        for key, value in self._cache.items():
            if isinstance(value, dict) and "service" in value:
                result[key] = value["service"]
            else:
                result[key] = "Legacy key"
        return result

    def validate_key(self, key: str) -> bool:
        """Valide une cl√© avec support bypass"""
        if BYPASS_SECURECONFIG:
            try:
                val = get_api_key_with_bypass(key)
                return bool(val and len(val) > 10)
            except SecureConfigError:
                return False

        # MODE PROD : Validation normale
        """Valide qu'une cl√© est pr√©sente et non vide"""
        value = self.get_secret(key)
        return value is not None and len(value.strip()) > 0

    def get_stats(self) -> dict[str, Any]:
        """Statistiques de configuration"""
        return {
            "total_keys": len(self._cache),
            "config_file_exists": self.config_path.exists(),
            "encryption_active": self._cipher is not None,
            "required_keys_valid": all(self.validate_key(k) for k in ["OPENAI_API_KEY", "ELEVENLABS_API_KEY"]),
        }


# Instance globale pour l'application
_secure_config: SecureConfig | None = None


def get_secure_config(skip_validation: bool = False) -> SecureConfig:
    """R√©cup√®re l'instance globale de SecureConfig (Singleton)"""
    global _secure_config
    if _secure_config is None:
        _secure_config = SecureConfig(skip_validation=skip_validation)
    return _secure_config


def get_api_key(service: str) -> str:
    """
    R√©cup√®re une cl√© API de mani√®re s√©curis√©e

    Args:
        service: Nom du service (openai, elevenlabs, anthropic, etc.)

    Returns:
        Cl√© API ou l√®ve une exception si non trouv√©e
    """
    config = get_secure_config()

    key_mapping = {
        "openai": "OPENAI_API_KEY",
        "elevenlabs": "ELEVENLABS_API_KEY",
        "anthropic": "ANTHROPIC_API_KEY",
        "gemini": "GEMINI_API_KEY",
        "mistral": "MISTRAL_API_KEY",
        "cohere": "COHERE_API_KEY",
    }

    env_key = key_mapping.get(service.lower())
    if not env_key:
        raise SecureConfigError(f"Service inconnu: {service}")

    api_key = config.get_secret(env_key)
    if not api_key:
        raise SecureConfigError(f"Cl√© API manquante pour {service} ({env_key})")

    return api_key


# Fonctions de convenance
def validate_all_keys() -> bool:
    """Valide toutes les cl√©s requises"""
    try:
        config = get_secure_config()
        return config.get_stats()["required_keys_valid"]
    except Exception:
        return False


if __name__ == "__main__":
    # Test du syst√®me
    try:
        config = SecureConfig()
        print("‚úÖ SecureConfig initialis√© avec succ√®s")
        print(f"üìä Stats: {config.get_stats()}")
        print(f"üîë Cl√©s configur√©es: {list(config.list_keys().keys())}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
