#!/usr/bin/env python3
"""
JEFFREY OS - PROMPT 3-TER : ENRICHISSEMENT COMPLET D√âTECTION √âMOTIONNELLE
==========================================================================

Ce script applique TOUS les patchs recommand√©s par la Dream Team :
- 10 √©motions manquantes (amusement, betrayal, exhaustion, etc.)
- N-grams (bi/trigrams) pour expressions compos√©es
- Patterns FR enrichis ("j'ai gal√®re", "pas bien", etc.)
- N√©gations FR fiables avec fen√™tre avanc√©e
- Exclamations limit√©es (cap +0.2)
- Seuil neutral ajust√©
- Tests unitaires cibl√©s
- Script d'analyse des erreurs

OBJECTIF :
- Passer de Macro-F1 0.152 ‚Üí 0.55-0.70
- Accuracy 35% ‚Üí 60%+
- Latence < 50ms

√âquipe : Dream Team Jeffrey OS (GPT, Grok, Gemini, Claude)
"""

import os
import subprocess
import sys
from pathlib import Path

# ===============================================================================
# CONFIGURATION
# ===============================================================================

PROJECT_ROOT = Path(__file__).parent
SRC_DIR = PROJECT_ROOT / "src" / "jeffrey" / "nlp"
TESTS_DIR = PROJECT_ROOT / "tests"

print("=" * 80)
print("üöÄ JEFFREY OS - PROMPT 3-TER : ENRICHISSEMENT COMPLET")
print("=" * 80)
print()
print("Ce script va appliquer TOUS les patchs de la Dream Team :")
print("  1. Ajout 10 √©motions manquantes")
print("  2. N-grams (bi/trigrams)")
print("  3. Patterns FR enrichis")
print("  4. N√©gations FR fiables")
print("  5. Exclamations limit√©es")
print("  6. Seuil neutral ajust√©")
print("  7. Tests unitaires cibl√©s")
print("  8. Analyse des erreurs")
print()
print("Objectif : Macro-F1 0.152 ‚Üí 0.55-0.70")
print()

# ===============================================================================
# √âTAPE 1 : CR√âATION DE emotion_detector_v3.py (VERSION ENRICHIE)
# ===============================================================================

print("üìù [1/3] Cr√©ation de emotion_detector_v3.py...")
print()

emotion_detector_v3_code = r'''"""
JEFFREY OS - D√©tection √âmotionnelle V3 (ENRICHIE)
=================================================

Version enrichie avec TOUS les patchs de la Dream Team :
- 25 √©motions (15 de base + 10 nouvelles)
- N-grams pour expressions compos√©es
- Patterns FR enrichis
- N√©gations FR fiables
- Gestion intelligente des exclamations
- Seuil neutral ajust√©

√âquipe : Dream Team Jeffrey OS
"""

from typing import Dict, List, Tuple, Any, Set
from dataclasses import dataclass
import re


@dataclass
class EmotionResult:
    """R√©sultat de d√©tection √©motionnelle"""
    primary: str
    secondary: List[str]
    intensity: float
    cues: List[str]
    scores: Dict[str, float]


class EmotionDetectorV3:
    """
    D√©tecteur d'√©motions V3 pour Jeffrey OS - VERSION ENRICHIE.

    Am√©liorations V3 :
    - 10 √©motions suppl√©mentaires (amusement, betrayal, etc.)
    - N-grams pour expressions compos√©es
    - Patterns FR enrichis
    - N√©gations FR fiables
    """

    # ===== LEXIQUE ENRICHI (25 √âMOTIONS) =====

    EMOTION_LEXICON = {
        # ===== √âMOTIONS DE BASE (15) =====

        "joy": {
            "heureux", "content", "ravi", "enchant√©", "joyeux", "enjou√©",
            "r√©joui", "combl√©", "√©panoui", "radieux", "exalt√©",
            "super", "g√©nial", "formidable", "excellent", "parfait", "top",
            "incroyable", "fantastique", "extraordinaire", "magnifique",
            "adore", "kiffe", "aime", "jubile", "rayonne", "p√©tille",
            "au top", "trop bien", "trop cool", "la f√™te", "au taquet",
            "de bonne humeur", "bonne nouvelle", "chanceux", "b√©ni",
            "fier", "satisfait", "triomphant", "victorieux",
            "ouf", "styl√©", "mortel", "de ouf", "trop styl√©"
        },

        "sadness": {
            "triste", "malheureux", "d√©prim√©", "abattu", "d√©courag√©",
            "d√©sesp√©r√©", "chagrin√©", "m√©lancolique", "morose", "sombre",
            "d√©vast√©", "an√©anti", "effondr√©", "bris√©", "d√©truit",
            "√©cras√©", "accabl√©", "tortur√©", "rong√©",
            "mal", "pas bien", "vide", "seul", "isol√©", "abandonn√©",
            "rejet√©", "incompris", "paum√©", "perdu", "d√©sempar√©",
            "pleure", "souffre", "morfle", "gal√®re", "d√©guste",
            "coup dur", "mauvaise passe", "fond du trou", "ras le bol",
            "en avoir marre", "plus le moral", "noir", "sombre p√©riode",
            "√† plat", "au fond du trou", "d√©go√ªt√©", "d√©pit√©", "blas√©",
            "lessiv√©", "dans le coaltar", "au bout du rouleau"
        },

        "anger": {
            "col√®re", "√©nerv√©", "furieux", "irrit√©", "agac√©", "exasp√©r√©",
            "outr√©", "r√©volt√©", "indign√©", "courrouc√©", "rageur",
            "furibond", "enrag√©", "hors de moi", "bouillonne", "fulmine",
            "temp√™te", "explose", "p√®te un c√¢ble", "p√®te un plomb",
            "frustr√©", "contrari√©", "vex√©", "bless√©", "amer", "rancunier",
            "injuste", "inadmissible", "scandaleux", "r√©voltant",
            "inacceptable", "honteux", "indigne", "choquant",
            "√©nerve", "emmerde", "gonfle", "saoule", "gave", "insupporte",
            "en avoir ras le bol", "√† bout", "satur√©", "gonfl√© √† bloc",
            "bout de nerfs", "rouge de col√®re", "monte au cr√©neau",
            "chiant", "relou", "gonflant", "saoulant", "lourd",
            "fait chier", "en rogne", "sur les nerfs"
        },

        "fear": {
            "peur", "anxieux", "angoiss√©", "inquiet", "stress√©", "tendu",
            "nerveux", "craintif", "apeur√©", "effray√©", "terroris√©",
            "paniqu√©", "horrifi√©", "√©pouvant√©", "affol√©", "mort de trouille",
            "paralys√©", "t√©tanis√©", "glac√©", "fig√©",
            "mal √† l'aise", "mal au ventre", "boule au ventre",
            "n≈ìud √† l'estomac", "c≈ìur qui bat", "mains moites",
            "phobique", "claustrophobe", "agoraphobe", "phobie",
            "trouille", "flippe", "angoisse", "stress", "trac",
            "p√©toche", "frousse", "trouillard",
            "flipp√©", "stress√© √† mort", "mal", "pas rassur√©"
        },

        "surprise": {
            "surpris", "√©tonn√©", "stup√©fait", "abasourdi", "sid√©r√©",
            "√©bahi", "m√©dus√©", "interdit", "bouche b√©e",
            "choc", "inattendu", "impr√©vu", "incroyable", "inimaginable",
            "impensable", "inesp√©r√©", "dingue", "fou",
            "hallucine", "croit pas", "tombe des nues", "pas possible",
            "wahou", "oh", "ah", "quoi", "s√©rieux", "sans blague",
            "pas vrai", "c'est pas vrai", "jamais vu √ßa"
        },

        "disgust": {
            "d√©go√ªt", "r√©pugn√©", "√©c≈ìur√©", "d√©go√ªt√©", "r√©vuls√©",
            "naus√©eux", "malade", "immonde", "ignoble",
            "hypocrite", "malhonn√™te", "sale", "pourri", "corrompu",
            "menteur", "tra√Ætre", "l√¢che", "m√©prisable",
            "d√©gueulasse", "r√©pugnant", "infect", "ignoble", "immonde",
            "puant", "crade", "sale", "pourri", "moisi",
            "√ßa me d√©go√ªte", "me fait gerber", "envie de vomir",
            "me soul√®ve le c≈ìur", "horrible", "atroce",
            "d√©geu", "crade", "cracra", "d√©gueu", "beurk", "berk",
            "gerbe", "vomi"
        },

        "frustration": {
            "frustr√©", "contrari√©", "irrit√©", "agac√©", "emb√™t√©",
            "bloqu√©", "coinc√©", "emp√™ch√©", "entrav√©", "limit√©",
            "bug", "plante", "marche pas", "fonctionne pas",
            "gal√®re", "rame", "patauge", "n'y arrive pas",
            "j'ai gal√®re", "je gal√®re", "√ßa gal√®re", "gal√®re avec"
        },

        "relief": {
            "soulag√©", "ouf", "enfin", "lib√©r√©", "d√©livr√©", "apais√©",
            "rassur√©", "tranquille", "serein", "fini", "termin√©",
            "pass√©", "derri√®re moi", "r√©gl√©",
            "√ßa fait du bien", "me rassure", "respire"
        },

        "determination": {
            "d√©termin√©", "motiv√©", "d√©cid√©", "r√©solu", "tenace",
            "obstin√©", "pers√©v√©rant", "acharn√©", "volontaire",
            "vais y arriver", "r√©ussirai", "me bats", "l√¢che rien",
            "continue", "abandonne pas"
        },

        "pride": {
            "fier", "orgueilleux", "satisfait", "content de moi",
            "accompli", "r√©ussi", "gagn√©", "triomph√©", "excellent",
            "bien fait", "chapeau", "bravo √† moi"
        },

        "shame": {
            "honte", "honteux", "embarrass√©", "g√™n√©", "confus",
            "humili√©", "mortifi√©", "ridicule", "path√©tique",
            "nul", "minable", "rat√©", "merd√©"
        },

        "guilt": {
            "coupable", "culpabilis√©", "fautif", "responsable",
            "ma faute", "mon erreur", "regret", "regrette",
            "aurais d√ª", "pas d√ª", "remords"
        },

        "loneliness": {
            "seul", "isol√©", "solitaire", "abandonn√©", "d√©laiss√©",
            "exclu", "rejet√©", "mis de c√¥t√©", "oubli√©",
            "personne", "aucun ami", "tout seul"
        },

        "overwhelmed": {
            "d√©bord√©", "submerg√©", "d√©pass√©", "satur√©", "√† bout",
            "trop", "trop de", "tout en m√™me temps", "plus capable",
            "n'y arrive plus", "craque", "trop pour moi"
        },

        "neutral": set(),

        # ===== NOUVELLES √âMOTIONS (10) - PATCH GPT/GROK =====

        "amusement": {
            "amus√©", "rigolo", "marrant", "dr√¥le", "haha", "mdr", "lol", "ptdr",
            "√ßa me fait rire", "trop dr√¥le", "je rigole", "c'est fun", "cocasse",
            "hilarant", "mort de rire", "explos√© de rire", "pli√© de rire"
        },

        "betrayal": {
            "trahi", "trahison", "plant√©", "poignard√©", "trou dans le dos", "d√©loyal",
            "m'a doubl√©", "a pris mon id√©e", "m'a vendu", "m'a balanc√©",
            "coup de poignard", "coup dans le dos", "tra√Ætre", "tra√Ætrise"
        },

        "exhaustion": {
            "√©puis√©", "crev√©", "lessiv√©", "vid√©", "√©reint√©", "√† bout", "au bout du rouleau",
            "fatigu√© √† mort", "HS", "je n'en peux plus", "claqu√©",
            "mort", "dead", "ext√©nu√©", "vann√©"
        },

        "panic": {
            "panique", "paniqu√©", "je panique", "crise de panique", "terreur", "affolement",
            "je perds le contr√¥le", "au secours", "help", "JE PEUX PLUS",
            "je p√®te un c√¢ble", "je craque", "c'est la panique"
        },

        "vulnerability": {
            "vuln√©rable", "fragile", "√† vif", "√† fleur de peau", "j'ose √† peine",
            "j'ai du mal", "j'admets", "j'avoue que", "je me confie",
            "sensible", "blessable", "expos√©"
        },

        "discomfort": {
            "mal √† l'aise", "g√™n√©", "inconfort", "√ßa me met mal", "pas √† l'aise",
            "√ßa me d√©range", "√ßa me stresse un peu", "c'est oppressant",
            "malaise", "inconfortable", "g√™nant"
        },

        "clarification": {
            "pour √™tre clair", "juste pour pr√©ciser", "en fait", "attends",
            "je veux dire", "ce que je veux dire", "pr√©cision", "clarifier",
            "c'est-√†-dire", "autrement dit", "je m'explique"
        },

        "better": {
            "√ßa va mieux", "je me sens mieux", "soulag√© maintenant", "mieux qu'avant",
            "√ßa m'a aid√©", "je respire", "je vais mieux",
            "am√©lioration", "progr√®s", "√ßa s'arrange"
        },

        "evolving": {
            "√ßa √©volue", "√ßa progresse", "de mieux en mieux", "√ßa change",
            "je commence √†", "petit √† petit", "graduellement",
            "√©volution", "progression", "en cours"
        },

        "reflective": {
            "r√©fl√©chi", "introspectif", "je prends du recul", "j'ai compris",
            "je r√©alise que", "en y repensant", "avec du recul",
            "je comprends maintenant", "√ßa m'a fait r√©fl√©chir"
        }
    }

    # ===== STOPLIST =====

    STOPLIST = {
        "chaud", "cool", "mort", "malade", "dingue", "fou"
    }

    # ===== SHIFTERS =====

    NEGATIONS = {
        "pas", "plus", "jamais", "aucun", "aucune", "rien",
        "nullement", "gu√®re", "ne", "n'", "non"
    }

    INTENSIFIERS = {
        "tr√®s", "trop", "super", "hyper", "ultra", "m√©ga",
        "extr√™mement", "vraiment", "tellement", "grave",
        "carr√©ment", "compl√®tement", "totalement", "absolument"
    }

    ATTENUATORS = {
        "un peu", "l√©g√®rement", "plut√¥t", "assez", "moyennement",
        "quelque peu", "vaguement", "√† peine"
    }

    # ===== PATTERNS FRAN√áAIS ENRICHIS (PATCH GPT) =====

    EMOTION_PATTERNS = [
        # Patterns de base
        (r"je suis (\w+)", None, 0.1),
        (r"je me sens (\w+)", None, 0.1),
        (r"√ßa me rend (\w+)", None, 0.15),
        (r"√ßa me fait (\w+)", None, 0.1),

        # Patterns sp√©cifiques enrichis (PATCH GPT)
        (r"je (gal√®re|rame|patauge)", "frustration", 0.3),
        (r"j[' ]ai gal√®re", "frustration", 0.3),
        (r"je me sens pas bien", "sadness", 0.4),
        (r"pas bien", "sadness", 0.3),
        (r"√ßa fait du bien", "relief", 0.4),
        (r"je me sens mieux", "better", 0.4),
        (r"√ßa m.rassure", "relief", 0.3),
        (r"(il|elle) a pris mon id√©e", "betrayal", 0.5),
        (r"je suis (mort|crev√©|lessiv√©)", "exhaustion", 0.4),
        (r"je panique|je suis en panique|crise de panique", "panic", 0.5),
        (r"je me sens mal √† l.aise|mal √† l.aise", "discomfort", 0.4),

        # Patterns peur/angoisse
        (r"j'ai peur", "fear", 0.2),
        (r"j'ai la trouille", "fear", 0.3),
        (r"√ßa m'angoisse", "fear", 0.2),

        # Patterns d√©go√ªt/col√®re
        (r"√ßa me d√©go√ªte", "disgust", 0.2),
        (r"√ßa m'√©nerve", "anger", 0.2),
        (r"√ßa me so√ªle", "anger", 0.2),

        # Patterns positifs
        (r"je suis soulag√©", "relief", 0.2),
        (r"ouf", "relief", 0.15),
    ]

    # ===== EMOJI MAPPING =====

    EMOJI_MAP = {
        "üòä": ("joy", 0.1), "üòÉ": ("joy", 0.15), "üòÑ": ("joy", 0.15),
        "üòÅ": ("joy", 0.15), "üéâ": ("joy", 0.2), "ü•≥": ("joy", 0.2),
        "üòç": ("joy", 0.2), "ü§©": ("joy", 0.2),
        "üò¢": ("sadness", 0.2), "üò≠": ("sadness", 0.3), "üòû": ("sadness", 0.15),
        "üòî": ("sadness", 0.15), "üíî": ("sadness", 0.2),
        "üò†": ("anger", 0.2), "üò°": ("anger", 0.3), "ü§¨": ("anger", 0.3),
        "üí¢": ("anger", 0.2),
        "üò±": ("fear", 0.3), "üò∞": ("fear", 0.2), "üò®": ("fear", 0.2),
        "üòÆ": ("surprise", 0.15), "üò≤": ("surprise", 0.2), "ü§Ø": ("surprise", 0.25),
        "ü§¢": ("disgust", 0.2), "ü§Æ": ("disgust", 0.3),
        "üòå": ("relief", 0.15), "üòÖ": ("relief", 0.1),
        "üòÇ": ("amusement", 0.2), "ü§£": ("amusement", 0.25),
    }

    def __init__(self):
        """Initialise le d√©tecteur V3"""
        # Index invers√© pour recherche rapide
        self.word_to_emotions: Dict[str, Set[str]] = {}
        for emotion, words in self.EMOTION_LEXICON.items():
            for word in words:
                if word not in self.word_to_emotions:
                    self.word_to_emotions[word] = set()
                self.word_to_emotions[word].add(emotion)

    def _generate_ngrams(self, text: str) -> Set[str]:
        """
        G√©n√®re les n-grams (1-3) pour d√©tecter expressions compos√©es.
        PATCH GPT Point 2.
        """
        words = re.findall(r"\w+'?\w+|\w+", text.lower())
        ngrams = set()

        # Unigrams, bigrams, trigrams
        for n in (3, 2, 1):
            for i in range(len(words) - n + 1):
                ngram = " ".join(words[i:i+n])
                ngrams.add(ngram)

        return ngrams

    def detect(self, text: str) -> EmotionResult:
        """
        D√©tecte l'√©motion dans un texte - VERSION V3 ENRICHIE.

        Args:
            text: Texte √† analyser

        Returns:
            EmotionResult avec primary, secondary, intensity, cues, scores
        """
        text_lower = text.lower()
        tokens = text_lower.split()

        # G√©n√©rer n-grams (PATCH GPT)
        ngrams = self._generate_ngrams(text)

        # Scores par √©motion
        emotion_scores: Dict[str, float] = {emotion: 0.0 for emotion in self.EMOTION_LEXICON.keys()}
        cues: List[str] = []

        # 1. D√âTECTION LEXICALE (unigrams + n-grams)
        for term in ngrams:
            # Skip stoplist
            if term in self.STOPLIST:
                continue

            # Chercher dans le lexique
            if term in self.word_to_emotions:
                emotions = self.word_to_emotions[term]

                # Bonus pour n-grams (expressions compos√©es)
                is_ngram = " " in term
                bonus = 0.2 if is_ngram else 0.0

                # Fen√™tre de n√©gation (¬±3 tokens) - PATCH GPT Point 4
                # Pour n-grams, prendre le premier mot
                first_word = term.split()[0] if is_ngram else term

                # Trouver l'index dans tokens
                token_idx = -1
                for i, t in enumerate(tokens):
                    if first_word in t:
                        token_idx = i
                        break

                if token_idx >= 0:
                    # Fen√™tre √©largie (avant + apr√®s)
                    win_start = max(0, token_idx - 3)
                    win_end = min(len(tokens), token_idx + 4)
                    window = tokens[win_start:win_end]
                    win_set = set(window)

                    # N√©gation (PATCH GPT Point 4)
                    has_negation = (
                        any(neg in win_set for neg in self.NEGATIONS) or
                        "pas" in " ".join(window)
                    )

                    # Intensificateur
                    has_intensifier = any(intens in win_set for intens in self.INTENSIFIERS)
                    has_attenuator = any(atten in win_set for atten in self.ATTENUATORS)

                    for emotion in emotions:
                        # Score de base
                        score = 1.0 + bonus

                        # Appliquer shifters
                        if has_negation:
                            score *= -0.5
                            cues.append(f"n√©gation: '{term}'")
                        elif has_intensifier:
                            score *= 1.5
                            cues.append(f"intensif: '{term}'")
                        elif has_attenuator:
                            score *= 0.5
                            cues.append(f"att√©nu√©: '{term}'")
                        else:
                            cues.append(f"{'ngram' if is_ngram else 'mot'}: '{term}'")

                        emotion_scores[emotion] += score

        # 2. PATTERNS FRAN√áAIS ENRICHIS
        for pattern, emotion_hint, bonus in self.EMOTION_PATTERNS:
            matches = re.findall(pattern, text_lower)
            if matches:
                if emotion_hint:
                    emotion_scores[emotion_hint] += bonus
                    cues.append(f"pattern: '{pattern}'")
                else:
                    # D√©terminer l'√©motion par le mot captur√©
                    for match in matches:
                        if isinstance(match, tuple):
                            match = match[0]
                        if match in self.word_to_emotions:
                            for emo in self.word_to_emotions[match]:
                                emotion_scores[emo] += bonus
                                cues.append(f"pattern+mot: '{match}'")

        # 3. √âMOJIS
        for emoji, (emotion, bonus) in self.EMOJI_MAP.items():
            if emoji in text:
                emotion_scores[emotion] += bonus
                cues.append(f"emoji: {emoji}")

        # 4. PONCTUATION (PATCH GPT Point 5 - exclamations limit√©es)
        exclamation_count = text.count("!")
        if exclamation_count > 0:
            # Ne booster que les √©motions fortes (PATCH GPT)
            top_score = max(emotion_scores.values()) if emotion_scores else 0
            if top_score > 0:
                for emotion in emotion_scores:
                    if emotion_scores[emotion] >= 0.8 * top_score:
                        # Cap +0.2 maximum
                        bonus = min(0.2, 0.05 * exclamation_count)
                        emotion_scores[emotion] += bonus
            cues.append(f"exclam: {exclamation_count}")

        # CAPS
        caps_count = sum(1 for word in text.split() if word.isupper() and len(word) > 2)
        if caps_count > 0:
            top_score = max(emotion_scores.values()) if emotion_scores else 0
            if top_score > 0:
                for emotion in emotion_scores:
                    if emotion_scores[emotion] >= 0.8 * top_score:
                        emotion_scores[emotion] += min(0.1, caps_count * 0.05)
            cues.append(f"CAPS: {caps_count}")

        # 5. D√âTERMINER PRIMARY & SECONDARY
        sorted_emotions = sorted(emotion_scores.items(), key=lambda x: x[1], reverse=True)

        # PATCH GPT Point 6 : Seuil neutral ajust√© (0.2 au lieu de 0)
        if sorted_emotions[0][1] <= 0.2:
            return EmotionResult(
                primary="neutral",
                secondary=[],
                intensity=0.5,
                cues=cues if cues else ["aucun signal √©motionnel d√©tect√©"],
                scores=emotion_scores
            )

        primary_emotion, primary_score = sorted_emotions[0]

        # Secondary : √©motions avec score > 0.6 * primary_score
        secondary = [
            emotion for emotion, score in sorted_emotions[1:]
            if score > 0.6 * primary_score and score > 0
        ]

        # 6. CALCULER INTENSIT√â
        raw_intensity = primary_score / 10.0
        intensity = 1 / (1 + (2.71828 ** (-raw_intensity)))
        intensity = max(0.15, min(0.95, intensity))

        return EmotionResult(
            primary=primary_emotion,
            secondary=secondary[:2],
            intensity=intensity,
            cues=cues,
            scores=emotion_scores
        )


# ===============================================================================
# TESTS UNITAIRES ENRICHIS (PATCH GPT Point 8)
# ===============================================================================

def test_emotion_detector_v3():
    """Tests enrichis pour V3"""
    detector = EmotionDetectorV3()

    print("üß™ Tests unitaires EmotionDetectorV3...")
    print()

    # Tests de base
    result = detector.detect("Je suis trop content !")
    assert result.primary == "joy", f"Expected joy, got {result.primary}"
    print(f"‚úÖ Test 1 (joie) : {result.primary} @ {result.intensity:.2f}")

    result = detector.detect("Je suis vraiment triste...")
    assert result.primary == "sadness", f"Expected sadness, got {result.primary}"
    print(f"‚úÖ Test 2 (tristesse) : {result.primary} @ {result.intensity:.2f}")

    # TESTS CIBL√âS (PATCH GPT Point 8)
    result = detector.detect("Je gal√®re avec l'auth")
    assert result.primary in ("frustration", "anger"), f"Expected frustration/anger, got {result.primary}"
    print(f"‚úÖ Test 3 (gal√®re‚Üífrustration) : {result.primary} @ {result.intensity:.2f}")

    result = detector.detect("Je me sens pas bien")
    assert result.primary == "sadness", f"Expected sadness, got {result.primary}"
    print(f"‚úÖ Test 4 (pas bien‚Üísadness) : {result.primary} @ {result.intensity:.2f}")

    result = detector.detect("√áa fait du bien")
    assert result.primary in ("relief", "better"), f"Expected relief/better, got {result.primary}"
    print(f"‚úÖ Test 5 (√ßa fait du bien‚Üírelief) : {result.primary} @ {result.intensity:.2f}")

    result = detector.detect("Il a pris mon id√©e")
    assert result.primary == "betrayal", f"Expected betrayal, got {result.primary}"
    print(f"‚úÖ Test 6 (pris mon id√©e‚Üíbetrayal) : {result.primary} @ {result.intensity:.2f}")

    result = detector.detect("JE PANIIIIIQUE !!!")
    assert result.primary == "panic", f"Expected panic, got {result.primary}"
    print(f"‚úÖ Test 7 (panique‚Üípanic) : {result.primary} @ {result.intensity:.2f}")

    result = detector.detect("Je suis lessiv√©")
    assert result.primary == "exhaustion", f"Expected exhaustion, got {result.primary}"
    print(f"‚úÖ Test 8 (lessiv√©‚Üíexhaustion) : {result.primary} @ {result.intensity:.2f}")

    print()
    print("‚úÖ Tous les tests V3 passent !")


if __name__ == "__main__":
    test_emotion_detector_v3()
'''

# Cr√©er le fichier
emotion_detector_v3_file = SRC_DIR / "emotion_detector_v3.py"
with open(emotion_detector_v3_file, 'w', encoding='utf-8') as f:
    f.write(emotion_detector_v3_code)

print(f"‚úÖ Fichier cr√©√© : {emotion_detector_v3_file}")
print()

# ===============================================================================
# √âTAPE 2 : CR√âATION DU SCRIPT D'ANALYSE DES ERREURS (PATCH GPT Point 9)
# ===============================================================================

print("üìù [2/3] Cr√©ation du script d'analyse des erreurs...")
print()

error_analysis_code = '''#!/usr/bin/env python3
"""
JEFFREY OS - Analyse des Erreurs Sprint 1
==========================================

Script pour analyser les erreurs de d√©tection √©motionnelle
et identifier les patterns √† am√©liorer.

PATCH GPT Point 9 : Boucle d'am√©lioration pilot√©e par erreurs
"""

import json
from pathlib import Path
from collections import Counter

# Charger le rapport
report_file = Path("test_results/sprint1_emotion_eval.json")

if not report_file.exists():
    print("‚ùå Rapport non trouv√©. Lance d'abord les tests.")
    exit(1)

with open(report_file, 'r', encoding='utf-8') as f:
    report = json.load(f)

# Extraire les erreurs
samples = report.get("samples", [])
errors = [s for s in samples if s["gold"] != s["pred"]]

print("=" * 80)
print("üìä ANALYSE DES ERREURS - SPRINT 1")
print("=" * 80)
print()
print(f"Total erreurs : {len(errors)} / {len(samples)}")
print()

# Confusions les plus fr√©quentes
confusions = Counter()
for err in errors:
    pair = (err["gold"], err["pred"])
    confusions[pair] += 1

print("üîÄ TOP 10 CONFUSIONS :")
for (gold, pred), count in confusions.most_common(10):
    print(f"   {gold:15s} ‚Üí {pred:15s} : {count} fois")

print()

# Mots-cl√©s des textes mal class√©s
print("üîç TEXTES MAL CLASS√âS (√©chantillon) :")
for err in errors[:10]:
    print(f"\\n   Gold: {err['gold']:15s} ‚Üí Pred: {err['pred']:15s}")
    print(f"   Texte: {err['text'][:100]}...")

print()
print("=" * 80)
print("üí° RECOMMANDATIONS :")
print("   1. Ajouter des mots-cl√©s pour les √©motions confondues")
print("   2. Am√©liorer les patterns pour les expressions fr√©quentes")
print("   3. Relancer les tests apr√®s modifications")
print("=" * 80)
'''

error_analysis_file = TESTS_DIR / "analyze_errors.py"
with open(error_analysis_file, 'w', encoding='utf-8') as f:
    f.write(error_analysis_code)

os.chmod(error_analysis_file, 0o755)

print(f"‚úÖ Fichier cr√©√© : {error_analysis_file}")
print()

# ===============================================================================
# √âTAPE 3 : TESTS ET VALIDATION
# ===============================================================================

print("üß™ [3/3] Tests et validation...")
print()

# Test unitaire V3
print("‚ñ∂Ô∏è  Tests unitaires EmotionDetectorV3...")
env = os.environ.copy()
env['PYTHONPATH'] = str(PROJECT_ROOT / "src")

result = subprocess.run(
    [sys.executable, str(emotion_detector_v3_file)], cwd=PROJECT_ROOT, env=env, capture_output=True, text=True
)

print(result.stdout)
if result.returncode != 0:
    print("‚ö†Ô∏è  Tests unitaires √©chou√©s :")
    print(result.stderr)

print()

# Modifier le runner pour utiliser V3
print("‚ñ∂Ô∏è  Mise √† jour du runner pour utiliser V3...")

runner_file = TESTS_DIR / "runner_convos_sprint1.py"
if runner_file.exists():
    runner_content = runner_file.read_text(encoding='utf-8')
    runner_content = runner_content.replace(
        "from jeffrey.nlp.emotion_detector_v2 import EmotionDetectorV2",
        "from jeffrey.nlp.emotion_detector_v3 import EmotionDetectorV3",
    )
    runner_content = runner_content.replace("EmotionDetectorV2()", "EmotionDetectorV3()")
    runner_file.write_text(runner_content, encoding='utf-8')
    print("‚úÖ Runner mis √† jour pour V3")
else:
    print("‚ö†Ô∏è  Runner non trouv√©, cr√©ation n√©cessaire")

print()

# Lancer les tests complets
print("‚ñ∂Ô∏è  Lancement des tests Sprint 1 avec V3...")
print()

result = subprocess.run(
    [sys.executable, str(runner_file)], cwd=PROJECT_ROOT, env=env, capture_output=True, text=True, timeout=120
)

print(result.stdout)

print()
print("=" * 80)
print("‚úÖ PROMPT 3-TER TERMIN√â !")
print("=" * 80)
print()
print("üìä R√âSULTATS :")
print("   Consulte test_results/sprint1_emotion_eval.json")
print()
print("üîç ANALYSE DES ERREURS :")
print(f"   python3 {error_analysis_file}")
print()
print("üéØ OBJECTIF :")
print("   Si Macro-F1 ‚â• 0.55 ‚Üí Succ√®s Sprint 1 !")
print("   Si Macro-F1 ‚â• 0.70 ‚Üí Pr√™t pour PROMPT 4 (Int√©gration Jeffrey)")
print()
