#!/usr/bin/env python3
"""Test 3 : Cache, performance et circuit breaker"""

import sys
import time

sys.path.insert(0, 'src')

print("üß™ TEST 3 : CACHE, PERFORMANCE & CIRCUIT BREAKER")
print("=" * 70)

from jeffrey.core.orchestration.emotion_engine_bridge import get_emotion_bridge

bridge = get_emotion_bridge()

# ========================================
# TEST CACHE
# ========================================
print("\nüì¶ TEST CACHE (LRU + TTL)")

text = "Je suis heureux ! üéâ"

# Premier appel (cache miss)
start = time.time()
result1 = bridge.analyze_emotion_hybrid(text, {})
time1 = (time.time() - start) * 1000

# Deuxi√®me appel (cache hit)
start = time.time()
result2 = bridge.analyze_emotion_hybrid(text, {})
time2 = (time.time() - start) * 1000

# Troisi√®me appel (cache hit)
start = time.time()
result3 = bridge.analyze_emotion_hybrid(text, {})
time3 = (time.time() - start) * 1000

print(f"‚è±Ô∏è Premier appel (miss) : {time1:.2f}ms")
print(f"‚è±Ô∏è Deuxi√®me appel (hit)  : {time2:.2f}ms")
print(f"‚è±Ô∏è Troisi√®me appel (hit) : {time3:.2f}ms")
print(f"üöÄ Gain de vitesse : {(time1 / max(0.01, time2)):.1f}x")

if result2.get('from_cache') and result3.get('from_cache'):
    print("‚úÖ Cache fonctionne parfaitement")
else:
    print("‚ö†Ô∏è Cache non d√©tect√©")

# ========================================
# TEST PERFORMANCE SOUS CHARGE
# ========================================
print("\n‚ö° TEST PERFORMANCE SOUS CHARGE")

test_texts = ["Je suis content", "C'est triste", "J'ai peur", "Int√©ressant", "Je t'aime"] * 20  # 100 analyses

start_bulk = time.time()
for txt in test_texts:
    bridge.analyze_emotion_hybrid(txt, {})
time_bulk = (time.time() - start_bulk) * 1000

print(f"üìä 100 analyses en {time_bulk:.0f}ms")
print(f"üìä Moyenne : {time_bulk / 100:.1f}ms par analyse")

# ========================================
# M√âTRIQUES FINALES
# ========================================
metrics = bridge.get_emotional_metrics()

print("\nüíæ CACHE STATS :")
print(f"   Taille : {metrics['cache']['size']}/{metrics['cache']['maxsize']}")
print(f"   Hits : {metrics['cache']['hits']}")
print(f"   Misses : {metrics['cache']['misses']}")
print(f"   Hit rate : {metrics['cache']['hit_rate_percent']}%")
print(f"   √âvictions : {metrics['cache']['evictions']}")
print(f"   Expirations : {metrics['cache']['expirations']}")

print("\nüìà PERFORMANCE :")
print(f"   Total : {metrics['performance']['total_analyses']} analyses")
print(f"   Latence moyenne : {metrics['performance']['avg_response_time_ms']}ms")

print("\nüîÑ CIRCUIT BREAKERS :")
for name, cb in metrics['circuit_breakers'].items():
    status = "üî¥ OUVERT" if cb['is_open'] else "üü¢ FERM√â"
    print(f"   {name} : {status} (√©checs totaux: {cb['total_failures']})")

if metrics['cache']['hit_rate_percent'] > 50:
    print("\n‚úÖ TEST 3 R√âUSSI ! Cache et performance excellents.")
else:
    print("\n‚ö†Ô∏è TEST 3 : Hit rate faible (normal si premier run)")
