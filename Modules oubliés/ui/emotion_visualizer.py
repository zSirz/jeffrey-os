#!/usr/bin/env python
"""
emotion_visualizer.py - Visualisation des √©motions pour Jeffrey

Ce module contient la classe EmotionVisualizer qui permet d'afficher visuellement
l'√©tat √©motionnel de Jeffrey en fonction des donn√©es re√ßues du pont √©motionnel.
Il prend en charge les transitions √©motionnelles, les effets d'intensit√©,
et la journalisation de chaque changement.

Sprint 13: Ajout du support pour l'affichage du lien affectif et des
informations de relation entre l'utilisateur et Jeffrey.
"""

import logging
import time
from typing import Any


class EmotionVisualizer:
    def __init__(self, emotion_bridge=None):
        self.logger = logging.getLogger("EmotionVisualizer")
        self.current_emotion = None
        self.intensity = 0
        self.secondary = None
        self.last_update = 0
        self.emotion_bridge = emotion_bridge

        # Lien affectif (Sprint 13)
        self.user_id = "default_user"
        self.trust_level = 0.0
        self.warmth_level = 0.0
        self.proximity_level = 0.0
        self.is_anchor_user = False
        self.emotional_capacity = 1.0
        self.fatigue_level = 0.0
        self.affective_profile_enabled = False

        # Journaliser les changements dans un fichier
        if not self.logger.handlers:
            handler = logging.FileHandler("logs/emotion_visuals.log", mode="a", encoding="utf-8")
            formatter = logging.Formatter("%(asctime)s - %(message)s")
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)

        if self.emotion_bridge:
            try:
                self.emotion_bridge.register_emotion_change_callback(self.render)
                self.logger.info("Visualiseur √©motionnel connect√© au pont √©motionnel.")

                # V√©rifier si le pont √©motionnel supporte les profils affectifs (Sprint 13)
                if hasattr(self.emotion_bridge, "get_affective_profile_summary"):
                    self.affective_profile_enabled = True
                    self.logger.info("Support du profil affectif d√©tect√© et activ√©.")
            except AttributeError:
                self.logger.warning("Pont √©motionnel ne supporte pas les callbacks.")

    def render(self, emotion: str, intensity: float = 0.5, secondary: str | None = None):
        """
        Affiche une repr√©sentation visuelle de l‚Äô√©motion principale re√ßue.
        """
        self.current_emotion = emotion
        self.intensity = intensity
        self.secondary = secondary
        self.last_update = time.time()

        display = self._generate_display(emotion, intensity, secondary)
        print(f"{time.strftime('%H:%M:%S')} - {display}")
        self.logger.info(f"√âmotion affich√©e : {emotion} (intensit√© {intensity:.2f}, secondaire={secondary})")

    def _generate_display(self, emotion: str, intensity: float, secondary: str | None) -> str:
        """
        G√©n√®re une repr√©sentation textuelle stylis√©e de l'√©motion.
        """
        bar = "‚ñà" * int(intensity * 20)
        sec = f" ({secondary})" if secondary else ""
        return f"[{emotion.upper()}{sec}] {bar}"

    def summarize_last_emotion(self) -> str:
        """
        Retourne un r√©sum√© de la derni√®re √©motion affich√©e.

        Returns:
            str: R√©sum√© de la derni√®re √©motion
        """
        # Version standard
        emotion_summary = f"{self.current_emotion} (intensit√©={self.intensity:.2f}, secondaire={self.secondary})"

        # Ajouter les informations de lien affectif si disponibles (Sprint 13)
        if self.affective_profile_enabled:
            bond_level = self.trust_level * 0.35 + self.warmth_level * 0.35 + self.proximity_level * 0.3
            bond_info = f", lien affectif={bond_level:.2f}"

            # Ajouter les indicateurs d'√©tat
            if self.is_anchor_user:
                bond_info += " ‚öì"
            if self.fatigue_level > 0.5:
                bond_info += " üò¥"

            return emotion_summary + bond_info

        return emotion_summary

    def _update_affective_profile(self) -> None:
        """
        Met √† jour les informations de profil affectif depuis le pont √©motionnel.
        """
        if not self.affective_profile_enabled or not self.emotion_bridge:
            return

        try:
            # R√©cup√©rer le r√©sum√© du profil affectif
            profile = self.emotion_bridge.get_affective_profile_summary(self.user_id)

            if isinstance(profile, dict) and "error" in profile:
                self.logger.warning(f"Erreur lors de la r√©cup√©ration du profil affectif: {profile['error']}")
                return

            # Mettre √† jour les propri√©t√©s
            self.trust_level = profile.get("affective_bond", {}).get("trust", 0.0)
            self.warmth_level = profile.get("affective_bond", {}).get("warmth", 0.0)
            self.proximity_level = profile.get("affective_bond", {}).get("proximity", 0.0)
            self.is_anchor_user = profile.get("anchor_status", {}).get("is_anchor", False)

            # √âtat √©motionnel
            self.emotional_capacity = profile.get("emotional_state", {}).get("capacity", 1.0)
            self.fatigue_level = profile.get("emotional_state", {}).get("fatigue", 0.0)

            self.logger.info(f"Profil affectif mis √† jour pour l'utilisateur: {self.user_id}")

        except Exception as e:
            self.logger.warning(f"Erreur lors de la mise √† jour du profil affectif: {e}")

    def _generate_affective_display(self) -> str:
        """
        G√©n√®re une repr√©sentation visuelle du lien affectif.

        Returns:
            str: Repr√©sentation textuelle du lien affectif
        """
        trust_bar = "‚ô•" * int(self.trust_level * 10)
        warmth_bar = "‚òÄ" * int(self.warmth_level * 10)
        proximity_bar = "‚åò" * int(self.proximity_level * 10)

        # Ic√¥ne sp√©ciale pour les utilisateurs d'ancrage
        anchor_icon = "‚öì " if self.is_anchor_user else ""

        # Indicateur de fatigue ou saturation
        state_icon = ""
        if self.fatigue_level > 0.5:
            state_icon = "üò¥ "  # Fatigu√©
        elif self.emotional_capacity < 0.3:
            state_icon = "üîã "  # Batterie faible

        return (
            f"\n{anchor_icon}Lien affectif avec {self.user_id}:\n"
            f"  Confiance: [{trust_bar.ljust(10)}] {self.trust_level:.2f}\n"
            f"  Chaleur:   [{warmth_bar.ljust(10)}] {self.warmth_level:.2f}\n"
            f"  Proximit√©: [{proximity_bar.ljust(10)}] {self.proximity_level:.2f}\n"
            f"  √âtat: {state_icon}{self._get_bond_description()}\n"
        )

    def _get_bond_description(self) -> str:
        """
        Retourne une description du lien affectif actuel.

        Returns:
            str: Description textuelle du lien
        """
        # Calculer le niveau global de lien
        bond_level = self.trust_level * 0.35 + self.warmth_level * 0.35 + self.proximity_level * 0.3

        if bond_level > 0.8:
            return "Lien profond et confiant"
        elif bond_level > 0.6:
            return "Forte connexion affective"
        elif bond_level > 0.4:
            return "Relation positive en d√©veloppement"
        elif bond_level > 0.2:
            return "Premiers signes d'attachement"
        else:
            return "Relation neutre ou r√©cente"

    def get_affective_bond_summary(self) -> dict[str, Any]:
        """
        Retourne un r√©sum√© du lien affectif actuel.

        Returns:
            Dict: R√©sum√© du lien affectif
        """
        # Mise √† jour des donn√©es si possible
        if self.emotion_bridge and self.affective_profile_enabled:
            self._update_affective_profile()

        # Calculer le niveau global de lien
        bond_level = self.trust_level * 0.35 + self.warmth_level * 0.35 + self.proximity_level * 0.3

        return {
            "user_id": self.user_id,
            "trust_level": self.trust_level,
            "warmth_level": self.warmth_level,
            "proximity_level": self.proximity_level,
            "global_bond": bond_level,
            "is_anchor_user": self.is_anchor_user,
            "emotional_capacity": self.emotional_capacity,
            "fatigue_level": self.fatigue_level,
            "description": self._get_bond_description(),
        }

    def display_affective_bond(self, user_id: str = None) -> None:
        """
        Affiche le lien affectif pour un utilisateur sp√©cifique.

        Args:
            user_id: Identifiant de l'utilisateur (optionnel, utilise l'actuel par d√©faut)
        """
        if not self.affective_profile_enabled:
            print("Lien affectif non disponible - profil affectif d√©sactiv√©.")
            return

        # Mettre √† jour l'ID utilisateur si fourni
        if user_id:
            self.user_id = user_id

        # Mettre √† jour le profil
        self._update_affective_profile()

        # Afficher le lien
        print(self._generate_affective_display())
