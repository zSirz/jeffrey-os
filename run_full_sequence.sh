#!/usr/bin/env bash

# === GARDE-FOUS (GPT/Marc) ===
set -euo pipefail
trap 'echo "‚ùå √âchec √† la ligne $LINENO - Voir boot.log pour d√©tails"' ERR

[ -d .git ] && [ -d src/jeffrey ] || { echo "‚ùå Lance depuis la racine du repo"; exit 1; }

export PYTHONUTF8=1

echo "üöÄ S√âQUENCE COMPL√àTE DE RESTAURATION JEFFREY OS"
echo "==============================================="
echo ""

# PHASE 1 : CHECKPOINT
echo "üìå PHASE 1 : Checkpoint Git"
echo "----------------------------"
git checkout -b chore/pre-boot-codemod 2>/dev/null || git checkout chore/pre-boot-codemod
git add -A
git commit -m "chore: checkpoint avant corrections pr√©-boot" 2>/dev/null || echo "‚è≠Ô∏è  Aucun changement √† committer"
echo "‚úÖ Checkpoint cr√©√©"
echo ""

# PHASE 2 : CORRECTIONS IMPORTS
echo "üîß PHASE 2 : Correction des imports"
echo "------------------------------------"
python3 fix_core_imports_complete.py
git add -A
git commit -m "fix(imports): Correction from core. ‚Üí from jeffrey.core." 2>/dev/null || echo "‚è≠Ô∏è  Aucun changement"
echo "‚úÖ Imports corrig√©s"
echo ""

# PHASE 3 : PRE-COMMIT
echo "üì¶ PHASE 3 : Migration pre-commit"
echo "----------------------------------"
pre-commit migrate-config 2>/dev/null || echo "‚è≠Ô∏è  D√©j√† migr√©"
git add .pre-commit-config.yaml
git commit -m "chore(pre-commit): migration config" 2>/dev/null || echo "‚è≠Ô∏è  Aucun changement"
echo "‚úÖ Pre-commit configur√©"
echo ""

# PHASE 4 : VALIDATION
echo "üîí PHASE 4 : Validation stricte"
echo "--------------------------------"
RESTORE_MODE=1 bash validate_strict.sh
echo "‚úÖ Validation pass√©e"
echo ""

# PHASE 5 : TEST BOOT
echo "üß™ PHASE 5 : Test de d√©marrage"
echo "-------------------------------"
bash test_boot_complete.sh
echo "‚úÖ Tests ex√©cut√©s"
echo ""

# PHASE 6 : ANALYSE
echo "üîç PHASE 6 : Analyse intelligente"
echo "----------------------------------"
python3 analyze_boot_errors.py
echo "‚úÖ Analyse termin√©e"
echo ""

# PHASE 7 : RAPPORT
echo "üìä PHASE 7 : Consultation du rapport"
echo "-------------------------------------"
echo ""
if [ -f "BOOT_ANALYSIS.md" ]; then
    echo "üìñ Rapport complet dans : BOOT_ANALYSIS.md"
    echo ""
    echo "üéØ TOP 3 ACTIONS RECOMMAND√âES :"
    echo "--------------------------------"
    grep -A 3 "^### 1\." BOOT_ANALYSIS.md || echo "Voir BOOT_ANALYSIS.md"
    echo ""
    grep -A 3 "^### 2\." BOOT_ANALYSIS.md || echo ""
    echo ""
    grep -A 3 "^### 3\." BOOT_ANALYSIS.md || echo ""
else
    echo "‚ùå Rapport non g√©n√©r√©"
fi

echo ""
echo "‚úÖ S√âQUENCE COMPL√àTE TERMIN√âE"
echo "=============================="
echo ""
echo "üéØ PROCHAINE √âTAPE :"
echo "1. Consulter BOOT_ANALYSIS.md"
echo "2. Appliquer l'action Priorit√© N¬∞1"
echo "3. Relancer : bash test_boot_complete.sh"
echo "4. R√©-analyser : python3 analyze_boot_errors.py"
echo "5. R√©p√©ter jusqu'√† boot OK ‚úÖ"
echo ""
echo "üìñ Rappel Doctrine Gemini (La R√®gle des Trois) :"
echo "   1. Prioriser : Focus sur le N¬∞1"
echo "   2. Isoler : Une branche par fix"
echo "   3. Valider : Re-tester apr√®s chaque fix"
