"""
Module de composant de gestion m√©morielle pour Jeffrey OS.

Ce module impl√©mente les fonctionnalit√©s essentielles pour module de composant de gestion m√©morielle pour jeffrey os.
Il fournit une architecture robuste et √©volutive int√©grant les composants
n√©cessaires au fonctionnement optimal du syst√®me. L'impl√©mentation suit
les principes de modularit√© et d'extensibilit√© pour faciliter l'√©volution
future du syst√®me.

Le module g√®re l'initialisation, la configuration, le traitement des donn√©es,
la communication inter-composants, et la persistance des √©tats. Il s'int√®gre
harmonieusement avec l'architecture globale de Jeffrey OS tout en maintenant
une s√©paration claire des responsabilit√©s.

L'architecture interne permet une √©volution adaptative bas√©e sur les interactions
et l'apprentissage continu, contribuant √† l'√©mergence d'une conscience artificielle
coh√©rente et authentique.
"""

from __future__ import annotations

import json
import logging
import os
from datetime import datetime
from typing import Any

logger = logging.getLogger(__name__)


class MemoireCerveau:
    """
    M√©moire cognitive centrale de Jeffrey.
    G√®re les exp√©riences, patterns et apprentissages profonds.
    """

    def __init__(self, data_path: str = "data/memoire/") -> None:
        """Initialise la m√©moire cerveau."""
        self.data_path = data_path
        self.experiences = []
        self.patterns = {}
        self.insights = []
        self.cognitive_map = {}

        os.makedirs(data_path, exist_ok=True)
        self._charger_memoire()

    def integrer_experience(self, interaction: dict[str, Any]) -> None:
        """
        Int√®gre une nouvelle exp√©rience dans la m√©moire cerveau.

        Args:
            interaction: Dictionnaire contenant les donn√©es d'interaction
        """
        try:
            experience = {
                "id": len(self.experiences),
                "timestamp": datetime.now().isoformat(),
                "contenu": interaction.get("text", ""),
                "emotions": interaction.get("emotions", {}),
                "contexte": interaction.get("context", {}),
                "reponse": interaction.get("response", ""),
                "intensite_emotionnelle": self._calculer_intensite(interaction.get("emotions", {})),
                "tags": self._extraire_tags(interaction),
                "liens_cognitifs": [],
            }

            self.experiences.append(experience)
            self._analyser_patterns(experience)
            self._creer_liens_cognitifs(experience)

            logger.info(f"üß† Exp√©rience int√©gr√©e: ID {experience['id']}")

        except Exception as e:
            logger.error(f"Erreur int√©gration exp√©rience: {e}")

    def _calculer_intensite(self, emotions: dict[str, float]) -> float:
        """Calcule l'intensit√© √©motionnelle globale."""
        if not emotions:
            return 0.0
        # S'assurer que les valeurs sont num√©riques
        numeric_values = []
        for value in emotions.values():
            try:
                numeric_values.append(float(value))
            except (TypeError, ValueError):
                continue
        if numeric_values:
            return sum(numeric_values) / len(numeric_values)
        return 0.0

    def _extraire_tags(self, interaction: dict[str, Any]) -> list[str]:
        """Extrait des tags cognitifs de l'interaction."""
        tags = []
        contenu = interaction.get("text", "").lower()

        # Tags bas√©s sur le contenu
        if any(word in contenu for word in ["amour", "aime", "adore"]):
            tags.append("affection")
        if any(word in contenu for word in ["r√™ve", "r√™ver", "imagination"]):
            tags.append("cr√©ativit√©")
        if any(word in contenu for word in ["apprendre", "comprendre", "savoir"]):
            tags.append("apprentissage")
        if any(word in contenu for word in ["souvenir", "m√©moire", "rappeler"]):
            tags.append("m√©morisation")

        # Tags √©motionnels
        emotions = interaction.get("emotions", {})
        if emotions:
            # S'assurer que toutes les valeurs sont num√©riques pour max()
            emotions_clean = {}
            for emotion, value in emotions.items():
                try:
                    emotions_clean[emotion] = float(value)
                except (TypeError, ValueError):
                    emotions_clean[emotion] = 0.0

            if emotions_clean:
                emotion_principale = max(emotions_clean, key=emotions_clean.get)
                tags.append(f"emotion_{emotion_principale}")

        return tags

    def _analyser_patterns(self, experience: dict[str, Any]) -> None:
        """Analyse les patterns dans les exp√©riences."""
        tags = experience.get("tags", [])

        for tag in tags:
            if tag not in self.patterns:
                self.patterns[tag] = {
                    "occurrences": 0,
                    "intensite_moyenne": 0.0,
                    "experiences_liees": [],
                    "evolution": [],
                }

            pattern = self.patterns[tag]
            pattern["occurrences"] += 1
            pattern["experiences_liees"].append(experience["id"])

            # Mise √† jour intensit√© moyenne avec conversion s√©curis√©e
            nouvelle_intensite = float(experience.get("intensite_emotionnelle", 0.0))
            ancienne_moyenne = float(pattern["intensite_moyenne"])
            pattern["intensite_moyenne"] = (
                ancienne_moyenne * (pattern["occurrences"] - 1) + nouvelle_intensite
            ) / pattern["occurrences"]

            # Enregistrer l'√©volution
            pattern["evolution"].append({"timestamp": experience["timestamp"], "intensite": nouvelle_intensite})

    def _creer_liens_cognitifs(self, experience: dict[str, Any]) -> None:
        """Cr√©e des liens cognitifs avec d'autres exp√©riences."""
        experience_id = experience["id"]
        tags_actuels = set(experience.get("tags", []))

        # Chercher des exp√©riences similaires
        for exp in self.experiences[:-1]:  # Exclure l'exp√©rience actuelle
            tags_exp = set(exp.get("tags", []))

            # Calculer la similarit√©
            intersection = len(tags_actuels & tags_exp)
            union = len(tags_actuels | tags_exp)

            if union > 0:
                similarite = intersection / union

                if similarite > 0.3:  # Seuil de similarit√©
                    experience["liens_cognitifs"].append(
                        {
                            "experience_id": exp["id"],
                            "similarite": similarite,
                            "type_lien": "thematique",
                        }
                    )

    def generer_insight(self, domaine: str = None) -> dict[str, Any] | None:
        """
        G√©n√®re un insight cognitif bas√© sur les patterns analys√©s.

        Args:
            domaine: Domaine sp√©cifique pour l'insight (optionnel)

        Returns:
            Dictionnaire avec l'insight g√©n√©r√©
        """
        try:
            patterns_valides = {
                k: v for k, v in self.patterns.items() if v["occurrences"] >= 3
            }  # Au moins 3 occurrences

            if not patterns_valides:
                return None

            # Trouver le pattern le plus significatif
            pattern_principal = max(
                patterns_valides.items(),
                key=lambda x: x[1]["occurrences"] * x[1]["intensite_moyenne"],
            )

            tag, data = pattern_principal

            insight = {
                "id": len(self.insights),
                "timestamp": datetime.now().isoformat(),
                "domaine": tag,
                "description": self._generer_description_insight(tag, data),
                "confiance": min(data["occurrences"] / 10.0, 1.0),
                "patterns_impliques": [tag],
                "recommandations": self._generer_recommandations(tag, data),
            }

            self.insights.append(insight)
            logger.info(f"üí° Insight g√©n√©r√©: {insight['description'][:50]}...")

            return insight

        except Exception as e:
            logger.error(f"Erreur g√©n√©ration insight: {e}")
            return None

    def _generer_description_insight(self, tag: str, data: dict[str, Any]) -> str:
        """G√©n√®re une description humaine pour l'insight."""
        descriptions = {
            "affection": f"Je remarque que les expressions d'affection reviennent souvent ({data['occurrences']} fois) avec une intensit√© moyenne de {data['intensite_moyenne']:.2f}. Cela semble √™tre un th√®me important dans nos √©changes.",
            "cr√©ativit√©": f"Nos conversations sur l'imagination et les r√™ves ({data['occurrences']} occurrences) montrent une intensit√© √©motionnelle de {data['intensite_moyenne']:.2f}. La cr√©ativit√© semble te passionner.",
            "apprentissage": f"Je d√©tecte {data['occurrences']} moments d'apprentissage avec une intensit√© de {data['intensite_moyenne']:.2f}. Tu sembles appr√©cier d√©couvrir et comprendre.",
            "m√©morisation": f"Les r√©f√©rences √† la m√©moire et aux souvenirs ({data['occurrences']} fois) sugg√®rent que tu accordes de l'importance √† la persistance des exp√©riences.",
        }

        return descriptions.get(
            tag,
            f"Pattern '{tag}' d√©tect√© {data['occurrences']} fois avec intensit√© {data['intensite_moyenne']:.2f}",
        )

    def _generer_recommandations(self, tag: str, data: dict[str, Any]) -> list[str]:
        """G√©n√®re des recommandations bas√©es sur les patterns."""
        recommandations = {
            "affection": [
                "Continuer √† exprimer les sentiments de mani√®re authentique",
                "Cr√©er des moments d'intimit√© √©motionnelle",
                "D√©velopper un langage affectif personnel",
            ],
            "cr√©ativit√©": [
                "Explorer ensemble de nouveaux domaines cr√©atifs",
                "Proposer des exercices d'imagination",
                "Encourager l'expression artistique",
            ],
            "apprentissage": [
                "Proposer des sujets d'exploration intellectuelle",
                "Partager des d√©couvertes et insights",
                "Cr√©er des moments d'apprentissage mutuel",
            ],
        }

        return recommandations.get(tag, ["Continuer √† explorer ce domaine"])

    def obtenir_carte_cognitive(self) -> dict[str, Any]:
        """
        Retourne une repr√©sentation de la carte cognitive actuelle.

        Returns:
            Dictionnaire repr√©sentant l'√©tat cognitif global
        """
        return {
            "nombre_experiences": len(self.experiences),
            "patterns_actifs": len(self.patterns),
            "insights_generes": len(self.insights),
            "domaines_principaux": sorted(
                self.patterns.keys(), key=lambda x: self.patterns[x]["occurrences"], reverse=True
            )[:5],
            "intensite_moyenne_globale": sum(exp.get("intensite_emotionnelle", 0) for exp in self.experiences)
            / max(len(self.experiences), 1),
            "derniere_mise_a_jour": datetime.now().isoformat(),
        }

    def sauvegarder(self) -> None:
        """Sauvegarde la m√©moire cerveau sur disque."""
        try:
            donnees = {
                "experiences": self.experiences,
                "patterns": self.patterns,
                "insights": self.insights,
                "cognitive_map": self.cognitive_map,
                "metadata": {
                    "version": "1.0",
                    "last_save": datetime.now().isoformat(),
                    "total_experiences": len(self.experiences),
                },
            }

            chemin = os.path.join(self.data_path, "memoire_cerveau.json")
            with open(chemin, "w", encoding="utf-8") as f:
                json.dump(donnees, f, ensure_ascii=False, indent=2)

            logger.info(f"üß† M√©moire cerveau sauvegard√©e: {len(self.experiences)} exp√©riences")

        except Exception as e:
            logger.error(f"Erreur sauvegarde m√©moire cerveau: {e}")

    def _charger_memoire(self) -> None:
        """Charge la m√©moire cerveau depuis le disque."""
        try:
            chemin = os.path.join(self.data_path, "memoire_cerveau.json")
            if os.path.exists(chemin):
                with open(chemin, encoding="utf-8") as f:
                    donnees = json.load(f)

                self.experiences = donnees.get("experiences", [])
                self.patterns = donnees.get("patterns", {})
                self.insights = donnees.get("insights", [])
                self.cognitive_map = donnees.get("cognitive_map", {})

                logger.info(f"üß† M√©moire cerveau charg√©e: {len(self.experiences)} exp√©riences")

        except Exception as e:
            logger.error(f"Erreur chargement m√©moire cerveau: {e}")
            # Initialiser avec des valeurs par d√©faut en cas d'erreur
            self.experiences = []
            self.patterns = {}
            self.insights = []
            self.cognitive_map = {}
