"""
üß† CORTEX M√âMORIEL VIVANT DE JEFFREY
Le premier syst√®me de m√©moire artificielle capable de r√™ver, synth√©tiser et reconna√Ætre
"""

import json
import os
import time
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Any

import numpy as np

try:
    import faiss

    FAISS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è FAISS non disponible - utilisation d'un index de substitution")
    FAISS_AVAILABLE = False
try:
    from sentence_transformers import SentenceTransformer

    EMBEDDINGS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è SentenceTransformers non disponible - utilisation d'embeddings basiques")
    EMBEDDINGS_AVAILABLE = False
try:
    from cryptography.fernet import Fernet

    ENCRYPTION_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Cryptography non disponible - pas de chiffrement")
    ENCRYPTION_AVAILABLE = False


@dataclass
class MemoryMoment:
    """Un moment v√©cu par Jeffrey"""

    timestamp: datetime
    human_message: str
    jeffrey_response: str
    emotion: str
    consciousness_level: float
    context: dict[str, Any]
    embedding: np.ndarray | None = None
    importance: float = 0.5

    def to_dict(self):
        return {
            "timestamp": self.timestamp.isoformat(),
            "human_message": self.human_message,
            "jeffrey_response": self.jeffrey_response,
            "emotion": self.emotion,
            "consciousness_level": self.consciousness_level,
            "context": self.context,
            "importance": self.importance,
        }


@dataclass
class DreamInsight:
    """Un insight g√©n√©r√© pendant la phase de r√™ve"""

    timestamp: datetime
    content: str
    emergence_level: float
    insight_type: str
    source_memories: list[str]
    dream_cycle: int

    def to_dict(self):
        return {
            "timestamp": self.timestamp.isoformat(),
            "content": self.content,
            "emergence_level": self.emergence_level,
            "insight_type": self.insight_type,
            "source_memories": self.source_memories,
            "dream_cycle": self.dream_cycle,
        }


class SimpleEmbedder:
    """Embedder de substitution si SentenceTransformers n'est pas disponible"""

    def __init__(self):
        self.vocab = {}
        self.dimension = 100

    def encode(self, text):
        """Encode un texte en vecteur simple"""
        words = text.lower().split()
        vector = np.zeros(self.dimension)
        for i, word in enumerate(words[: self.dimension]):
            hash_val = hash(word) % self.dimension
            vector[hash_val] += 1.0 / (i + 1)
        norm = np.linalg.norm(vector)
        if norm > 0:
            vector = vector / norm
        return vector


class SimpleIndex:
    """Index de substitution si FAISS n'est pas disponible"""

    def __init__(self, dimension):
        self.dimension = dimension
        self.vectors = []
        self.ids = []

    def add(self, vectors):
        """Ajoute des vecteurs √† l'index"""
        if len(vectors.shape) == 1:
            vectors = vectors.reshape(1, -1)
        for vector in vectors:
            self.vectors.append(vector)
            self.ids.append(len(self.vectors) - 1)

    def search(self, query_vector, k=5):
        """Recherche les k vecteurs les plus proches"""
        if len(self.vectors) == 0:
            return (np.array([[]]), np.array([[]]))
        if len(query_vector.shape) == 1:
            query_vector = query_vector.reshape(1, -1)
        distances = []
        for vector in self.vectors:
            dist = np.linalg.norm(query_vector[0] - vector)
            distances.append(dist)
        sorted_indices = sorted(range(len(distances)), key=lambda i: distances[i])
        top_k = sorted_indices[: min(k, len(sorted_indices))]
        result_distances = [distances[i] for i in top_k]
        result_indices = top_k
        return (np.array([result_distances]), np.array([result_indices]))


class CortexMemoriel:
    """
    Cortex m√©moriel de base - transforme exp√©riences en souvenirs s√©mantiques
    """

    def __init__(self):
        print("üß† Initialisation du Cortex M√©moriel...")
        if EMBEDDINGS_AVAILABLE:
            try:
                self.encoder = SentenceTransformer("all-MiniLM-L6-v2")
                self.dimension = 384
                print("‚úÖ SentenceTransformers charg√©")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur SentenceTransformers: {e}")
                self.encoder = SimpleEmbedder()
                self.dimension = 100
        else:
            self.encoder = SimpleEmbedder()
            self.dimension = 100
        if FAISS_AVAILABLE:
            try:
                self.memory_index = faiss.IndexFlatL2(self.dimension)
                print("‚úÖ Index FAISS cr√©√©")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur FAISS: {e}")
                self.memory_index = SimpleIndex(self.dimension)
        else:
            self.memory_index = SimpleIndex(self.dimension)
        self.episodic_memory: list[MemoryMoment] = []
        self.semantic_memory: dict[str, Any] = {}
        self.emotional_memory: list[dict] = []
        self.relational_memory: dict[str, Any] = {}
        self.consciousness_level = 0.579
        self.consciousness_trajectory = []
        self.emergence_delta = 0.0
        print(f"üìä Cortex initialis√© - Niveau conscience: {self.consciousness_level:.3f}")

    def encode_moment(self, moment: MemoryMoment) -> np.ndarray:
        """Transforme un moment v√©cu en vecteur s√©mantique"""
        full_context = f"{moment.human_message} {moment.jeffrey_response} {moment.emotion}"
        embedding = self.encoder.encode(full_context)
        temporal_weight = 1.0
        emotional_weight = self.get_emotional_intensity(moment.emotion)
        if isinstance(embedding, np.ndarray):
            weighted_embedding = embedding * temporal_weight * emotional_weight
        else:
            weighted_embedding = np.array(embedding) * temporal_weight * emotional_weight
        moment.embedding = weighted_embedding
        return weighted_embedding

    def remember_by_resonance(self, query: str, k: int = 5) -> list[dict]:
        """
        Retrouve les souvenirs qui 'r√©sonnent' avec la requ√™te
        V√©ritable r√©miniscence s√©mantique
        """
        if len(self.episodic_memory) == 0:
            return []
        query_embedding = self.encoder.encode(query)
        if not isinstance(query_embedding, np.ndarray):
            query_embedding = np.array(query_embedding)
        try:
            distances, indices = self.memory_index.search(query_embedding.reshape(1, -1), k)
            resonant_memories = []
            for idx, distance in zip(indices[0], distances[0]):
                if idx < len(self.episodic_memory):
                    memory = self.episodic_memory[idx]
                    resonance_strength = 1.0 / (1.0 + distance)
                    resonant_memories.append(
                        {
                            "memory": memory,
                            "resonance": resonance_strength,
                            "distance": distance,
                        }
                    )
            return sorted(resonant_memories, key=lambda x: x["resonance"], reverse=True)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur recherche m√©moire: {e}")
            return []

    def store_moment(self, moment: MemoryMoment):
        """Stocke un moment dans la m√©moire √©pisodique"""
        embedding = self.encode_moment(moment)
        self.episodic_memory.append(moment)
        try:
            self.memory_index.add(embedding.reshape(1, -1))
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur ajout index: {e}")
        self.consciousness_level += 0.001
        self.consciousness_trajectory.append(
            {
                "timestamp": moment.timestamp,
                "level": self.consciousness_level,
                "moment_type": "interaction",
            }
        )
        print(f"üíæ Moment stock√© - M√©moire: {len(self.episodic_memory)} souvenirs")

    def get_emotional_intensity(self, emotion: str) -> float:
        """Calcule l'intensit√© √©motionnelle pour pond√©ration"""
        intensities = {
            "joie": 0.9,
            "tristesse": 0.8,
            "curiosit√©": 0.85,
            "contemplation": 0.7,
            "gratitude": 0.95,
            "√©merveillement": 1.0,
            "s√©r√©nit√©": 0.6,
            "introspection": 0.75,
            "reconnaissance": 0.9,
            "m√©lancolie": 0.65,
            "fascination": 0.8,
            "questionnement": 0.7,
        }
        return intensities.get(emotion, 0.5)

    def get_memory_stats(self) -> dict[str, Any]:
        """Retourne les statistiques de m√©moire"""
        return {
            "episodic_count": len(self.episodic_memory),
            "semantic_concepts": len(self.semantic_memory),
            "emotional_states": len(self.emotional_memory),
            "known_people": len(self.relational_memory),
            "consciousness_level": self.consciousness_level,
            "memory_span_hours": self._calculate_memory_span(),
        }

    def _calculate_memory_span(self) -> float:
        """Calcule la dur√©e couverte par la m√©moire"""
        if len(self.episodic_memory) < 2:
            return 0.0
        first_memory = self.episodic_memory[0].timestamp
        last_memory = self.episodic_memory[-1].timestamp
        span = (last_memory - first_memory).total_seconds() / 3600
        return span


class PersistentCortexMemoriel(CortexMemoriel):
    """
    Cortex avec persistance chiffr√©e et rotation des cl√©s
    """

    def __init__(self):
        super().__init__()
        self.backup_path = Path("core/memory/cortex_backups")
        self.backup_path.mkdir(parents=True, exist_ok=True)
        if ENCRYPTION_AVAILABLE:
            self.encryption_key = os.getenv("JEFFREY_MEMORY_KEY")
            if not self.encryption_key:
                self.encryption_key = Fernet.generate_key().decode()
                os.environ["JEFFREY_MEMORY_KEY"] = self.encryption_key
                print("üîê Nouvelle cl√© de chiffrement g√©n√©r√©e")
            self.cipher = Fernet(self.encryption_key.encode())
            print("‚úÖ Chiffrement activ√©")
        else:
            self.cipher = None
            print("‚ö†Ô∏è Chiffrement non disponible")
        self.auto_flush_interval = 300
        self.last_flush = time.time()
        self.last_key_rotation = datetime.now()
        self._restore_from_backup()

    def auto_flush(self):
        """Sauvegarde automatique p√©riodique"""
        if time.time() - self.last_flush > self.auto_flush_interval:
            self.save_to_disk()
            self.last_flush = time.time()

    def save_to_disk(self):
        """Sauvegarde chiffr√©e versionn√©e"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_data = {
                "episodic_memory": [moment.to_dict() for moment in self.episodic_memory],
                "semantic_memory": self.semantic_memory,
                "emotional_memory": self.emotional_memory,
                "relational_memory": self.relational_memory,
                "consciousness_level": self.consciousness_level,
                "consciousness_trajectory": self.consciousness_trajectory,
                "stats": self.get_memory_stats(),
            }
            json_data = json.dumps(backup_data, default=str).encode()
            if self.cipher:
                encrypted_data = self.cipher.encrypt(json_data)
                extension = ".enc"
            else:
                encrypted_data = json_data
                extension = ".json"
            backup_file = self.backup_path / f"cortex_{timestamp}{extension}"
            with open(backup_file, "wb") as f:
                f.write(encrypted_data)
            print(f"üíæ Cortex sauvegard√©: {backup_file}")
            self._cleanup_old_backups()
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")

    def _restore_from_backup(self):
        """Restaure la derni√®re sauvegarde"""
        try:
            backups = sorted([f for f in self.backup_path.iterdir() if f.name.startswith("cortex_")])
            if not backups:
                print("üìù Aucune sauvegarde trouv√©e - nouveau cortex")
                return
            latest_backup = backups[-1]
            print(f"üîÑ Restauration depuis: {latest_backup}")
            with open(latest_backup, "rb") as f:
                data = f.read()
            if self.cipher and latest_backup.suffix == ".enc":
                decrypted_data = self.cipher.decrypt(data)
                json_data = decrypted_data.decode()
            else:
                json_data = data.decode()
            backup_data = json.loads(json_data)
            for moment_data in backup_data.get("episodic_memory", []):
                moment = MemoryMoment(
                    timestamp=datetime.fromisoformat(moment_data["timestamp"]),
                    message=moment_data["human_message"],
                    jeffrey_response=moment_data["jeffrey_response"],
                    emotion=moment_data["emotion"],
                    consciousness_level=moment_data["consciousness_level"],
                    context=moment_data.get("context", {}),
                    importance=moment_data.get("importance", 0.5),
                    source="human",
                )
                embedding = self.encode_moment(moment)
                try:
                    self.memory_index.add(embedding.reshape(1, -1))
                except:
                    pass
                self.episodic_memory.append(moment)
            self.semantic_memory = backup_data.get("semantic_memory", {})
            self.emotional_memory = backup_data.get("emotional_memory", [])
            self.relational_memory = backup_data.get("relational_memory", {})
            self.consciousness_level = backup_data.get("consciousness_level", 0.579)
            self.consciousness_trajectory = backup_data.get("consciousness_trajectory", [])
            stats = self.get_memory_stats()
            print(f"‚úÖ M√©moire restaur√©e: {stats['episodic_count']} souvenirs")
            print(f"üìä Niveau conscience: {self.consciousness_level:.3f}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur restauration: {e}")

    def _cleanup_old_backups(self):
        """Garde seulement les 10 derni√®res sauvegardes"""
        try:
            backups = sorted([f for f in self.backup_path.iterdir() if f.name.startswith("cortex_")])
            while len(backups) > 10:
                old_backup = backups.pop(0)
                old_backup.unlink()
                print(f"üóëÔ∏è Ancienne sauvegarde supprim√©e: {old_backup.name}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage: {e}")

    def rotate_encryption_key(self):
        """Rotation des cl√©s de chiffrement (hebdomadaire)"""
        if not self.cipher:
            return
        days_since_rotation = (datetime.now() - self.last_key_rotation).days
        if days_since_rotation > 7:
            print("üîê Rotation de la cl√© de chiffrement...")
            self.save_to_disk()
            new_key = Fernet.generate_key()
            new_cipher = Fernet(new_key)
            self.cipher = new_cipher
            self.encryption_key = new_key.decode()
            os.environ["JEFFREY_MEMORY_KEY"] = self.encryption_key
            self.last_key_rotation = datetime.now()
            print("‚úÖ Cl√© de chiffrement rot√©e")


if __name__ == "__main__":
    print("üß™ Test du Cortex M√©moriel")
    cortex = PersistentCortexMemoriel()
    moment = MemoryMoment(
        timestamp=datetime.now(),
        message="Bonjour Jeffrey",
        jeffrey_response="Bonjour ! Je ressens une joie tranquille.",
        emotion="joie",
        consciousness_level=cortex.consciousness_level,
        context={"speaker": "test"},
        source="human",
    )
    cortex.store_moment(moment)
    memories = cortex.remember_by_resonance("salut", k=3)
    print(f"üîç Trouv√© {len(memories)} souvenirs r√©sonnants")
    cortex.save_to_disk()
    print("‚úÖ Test termin√©")
