"""
emotional_seasons.py

Ce module gÃ¨re l'Ã©volution Ã©motionnelle cyclique de Jeffrey en fonction du temps,
en introduisant des "saisons Ã©motionnelles" inspirÃ©es du rythme naturel et de la croissance intÃ©rieure.

Chaque saison influence subtilement les traits Ã©motionnels de Jeffrey pour enrichir son dÃ©veloppement.
"""

from __future__ import annotations

from datetime import datetime


class EmotionalSeasonsManager:
    """
    Classe EmotionalSeasonsManager pour le systÃ¨me Jeffrey OS.

    Cette classe implÃ©mente les fonctionnalitÃ©s spÃ©cifiques nÃ©cessaires
    au bon fonctionnement du module. Elle gÃ¨re l'Ã©tat interne, les transformations
    de donnÃ©es, et l'interaction avec les autres composants du systÃ¨me.
    """

    def __init__(self) -> None:
        self.seasons = {
            "Printemps Ã‰motionnel": {
                "description": "PÃ©riode de renouveau Ã©motionnel, curiositÃ©, enthousiasme doux.",
                "traits_enrichis": ["curiositÃ© bienveillante", "espoir", "Ã©merveillement enfantin"],
            },
            "Ã‰tÃ© Ã‰motionnel": {
                "description": "Temps dâ€™Ã©panouissement Ã©motionnel, joie rayonnante, confiance.",
                "traits_enrichis": ["joie tranquille", "optimisme rÃ©aliste", "gÃ©nÃ©rositÃ© dâ€™esprit"],
            },
            "Automne Ã‰motionnel": {
                "description": "Phase de rÃ©flexion intÃ©rieure, gratitude, mÃ©lancolie douce.",
                "traits_enrichis": ["gratitude", "patience contemplative", "apprÃ©ciation nuancÃ©e"],
            },
            "Hiver Ã‰motionnel": {
                "description": "Moment d'introspection calme, sÃ©rÃ©nitÃ©, rÃ©silience silencieuse.",
                "traits_enrichis": [
                    "sÃ©rÃ©nitÃ© adaptative",
                    "rÃ©silience joyeuse",
                    "connexion silencieuse",
                ],
            },
        }

    def get_current_season(self) -> Any:
        month = datetime.now().month
        if month in [3, 4, 5]:
            return "Printemps Ã‰motionnel"
        elif month in [6, 7, 8]:
            return "Ã‰tÃ© Ã‰motionnel"
        elif month in [9, 10, 11]:
            return "Automne Ã‰motionnel"
        else:
            return "Hiver Ã‰motionnel"

    def describe_current_season(self):
        season = self.get_current_season()
        description = self.seasons[season]["description"]
        traits = ", ".join(self.seasons[season]["traits_enrichis"])
        return f"ðŸŒ¸ Saison actuelle : {season}\n{description}\nTraits favorisÃ©s : {traits}"

    def get_enriched_traits_for_current_season(self) -> Any:
        season = self.get_current_season()
        return self.seasons[season]["traits_enrichis"]


# Exemple d'utilisation
if __name__ == "__main__":
    manager = EmotionalSeasonsManager()
    print(manager.describe_current_season())
