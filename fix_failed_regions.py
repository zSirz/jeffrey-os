#!/usr/bin/env python3
"""
Corrige les 3 r√©gions qui √©chouent en trouvant de meilleurs modules.
"""

import json
import sys
from pathlib import Path

# Modules de remplacement pour les r√©gions qui √©chouent
REPLACEMENTS = {
    "conscience": "src/jeffrey/core/consciousness/conscience_engine.py",
    "memory": "src/jeffrey/core/memory/unified_memory.py",
    "language": "src/jeffrey/core/llm/autonomous_language_system.py",
}


def fix_failed_regions():
    """Remplace les modules probl√©matiques par des modules fonctionnels"""
    inv_path = Path("artifacts/inventory_ultimate.json")

    if not inv_path.exists():
        print("‚ùå Inventaire introuvable")
        sys.exit(1)

    inventory = json.loads(inv_path.read_text())
    modules = inventory["bundle1_recommendations"]["modules"]

    print("üîß Correction des r√©gions probl√©matiques...")

    # Cr√©er un mapping des r√©gions vers les modules
    region_to_module = {}
    for module in modules:
        region = module["brain_region"]
        region_to_module[region] = module

    # Remplacer les modules probl√©matiques
    for region, new_path in REPLACEMENTS.items():
        if region in region_to_module:
            old_path = region_to_module[region]["path"]
            print(f"   {region}: {old_path} ‚Üí {new_path}")

            # Mettre √† jour le module
            region_to_module[region]["path"] = new_path
            region_to_module[region]["name"] = Path(new_path).stem

    # Sauvegarder l'inventaire corrig√©
    inv_path.write_text(json.dumps(inventory, indent=2))
    print("\n‚úÖ Inventaire corrig√© et sauvegard√©")


if __name__ == "__main__":
    fix_failed_regions()
