#!/usr/bin/env python3
"""
Validation finale stricte avec v√©rification loop.regions et seuil P95 fixe.
"""

import asyncio
import inspect
import json
import platform
import statistics
import subprocess
import sys
import time
from pathlib import Path

sys.path.insert(0, "src")

# SEUIL FIXE (am√©lioration 2)
TARGET_P95_MS = 100.0


async def validate():
    """Validation compl√®te"""
    print("üß† VALIDATION JEFFREY OS - 8/8 R√âGIONS STRICTE")
    print("=" * 60)

    # V√©rifier l'inventaire
    inv_path = Path("artifacts/inventory_ultimate.json")
    if not inv_path.exists():
        print("‚ùå Inventaire introuvable")
        return False

    inventory = json.loads(inv_path.read_text())
    modules = inventory["bundle1_recommendations"]["modules"]

    # R√àGLE 1 : 8 modules minimum
    if len(modules) < 8:
        print(f"‚ùå Seulement {len(modules)}/8 modules")
        return False

    # R√àGLE 2 : Aucun interdit
    bad = [m for m in modules if "/simple_modules/" in m["path"] or "/stubs/" in m["path"]]
    if bad:
        print(f"‚ùå {len(bad)} modules interdits:")
        for m in bad:
            print(f"   ‚Ä¢ {m['brain_region']}: {m['path']}")
        return False

    # R√àGLE 3 : 8 r√©gions pr√©sentes
    required_regions = {
        "perception",
        "memory",
        "emotion",
        "conscience",
        "executive",
        "motor",
        "language",
        "integration",
    }
    found_regions = {m["brain_region"] for m in modules}
    missing = required_regions - found_regions

    if missing:
        print(f"‚ùå R√©gions manquantes: {missing}")
        return False

    print("‚úÖ 8/8 r√©gions dans l'inventaire")

    # Charger la consciousness loop
    try:
        from jeffrey.core.consciousness_loop import ConsciousnessLoop

        loop = ConsciousnessLoop()
        await loop.initialize()
    except Exception as e:
        print(f"‚ùå √âchec chargement ConsciousnessLoop: {e}")
        return False

    # R√àGLE 4 : V√©rifier loop.regions (am√©lioration 1)
    loaded = []
    missing_loaded = []

    # Acc√©der √† loop.regions (pas hasattr)
    regions_dict = getattr(loop, "regions", {})
    if not regions_dict:
        print("‚ùå loop.regions n'existe pas ou est vide")
        return False

    for region in sorted(required_regions):
        inst = regions_dict.get(region)
        if inst:
            loaded.append(region)
            print(f"‚úÖ {region} charg√©")
        else:
            missing_loaded.append(region)
            print(f"‚ùå {region} non charg√©")

    if missing_loaded:
        print(f"‚ùå R√©gions non charg√©es: {missing_loaded}")
        return False

    # R√àGLE 5 : Smoke test par r√©gion (am√©lioration 1 + strat√©gie robuste)
    print("\nüî• Smoke test des r√©gions...")

    for region in sorted(required_regions):
        inst = regions_dict[region]

        # Trouver la m√©thode
        meth = None
        for cand in ("process", "analyze", "run", "analyze_emotion", "execute"):
            if hasattr(inst, cand):
                meth = getattr(inst, cand)
                break

        if not meth:
            print(f"‚ùå {region}: Aucune m√©thode")
            return False

        # Appel minimal avec strat√©gie robuste
        ok = False
        candidates = [
            ((), {}),  # meth()
            (("ping",), {}),  # meth("ping")
            (({"ping": True},), {}),  # meth({"ping": True})
            (("ping", {}), {}),  # meth("ping", {})
        ]
        for args, kwargs in candidates:
            try:
                if inspect.iscoroutinefunction(meth):
                    await meth(*args, **kwargs)
                else:
                    meth(*args, **kwargs)
                ok = True
                break
            except TypeError:
                continue
            except Exception as e:
                print(f"‚ùå {region}: erreur pendant le smoke test: {e}")
                return False

        if not ok:
            print(f"‚ùå {region}: aucune signature simple accept√©e pour {meth.__name__}()")
            return False
        print(f"‚úÖ {region}: Smoke test OK")

    # R√àGLE 6 : Perf r√©aliste
    print("\nüìä Test de performance...")
    times = []

    # Test de perf tol√©rant sync/async
    proc = getattr(loop, "process_input", None)
    if proc is None:
        print("‚ùå ConsciousnessLoop.process_input manquant")
        return False

    for i in range(20):
        t0 = time.perf_counter()
        try:
            if inspect.iscoroutinefunction(proc):
                await proc(f"Test {i}")
            else:
                proc(f"Test {i}")
        except Exception as e:
            print(f"‚ùå Erreur traitement: {e}")
            return False
        times.append((time.perf_counter() - t0) * 1000)

    avg = statistics.mean(times)
    p95 = sorted(times)[int(len(times) * 0.95)]
    p99 = sorted(times)[-1]

    print(f"\n   ‚Ä¢ Moyenne: {avg:.1f}ms")
    print(f"   ‚Ä¢ P95: {p95:.1f}ms")
    print(f"   ‚Ä¢ P99: {p99:.1f}ms")

    # R√àGLE 7 : Perfs r√©alistes
    if avg < 1.0:
        print("\n‚ö†Ô∏è  ATTENTION : Performances suspicieuses (< 1ms)")
        print("   Les modules semblent √™tre des no-ops")

    if p95 > TARGET_P95_MS:
        print(f"\n‚ö†Ô∏è  P95 √©lev√© ({p95:.1f}ms > {TARGET_P95_MS}ms)")

    # R√àGLE 8 : G√©n√©rer rapport machine (am√©lioration 6)
    print("\nüìù G√©n√©ration du rapport de validation...")
    report = {
        "timestamp": time.time(),
        "git_commit": subprocess.run(
            ["git", "rev-parse", "HEAD"], capture_output=True, text=True, check=True
        ).stdout.strip(),
        "python": platform.python_version(),
        "modules": [
            {
                "region": region,
                "class": type(regions_dict[region]).__name__,
                "path": next(m["path"] for m in modules if m["brain_region"] == region),
            }
            for region in sorted(required_regions)
        ],
        "perf": {"avg_ms": avg, "p95_ms": p95, "p99_ms": p99},
    }

    Path("artifacts/validation_report.json").write_text(json.dumps(report, indent=2))
    print("‚úÖ Rapport sauvegard√©: artifacts/validation_report.json")

    print("\n" + "=" * 60)
    print("‚úÖ VALIDATION R√âUSSIE")
    print("   ‚Ä¢ 8/8 r√©gions actives")
    print("   ‚Ä¢ 0 placeholders")
    print(f"   ‚Ä¢ P95: {p95:.1f}ms")
    print("=" * 60)

    return True


if __name__ == "__main__":
    try:
        success = asyncio.run(validate())
        if success:
            print("\nüéâ Jeffrey OS v10.0.0 - VALID√â")
            sys.exit(0)
        else:
            print("\n‚ùå Validation √©chou√©e")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
