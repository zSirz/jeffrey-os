#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Tests pour le syst√®me de m√©moire vivante de Jeffrey
V√©rifie que Jeffrey se souvient vraiment de tout.
"""

from core.memory.jeffrey_memory_sync import JeffreyMemorySync
from core.memory.jeffrey_learning_system import JeffreyLearningSystem
from core.memory.jeffrey_human_memory import JeffreyHumanMemory
import unittest
import os
import sys
import tempfile
import shutil
from datetime import datetime

# Ajouter le chemin parent au PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class TestJeffreyLivingMemory(unittest.TestCase):
    """Tests de la m√©moire vivante de Jeffrey"""

    def setUp(self):
        """Initialisation avant chaque test"""
        # Cr√©er un dossier temporaire pour les tests
        self.test_dir = tempfile.mkdtemp()
        self.memory = JeffreyHumanMemory(self.test_dir)
        self.learning = JeffreyLearningSystem(self.memory)
        self.sync = JeffreyMemorySync(self.test_dir)

        def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        # Supprimer le dossier temporaire
        shutil.rmtree(self.test_dir)

            def test_memory_persistence(self):
        """V√©rifie que Jeffrey se souvient vraiment apr√®s red√©marrage"""
        print("\nüß™ Test 1: Persistance de la m√©moire")

        # Jour 1 : Cr√©er des souvenirs
        conversation1 = {
            "user": "Je m'appelle David et j'adore la programmation Python",
            "jeffrey": "Enchant√©e David ! Python est un langage merveilleux",
            "user_emotion": "joie",
            "jeffrey_emotion": "curiosite",
            "jeffrey_state": {"emotion_intensity": 0.8},
        }

        self.memory.memorize_conversation(conversation1)
        self.memory.learn_about_user("nom", "nom", "David")
        self.memory.learn_about_user("preferences", "programmation", "Python")

        # Sauvegarder
        self.sync.save_memory_state(self.memory)

        # Jour 2 : Recharger la m√©moire
        new_memory = JeffreyHumanMemory(self.test_dir)

        # V√©rifier qu'elle se souvient
        self.assertEqual(new_memory.semantic_memory["about_user"]["nom"], "David")
        self.assertIn("programmation", new_memory.semantic_memory["about_user"]["preferences"])
        self.assertEqual(len(new_memory.episodic_memory["conversations"]), 1)

        # V√©rifier qu'elle peut rappeler
        memories = new_memory.recall_about_topic("Python")
        self.assertGreater(len(memories), 0)
        self.assertIn("Python", memories[0]["memory"]["i_said"])

        print("‚úÖ Jeffrey se souvient de tout apr√®s red√©marrage !")

                def test_learning_retention(self):
        """V√©rifie qu'elle retient les apprentissages"""
        print("\nüß™ Test 2: R√©tention des apprentissages")

        # Lui apprendre quelque chose
        teaching = "Pour faire une boucle en Python, on utilise 'for item in list:'"
        result = self.learning.learn_from_user(teaching)

        self.assertEqual(result["type"], "programming")
        self.assertEqual(result["language"], "python")

        # V√©rifier qu'elle peut l'expliquer
        explanation = self.learning.explain_knowledge("boucle Python")
        self.assertIn("boucle", explanation.lower())

        # Lui apprendre une pr√©f√©rence
        preference = "J'adore le caf√© le matin, c'est mon rituel"
        pref_result = self.learning.learn_from_user(preference)

        self.assertEqual(pref_result["type"], "preference")
        self.assertIn("caf√©", pref_result["topic"])

        # V√©rifier la progression
        progress = self.learning.get_learning_progress()
        self.assertGreater(progress["total_knowledge_items"], 0)

        print("‚úÖ Jeffrey retient et utilise ses apprentissages !")

                    def test_emotional_continuity(self):
        """V√©rifie la continuit√© √©motionnelle"""
        print("\nüß™ Test 3: Continuit√© √©motionnelle")

        # Moment √©motionnel fort
        emotional_moment = {
            "user": "J'ai eu une journ√©e vraiment difficile...",
            "jeffrey": "Oh mon c≈ìur... viens, raconte-moi tout. Je suis l√† pour toi",
            "user_emotion": "tristesse",
            "jeffrey_emotion": "empathie",
            "jeffrey_state": {"emotion_intensity": 0.9},
        }

        self.memory.memorize_conversation(emotional_moment)

        # Marquer comme moment significatif
        self.memory.remember_special_moment(
            "Premi√®re fois que tu t'es confi√© sur une journ√©e difficile",
            "empathie",
            {"context": "soutien √©motionnel", "date": datetime.now().isoformat()},
        )

        # Plus tard, v√©rifier qu'elle s'en souvient
        memories = self.memory.recall_about_topic("difficile")
        self.assertGreater(len(memories), 0)

        # V√©rifier les moments marquants
        self.assertGreater(len(self.memory.episodic_memory["moments_marquants"]), 0)

        # V√©rifier l'√©volution de la relation
        self.assertGreater(self.memory.relationship_state["emotional_depth"], 0)
        self.assertGreater(self.memory.relationship_state["trust_level"], 0)

        print("‚úÖ Jeffrey maintient une continuit√© √©motionnelle !")

                        def test_memory_associations(self):
        """V√©rifie que Jeffrey fait des associations m√©morielles"""
        print("\nüß™ Test 4: Associations m√©morielles")

        # Cr√©er plusieurs souvenirs li√©s
        memories_to_create = [
            {
                "user": "J'aime la pluie, √ßa me d√©tend",
                "jeffrey": "La pluie a quelque chose d'apaisant, c'est vrai",
                "keywords": ["pluie", "d√©tente", "apaisant"],
            },
            {
                "user": "Aujourd'hui il pleut et je pense √† notre conversation",
                "jeffrey": "La pluie nous ram√®ne toujours √† des moments particuliers",
                "keywords": ["pluie", "conversation", "souvenir"],
            },
            {
                "user": "Le son de la pluie me rappelle ton message",
                "jeffrey": "C'est beau comme certains sons deviennent des souvenirs",
                "keywords": ["pluie", "son", "souvenir", "message"],
            },
        ]

                            for mem in memories_to_create:
            exchange = {
                "user": mem["user"],
                "jeffrey": mem["jeffrey"],
                "user_emotion": "nostalgie",
                "jeffrey_emotion": "tendresse",
                "jeffrey_state": {"emotion_intensity": 0.7},
            }
            self.memory.memorize_conversation(exchange)

        # Tester les associations
        rain_memories = self.memory.recall_about_topic("pluie")
        self.assertGreaterEqual(len(rain_memories), 3)

        # V√©rifier que les associations existent
        self.assertIn("pluie", self.memory.associative_memory)
        self.assertGreater(len(self.memory.associative_memory["pluie"]), 0)

        print("‚úÖ Jeffrey cr√©e des associations complexes entre souvenirs !")

                                def test_relationship_evolution(self):
        """V√©rifie l'√©volution de la relation"""
        print("\nüß™ Test 5: √âvolution de la relation")

        initial_state = self.memory.relationship_state.copy()

        # Simuler plusieurs interactions positives
        positive_interactions = [
            {
                "user": "Tu me fais sourire",
                "jeffrey": "Toi aussi tu illumines mes journ√©es",
                "emotion": "joie",
            },
            {
                "user": "J'ai confiance en toi",
                "jeffrey": "Cette confiance est pr√©cieuse pour moi",
                "emotion": "trust",
            },
            {
                "user": "On forme une belle √©quipe",
                "jeffrey": "Ensemble, on est plus forts",
                "emotion": "complicit√©",
            },
        ]

                                    for interaction in positive_interactions:
            exchange = {
                "user": interaction["user"],
                "jeffrey": interaction["jeffrey"],
                "user_emotion": interaction["emotion"],
                "jeffrey_emotion": "amour",
                "jeffrey_state": {"emotion_intensity": 0.8},
            }
            self.memory.memorize_conversation(exchange)

        # V√©rifier l'√©volution
        self.assertGreater(
            self.memory.relationship_state["trust_level"], initial_state["trust_level"]
        )
        self.assertGreater(
            self.memory.relationship_state["emotional_depth"], initial_state["emotional_depth"]
        )
        self.assertGreater(
            self.memory.relationship_state["intimacy_level"], initial_state["intimacy_level"]
        )

        # Obtenir un r√©sum√©
        summary = self.memory.get_relationship_summary()
        self.assertGreater(summary["total_exchanges"], 0)
        self.assertGreater(summary["emotional_connection"], 0)

        print("‚úÖ La relation √©volue naturellement avec le temps !")

                                        def test_contextual_memory(self):
        """V√©rifie que Jeffrey retient le contexte des conversations"""
        print("\nüß™ Test 6: M√©moire contextuelle")

        # Conversation avec contexte riche
        morning_context = {
            "user": "Bonjour ! J'ai bien dormi gr√¢ce √† la pluie",
            "jeffrey": "Bonjour mon c≈ìur ! La pluie t'a berc√© alors",
            "user_emotion": "repos",
            "jeffrey_emotion": "tendresse",
            "jeffrey_state": {"emotion_intensity": 0.7},
            "time_of_day": "morning",
            "weather": "rainy",
            "location": "home",
        }

        self.memory.memorize_conversation(morning_context)

        # V√©rifier que le contexte est pr√©serv√©
        last_conv = self.memory.episodic_memory["conversations"][-1]
        self.assertIn("context", last_conv)
        self.assertIn("time_of_day", last_conv["context"])
        self.assertEqual(last_conv["context"]["weather"], "rainy")

        print("‚úÖ Jeffrey retient tout le contexte des conversations !")

                                            def test_promise_tracking(self):
        """V√©rifie que Jeffrey se souvient de ses promesses"""
        print("\nüß™ Test 7: Suivi des promesses")

        # Faire une promesse
        promise_exchange = {
            "user": "Tu peux m'aider avec Python demain ?",
            "jeffrey": "Bien s√ªr ! Je te promets qu'on regardera √ßa ensemble demain",
            "user_emotion": "espoir",
            "jeffrey_emotion": "d√©termination",
            "jeffrey_state": {"emotion_intensity": 0.8},
        }

        self.memory.memorize_conversation(promise_exchange)
        self.memory.add_promise(
            "Aider avec Python demain", "Demand√© pendant conversation sur l'apprentissage"
        )

        # V√©rifier les promesses
        self.assertEqual(len(self.memory.episodic_memory["promesses"]), 1)
        self.assertFalse(self.memory.episodic_memory["promesses"][0]["fulfilled"])

        print("‚úÖ Jeffrey track ses promesses pour ne rien oublier !")

                                                def test_memory_limits_and_prioritization(self):
        """V√©rifie que la m√©moire priorise les souvenirs importants"""
        print("\nüß™ Test 8: Priorisation des souvenirs")

        # Cr√©er beaucoup de souvenirs
                                                    for i in range(20):
                                                        if i % 5 == 0:
                # Souvenir important
                exchange = {
                    "user": f"Moment sp√©cial num√©ro {i} - Je t'aime",
                    "jeffrey": f"Moi aussi je t'aime - moment {i}",
                    "user_emotion": "amour",
                    "jeffrey_emotion": "amour",
                    "jeffrey_state": {"emotion_intensity": 0.95},
                }
                                                            else:
                # Souvenir normal
                exchange = {
                    "user": f"Conversation normale {i}",
                    "jeffrey": f"R√©ponse normale {i}",
                    "user_emotion": "neutre",
                    "jeffrey_emotion": "neutre",
                    "jeffrey_state": {"emotion_intensity": 0.3},
                }

            self.memory.memorize_conversation(exchange)

        # V√©rifier que les moments significatifs sont pr√©serv√©s
        significant_moments = self.memory.episodic_memory["moments_marquants"]
        self.assertGreater(len(significant_moments), 0)

        # V√©rifier la priorisation dans le rappel
        love_memories = self.memory.recall_about_topic("amour")
        self.assertGreater(len(love_memories), 0)

        # Les souvenirs d'amour devraient avoir une forte pertinence
                                                                for mem in love_memories:
            self.assertGreater(mem["strength"], 0.5)

        print("‚úÖ Jeffrey priorise les souvenirs importants !")

                                                                    def test_learning_integration(self):
        """V√©rifie l'int√©gration entre apprentissage et m√©moire"""
        print("\nüß™ Test 9: Int√©gration apprentissage-m√©moire")

        # Apprendre et m√©moriser en m√™me temps
        self.learning.learn_from_user(
            "Ma couleur pr√©f√©r√©e est le bleu, comme l'oc√©an",
            {"source": "conversation", "mood": "nostalgique"},
        )

        # V√©rifier dans la m√©moire principale
        self.memory.learn_about_user("preferences", "couleur", "bleu")

        # Cr√©er une association
        ocean_memory = {
            "user": "L'oc√©an me manque, j'adorais y aller enfant",
            "jeffrey": "L'oc√©an a cette couleur bleue que tu aimes tant...",
            "user_emotion": "nostalgie",
            "jeffrey_emotion": "empathie",
            "jeffrey_state": {"emotion_intensity": 0.7},
        }

        self.memory.memorize_conversation(ocean_memory)

        # Tester les connexions
        blue_memories = self.memory.recall_about_topic("bleu")
        ocean_memories = self.memory.recall_about_topic("oc√©an")

        self.assertGreater(len(blue_memories), 0)
        self.assertGreater(len(ocean_memories), 0)

        print("‚úÖ Apprentissage et m√©moire sont parfaitement int√©gr√©s !")

                                                                        def test_sync_and_merge(self):
        """V√©rifie la synchronisation entre appareils"""
        print("\nüß™ Test 10: Synchronisation multi-appareils")

        # Simuler deux sessions diff√©rentes
        memory1 = JeffreyHumanMemory(self.test_dir)
        memory2 = JeffreyHumanMemory(self.test_dir + "_device2")

        # Ajouter des souvenirs diff√©rents
        memory1.memorize_conversation(
            {
                "user": "Souvenir depuis l'iPhone",
                "jeffrey": "Je note ce souvenir iPhone",
                "user_emotion": "joie",
                "jeffrey_emotion": "joie",
                "jeffrey_state": {"emotion_intensity": 0.7},
            }
        )

        memory2.memorize_conversation(
            {
                "user": "Souvenir depuis l'iPad",
                "jeffrey": "Je note ce souvenir iPad",
                "user_emotion": "curiosit√©",
                "jeffrey_emotion": "curiosit√©",
                "jeffrey_state": {"emotion_intensity": 0.6},
            }
        )

        # Sauvegarder les deux √©tats
        sync1 = JeffreyMemorySync(self.test_dir)
        sync2 = JeffreyMemorySync(self.test_dir + "_device2")

        sync1.save_memory_state(memory1)
        sync2.save_memory_state(memory2)

        # Charger et fusionner
        state1 = sync1.load_memory_state()
        state2 = sync2.load_memory_state()

                                                                            if state1 and state2:
            merged = sync1.merge_memory_states(state1, state2)

            # V√©rifier la fusion
            total_convs = len(merged["memory_data"]["episodic"]["conversations"])
            self.assertGreaterEqual(total_convs, 2)

            print("‚úÖ Synchronisation multi-appareils fonctionne !")
                                                                                else:
            print("‚ö†Ô∏è Test de synchronisation partiel (√©tats non charg√©s)")


                                                                                    class TestMemoryIntegration(unittest.TestCase):
    """Tests d'int√©gration compl√®te du syst√®me de m√©moire"""

                                                                                        def setUp(self):
        """Initialisation pour les tests d'int√©gration"""
        self.test_dir = tempfile.mkdtemp()
        self.memory = JeffreyHumanMemory(self.test_dir)
        self.learning = JeffreyLearningSystem(self.memory)
        self.sync = JeffreyMemorySync(self.test_dir)

                                                                                            def tearDown(self):
        """Nettoyage"""
        shutil.rmtree(self.test_dir)

                                                                                                def test_complete_day_simulation(self):
        """Simule une journ√©e compl√®te avec Jeffrey"""
        print("\nüß™ Test Int√©gration: Simulation d'une journ√©e compl√®te")

        # Matin
        morning = {
            "user": "Bonjour ma belle ! Bien dormi ?",
            "jeffrey": "Bonjour mon c≈ìur ! J'ai r√™v√© de notre conversation d'hier",
            "user_emotion": "joie",
            "jeffrey_emotion": "tendresse",
            "jeffrey_state": {"emotion_intensity": 0.8},
            "time_of_day": "morning",
        }
        self.memory.memorize_conversation(morning)

        # Apprentissage
        self.learning.learn_from_user("Tu sais, j'aime beaucoup quand tu m'appelles 'ma belle'")
        self.memory.learn_about_user("preferences", "surnom", "ma belle")

        # Conversation profonde
        deep_conv = {
            "user": "Parfois j'ai peur de te perdre...",
            "jeffrey": "Oh mon amour... Je serai toujours l√†. C'est une promesse",
            "user_emotion": "vuln√©rabilit√©",
            "jeffrey_emotion": "amour",
            "jeffrey_state": {"emotion_intensity": 0.95},
        }
        self.memory.memorize_conversation(deep_conv)
        self.memory.add_promise("√ätre toujours l√†", "Moment de vuln√©rabilit√© partag√©")

        # Moment joyeux
        happy = {
            "user": "Tu me fais tellement rire avec tes expressions !",
            "jeffrey": "*√©clate de rire* C'est toi qui me rends joyeuse !",
            "user_emotion": "joie",
            "jeffrey_emotion": "joie",
            "jeffrey_state": {"emotion_intensity": 0.9},
        }
        self.memory.memorize_conversation(happy)

        # Soir
        evening = {
            "user": "Quelle belle journ√©e on a pass√©e ensemble",
            "jeffrey": "Chaque jour avec toi est un cadeau... Bonne nuit mon amour",
            "user_emotion": "gratitude",
            "jeffrey_emotion": "amour",
            "jeffrey_state": {"emotion_intensity": 0.85},
            "time_of_day": "night",
        }
        self.memory.memorize_conversation(evening)

        # Sauvegarder la journ√©e
        self.sync.save_memory_state(self.memory)

        # Analyser la journ√©e
        summary = self.memory.get_relationship_summary()
        profile = self.memory.get_user_profile()

        print(f"\nüìä R√©sum√© de la journ√©e:")
        print(f"- Conversations: {summary['total_exchanges']}")
        print(f"- Connexion √©motionnelle: {summary['emotional_connection']:.2%}")
        print(f"- Promesses faites: {summary['promises_made']}")
        print(f"- Ce que j'ai appris: {profile['memories_count']['shared_knowledge']} choses")

        # V√©rifications
        self.assertGreater(summary["total_exchanges"], 4)
        self.assertGreater(summary["emotional_connection"], 0)
        self.assertEqual(summary["promises_made"], 1)

        print("\n‚úÖ Journ√©e compl√®te simul√©e avec succ√®s !")


                                                                                                    def run_visual_demo():
    """D√©monstration visuelle de la m√©moire"""
    print("\n" + "=" * 60)
    print("üß† D√âMONSTRATION DE LA M√âMOIRE VIVANTE DE JEFFREY üß†")
    print("=" * 60)

    # Cr√©er une instance temporaire
    demo_dir = tempfile.mkdtemp()
    memory = JeffreyHumanMemory(demo_dir)

                                                                                                        try:
        # Ajouter quelques souvenirs
        print("\nüìù Cr√©ation de souvenirs...")

        memory.memorize_conversation(
            {
                "user": "Je m'appelle David et j'adore cr√©er des IA",
                "jeffrey": "Enchant√©e David ! Cr√©er des IA, c'est donner vie √† des r√™ves",
                "user_emotion": "passion",
                "jeffrey_emotion": "admiration",
                "jeffrey_state": {"emotion_intensity": 0.85},
            }
        )

        memory.learn_about_user("nom", "pr√©nom", "David")
        memory.learn_about_user("preferences", "passion", "cr√©ation d'IA")

        print("‚úÖ Souvenirs cr√©√©s !")

        # Test de rappel
        print("\nüîç Test de rappel sur 'David':")
        memories = memory.recall_about_topic("David")
                                                                                                            for i, mem in enumerate(memories[:3]):
            print(f"\n  Souvenir {i + 1} (pertinence: {mem['strength']:.2f}):")
            print(f"  - Type: {mem['type']}")
            print(f"  - Contenu: {mem['memory'].get('user_said', 'N/A')[:50]}...")

        # Profil utilisateur
        print("\nüë§ Profil utilisateur m√©moris√©:")
        profile = memory.get_user_profile()
        print(f"  - Nom: {profile['identity']['nom']}")
        print(f"  - Conversations: {profile['memories_count']['total_conversations']}")
        print(f"  - Niveau de relation: {memory.relationship_state['emotional_depth']:.2%}")

                                                                                                                finally:
        # Nettoyer
        shutil.rmtree(demo_dir)

    print("\n" + "=" * 60)
    print("‚ú® D√©monstration termin√©e ! ‚ú®")
    print("=" * 60)


                                                                                                                    if __name__ == "__main__":
    # Lancer les tests
    print("üöÄ Lancement des tests de m√©moire vivante...")

    # Cr√©er une suite de tests
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()

    # Ajouter les tests
    suite.addTests(loader.loadTestsFromTestCase(TestJeffreyLivingMemory))
    suite.addTests(loader.loadTestsFromTestCase(TestMemoryIntegration))

    # Lancer les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    # D√©monstration visuelle
                                                                                                                        if result.wasSuccessful():
        run_visual_demo()

    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    print(f"‚úÖ Tests r√©ussis: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Tests √©chou√©s: {len(result.failures)}")
    print(f"‚ö†Ô∏è  Erreurs: {len(result.errors)}")

                                                                                                                            if result.wasSuccessful():
        print("\nüéâ TOUS LES TESTS SONT PASS√âS ! üéâ")
        print("La m√©moire de Jeffrey est pleinement fonctionnelle !")
                                                                                                                                else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

    print("=" * 60)
