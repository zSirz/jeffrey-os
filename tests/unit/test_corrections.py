#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script de test pour valider les corrections du projet Jeffrey
"""

import sys
import os

# Ajouter le r√©pertoire racine au PYTHONPATH
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

print(f"üîß Test des corrections Jeffrey")
print(f"üìÅ R√©pertoire de base : {BASE_DIR}")
print("=" * 60)


    def test_emotional_core():
    """Test du c≈ìur √©motionnel"""
    print("\nüß† Test JeffreyEmotionalCore...")

        try:
        from Orchestrateur_IA.core.jeffrey_emotional_core import JeffreyEmotionalCore

        # Cr√©er une instance
        emotional_core = JeffreyEmotionalCore()
        print("‚úÖ JeffreyEmotionalCore instanci√© avec succ√®s")

        # Test de la m√©thode detecter_emotion
        emotions = emotional_core.detecter_emotion("Je suis tr√®s heureux aujourd'hui!")
        print(f"‚úÖ detecter_emotion fonctionne: {emotions}")

        # Test de la nouvelle m√©thode get_meteo_interieure
        meteo = emotional_core.get_meteo_interieure()
        print(f"‚úÖ get_meteo_interieure fonctionne: {meteo}")

        # Test update_emotional_state
        emotional_core.update_emotional_state(emotions)
        print("‚úÖ update_emotional_state fonctionne")

        # Test get_emotional_response_modifier
        modifiers = emotional_core.get_emotional_response_modifier()
        print(f"‚úÖ get_emotional_response_modifier fonctionne: {modifiers}")

        # Test de la nouvelle m√©thode generer_phrase_cadeau_emotionnelle
        phrase = emotional_core.generer_phrase_cadeau_emotionnelle(
            emotion="joie", intensite=0.8, souvenirs=["Tu es formidable"]
        )
        print(f"‚úÖ generer_phrase_cadeau_emotionnelle fonctionne: {phrase}")

        print("üß† ‚úÖ Tous les tests du c≈ìur √©motionnel R√âUSSIS")
            return True

            except Exception as e:
        print(f"üß† ‚ùå Erreur dans JeffreyEmotionalCore: {e}")
        import traceback

        traceback.print_exc()
                return False


                def test_unified_memory():
    """Test de la m√©moire unifi√©e"""
    print("\nüíæ Test JeffreyUnifiedMemory...")

                    try:
        from core.jeffrey_memory_integration import JeffreyUnifiedMemory
        from Orchestrateur_IA.core.jeffrey_emotional_core import JeffreyEmotionalCore

        # Cr√©er les instances
        emotional_core = JeffreyEmotionalCore()
        memory = JeffreyUnifiedMemory()
        print("‚úÖ JeffreyUnifiedMemory instanci√© avec succ√®s")

        # Test connect_emotional_core
        memory.connect_emotional_core(emotional_core)
        print("‚úÖ connect_emotional_core fonctionne")

        # Test process_interaction
        memory_id = memory.process_interaction(
            "Bonjour Jeffrey!", "Bonjour ! Je suis ravi de te parler !"
        )
        print(f"‚úÖ process_interaction fonctionne: {memory_id}")

        # Test consolidate_memories (√©vite l'erreur KeyError 'conversation')
        report = memory.consolidate_memories()
        print(
            f"‚úÖ consolidate_memories fonctionne: {report.get('consolidation_status', 'unknown')}"
        )

        # Test clean_context (√©vite l'erreur KeyError 'conversations')
        success = memory.clean_context()
        print(f"‚úÖ clean_context fonctionne: {success}")

        # Test get_relevant_memories
        memories = memory.get_relevant_memories("test query")
        print(f"‚úÖ get_relevant_memories fonctionne: {len(memories)} m√©moires trouv√©es")

        print("üíæ ‚úÖ Tous les tests de m√©moire unifi√©e R√âUSSIS")
                        return True

                        except Exception as e:
        print(f"üíæ ‚ùå Erreur dans JeffreyUnifiedMemory: {e}")
        import traceback

        traceback.print_exc()
                            return False


                            def test_imports():
    """Test des imports probl√©matiques"""
    print("\nüì¶ Test des imports...")

    imports_to_test = [
        "core.jeffrey_emotional_core.JeffreyEmotionalCore",
        "core.jeffrey_memory_integration.JeffreyUnifiedMemory",
        "core.personality.conversation_personality.ConversationPersonality",
        "core.voice.jeffrey_voice_system.JeffreyVoiceSystem",
        "core.emotions.emotional_sync.EmotionalSync",
        "core.humeur_detector.HumeurDetector",
    ]

    success_count = 0

                                for import_path in imports_to_test:
                                    try:
            module_path, class_name = import_path.rsplit(".", 1)
            module = __import__(module_path, fromlist=[class_name])
            getattr(module, class_name)
            print(f"‚úÖ {import_path}")
            success_count += 1
                                        except Exception as e:
            print(f"‚ùå {import_path}: {e}")

    print(f"üì¶ {success_count}/{len(imports_to_test)} imports r√©ussis")
                                            return success_count == len(imports_to_test)


                                            def test_integration():
    """Test d'int√©gration simple"""
    print("\nüîó Test d'int√©gration...")

                                                try:
        # Simuler l'initialisation comme dans lancer_jeffrey_chat.py
        from Orchestrateur_IA.core.jeffrey_emotional_core import JeffreyEmotionalCore
        from core.jeffrey_memory_integration import JeffreyUnifiedMemory

        # Cr√©er les composants principaux
        emotional_core = JeffreyEmotionalCore(memory_path="Jeffrey_Memoire")
        unified_memory = JeffreyUnifiedMemory(base_path="Jeffrey_Memoire")
        unified_memory.connect_emotional_core(emotional_core)

        # Test d'une s√©quence d'interaction compl√®te
        user_message = "Je me sens un peu triste aujourd'hui"

        # 1. D√©tection √©motionnelle
        emotions = emotional_core.detecter_emotion(user_message)
        emotional_core.update_emotional_state(emotions)

        # 2. G√©n√©ration de la m√©t√©o int√©rieure
        meteo = emotional_core.get_meteo_interieure()

        # 3. Enregistrement en m√©moire
        jeffrey_response = f"Je comprends, {meteo['meteo']}. Je suis l√† pour toi."
        memory_id = unified_memory.process_interaction(user_message, jeffrey_response)

        print(f"‚úÖ Test d'int√©gration r√©ussi:")
        print(f"   √âmotions d√©tect√©es: {emotions}")
        print(f"   M√©t√©o int√©rieure: {meteo['meteo']}")
        print(f"   M√©moire sauvegard√©e: {memory_id}")

                                                    return True

                                                    except Exception as e:
        print(f"üîó ‚ùå Erreur dans le test d'int√©gration: {e}")
        import traceback

        traceback.print_exc()
                                                        return False


                                                        def main():
    """Point d'entr√©e principal des tests"""
    print("üöÄ D√©but des tests de correction...")

    tests = [
        ("Imports", test_imports),
        ("C≈ìur √©motionnel", test_emotional_core),
        ("M√©moire unifi√©e", test_unified_memory),
        ("Int√©gration", test_integration),
    ]

    results = []

                                                            for test_name, test_func in tests:
                                                                try:
            result = test_func()
            results.append((test_name, result))
                                                                    except Exception as e:
            print(f"üí• Erreur fatale dans {test_name}: {e}")
            results.append((test_name, False))

    # R√©sum√© des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)

    success_count = 0
                                                                        for test_name, success in results:
        status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHEC"
        print(f"{test_name:20} : {status}")
                                                                            if success:
            success_count += 1

    print(f"\nüéØ {success_count}/{len(results)} tests r√©ussis")

                                                                                if success_count == len(results):
        print("üéâ TOUTES LES CORRECTIONS VALID√âES AVEC SUCC√àS !")
        print("‚ú® Jeffrey est pr√™t √† fonctionner !")
                                                                                    else:
        print("‚ö†Ô∏è  Il reste des probl√®mes √† corriger.")

                                                                                        return success_count == len(results)


                                                                                        if __name__ == "__main__":
    main()
