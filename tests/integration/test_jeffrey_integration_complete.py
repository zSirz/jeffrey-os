#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te du syst√®me Jeffrey
V√©rifie que tous les composants fonctionnent ensemble
"""

import time
import json
from datetime import datetime
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def test_jeffrey_complete():
    """Test que tout fonctionne ensemble"""

    print("üîç Test d'int√©gration compl√®te Jeffrey...")

    results = {"tests_passed": 0, "tests_failed": 0, "errors": []}

    # Test 1: Import des modules critiques
    print("\n1Ô∏è‚É£ Test des imports...")
    try:
        from Orchestrateur_IA.core.jeffrey_emotional_core import JeffreyEmotionalCore
        from core.consciousness.jeffrey_living_consciousness import JeffreyLivingConsciousness
        from core.emotions.jeffrey_curiosity_engine import JeffreyCuriosityEngine

        print("‚úÖ Tous les modules critiques import√©s avec succ√®s")
        results["tests_passed"] += 1
        except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Import error: {str(e)}")

    # Test 2: Initialisation du core √©motionnel
    print("\n2Ô∏è‚É£ Test du core √©motionnel...")
            try:
        emotional_core = JeffreyEmotionalCore()
        assert hasattr(
            emotional_core, "curiosity_engine"
        ), "Curiosity engine non trouv√© dans emotional core"
        assert emotional_core.emotional_state["curiosit√©"] > 0, "Curiosit√© non initialis√©e"
        print("‚úÖ Core √©motionnel initialis√© avec curiosit√©")
        results["tests_passed"] += 1
                except Exception as e:
        print(f"‚ùå Erreur core √©motionnel: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Emotional core error: {str(e)}")

    # Test 3: Initialisation de la conscience vivante
    print("\n3Ô∏è‚É£ Test de la conscience vivante...")
                    try:
        consciousness = JeffreyLivingConsciousness()
        assert hasattr(
            consciousness, "curiosity_engine"
        ), "Curiosity engine non trouv√© dans consciousness"
        assert consciousness.proactive_mode, "Mode proactif non activ√©"
        print("‚úÖ Conscience vivante initialis√©e avec curiosit√© proactive")
        results["tests_passed"] += 1
                        except Exception as e:
        print(f"‚ùå Erreur conscience: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Consciousness error: {str(e)}")

    # Test 4: Test de la curiosit√©
    print("\n4Ô∏è‚É£ Test du moteur de curiosit√©...")
                            try:
        curiosity = JeffreyCuriosityEngine()

        # Test de d√©tection d'int√©r√™t
        response = curiosity.generate_curious_response(
            "J'adore jouer au tennis le weekend", {"humeur": "curieuse"}
        )
        assert "tennis" in response.lower() or "?" in response, "Pas de question curieuse g√©n√©r√©e"
        print(f"‚úÖ R√©ponse curieuse g√©n√©r√©e: {response[:100]}...")

        # Test de conversation proactive
        proactive = curiosity.proactive_conversation_starter(35, "curieuse")
        assert proactive is not None, "Pas de message proactif g√©n√©r√©"
        print(f"‚úÖ Message proactif: {proactive[:100]}...")

        results["tests_passed"] += 2
                                except Exception as e:
        print(f"‚ùå Erreur curiosit√©: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Curiosity error: {str(e)}")

    # Test 5: Int√©gration consciousness + curiosity
    print("\n5Ô∏è‚É£ Test d'int√©gration conscience + curiosit√©...")
                                    try:
        # Simuler une conversation
        user_input = "J'ai couru 10km ce matin, je suis √©puis√© mais content!"
        response = consciousness.respond_naturally(user_input)

        # V√©rifier que la r√©ponse contient de la curiosit√©
        assert len(response) > 20, "R√©ponse trop courte"
        print(f"‚úÖ R√©ponse int√©gr√©e: {response[:150]}...")

        # V√©rifier que la curiosit√© a enregistr√© l'info
        curiosity_level = consciousness.curiosity_engine.get_curiosity_level()
        assert curiosity_level > 0, "Niveau de curiosit√© non mis √† jour"
        print(f"‚úÖ Niveau de curiosit√©: {curiosity_level:.2f}")

        results["tests_passed"] += 2
                                        except Exception as e:
        print(f"‚ùå Erreur int√©gration: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Integration error: {str(e)}")

    # Test 6: M√©moire et persistance
    print("\n6Ô∏è‚É£ Test de la m√©moire...")
                                            try:
        # V√©rifier que le syst√®me peut sauvegarder l'√©tat
        state = consciousness.get_consciousness_state()
        assert "emotional_layers" in state, "√âtat √©motionnel manquant"
        assert "humeur_actuelle" in state, "Humeur actuelle manquante"

        # Sauvegarder et recharger
        consciousness._save_consciousness_state()
        print("‚úÖ √âtat de conscience sauvegard√©")

        # Cr√©er une nouvelle instance et v√©rifier la persistance
        new_consciousness = JeffreyLivingConsciousness()
        new_consciousness._load_consciousness_state()
        print("‚úÖ √âtat de conscience recharg√© avec succ√®s")

        results["tests_passed"] += 2
                                                except Exception as e:
        print(f"‚ùå Erreur m√©moire: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Memory error: {str(e)}")

    # Test 7: Performance
    print("\n7Ô∏è‚É£ Test de performance...")
                                                    try:
        start_time = time.time()

        # Simuler 10 interactions
                                                        for i in range(10):
            response = consciousness.respond_naturally(f"Test message {i}")

        elapsed = time.time() - start_time
        avg_time = elapsed / 10

        assert avg_time < 1.0, f"Temps de r√©ponse trop lent: {avg_time:.2f}s"
        print(f"‚úÖ Performance OK: {avg_time:.3f}s par r√©ponse en moyenne")

        results["tests_passed"] += 1
                                                            except Exception as e:
        print(f"‚ùå Erreur performance: {e}")
        results["tests_failed"] += 1
        results["errors"].append(f"Performance error: {str(e)}")

    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS D'INT√âGRATION")
    print("=" * 60)
    print(f"‚úÖ Tests r√©ussis: {results['tests_passed']}")
    print(f"‚ùå Tests √©chou√©s: {results['tests_failed']}")

                                                                if results["errors"]:
        print("\n‚ö†Ô∏è Erreurs d√©tect√©es:")
                                                                    for error in results["errors"]:
            print(f"  - {error}")

    # D√©terminer le statut global
    total_tests = results["tests_passed"] + results["tests_failed"]
    success_rate = results["tests_passed"] / total_tests if total_tests > 0 else 0

                                                                        if success_rate == 1.0:
        print("\nüéâ TOUS LES TESTS PASSENT ! Le syst√®me est pleinement int√©gr√©.")
                                                                            elif success_rate > 0.8:
        print("\n‚úÖ La plupart des tests passent. Quelques ajustements n√©cessaires.")
                                                                                elif success_rate > 0.5:
        print("\n‚ö†Ô∏è Int√©gration partielle. Des corrections sont n√©cessaires.")
                                                                                    else:
        print("\n‚ùå Int√©gration d√©faillante. R√©vision majeure requise.")

    print("=" * 60)

    # Sauvegarder le rapport
                                                                                        with open("integration_test_report.json", "w", encoding="utf-8") as f:
        json.dump(
            {
                "timestamp": datetime.now().isoformat(),
                "results": results,
                "success_rate": success_rate,
            },
            f,
            indent=2,
        )

                                                                                            return success_rate > 0.8


                                                                                            if __name__ == "__main__":
    # Ex√©cuter les tests
    success = test_jeffrey_complete()

    # Code de sortie bas√© sur le succ√®s
    sys.exit(0 if success else 1)
